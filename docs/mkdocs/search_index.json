{
    "docs": [
        {
            "location": "/",
            "text": "Gluu Server Community Edition Docs\n\n\nNavigating The Docs\n\n\nInstall Gluu Server\n\n\nUpgrading from a previous release\n\n\n\n\n\n\nConfigure Cluster\n\n\nGluu Server GUI\n\n\nIntegrate Gluu Server\n\n\nService Provider/Requesting Party Integration\n\n\nIntegration Guides\n\n\n\n\n\n\nAuthentication\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nGluu Server Community Edition Docs\n\n\nGluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.\n\n\nPrimarily, the Gluu Server is used to achieve the following solutions:   \n\n- Outbound and Inbound Single Sign-On (SSO)    \n\n- Centralized authentication and authorization    \n\n- Customer, partner, and employee authentication    \n\n- Web & API access management   \n\n- Strong authentication   \n\n- Identity Federation     \n\n\nThe code is open source, and available on \nGithub\n.\n\n\nCommunity support can be enlisted on the \nGluu support site\n. If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of \nVIP support\n options. \n\n\nNavigating The Docs\n\n\nThe menu on the left can be used to navigate the docs. However for convenience the following is given.\n\n\nInstall Gluu Server\n\n\n\n\n\n\n\n\nOperating System\n\n\nVersion\n\n\n\n\n\n\n\n\n\n\nUbuntu\n\n\n14.04\n \n \n16.04\n\n\n\n\n\n\nCentOS\n\n\n6.x\n \n \n7.2\n\n\n\n\n\n\nRHEL\n\n\n6.x\n \n \n7\n\n\n\n\n\n\nDebian\n\n\n8.x\n\n\n\n\n\n\n\n\nUpgrading from a previous release\n\n\n\n\nUpgrade to latest release\n\n\n\n\nConfigure Cluster\n\n\nPlease use the following to confugure Gluu Server manual cluster.\n\n\n\n\nCluster with Gluu Server\n\n\n\n\nGluu Server GUI\n\n\nThe following pages explain the oxTrust GUI\n\n\n\n\n\n\n\n\noxTrust Tab Menu\n\n\nSub-menu\n\n\n\n\n\n\n\n\n\n\nConfiguration\n\n\noxTrust JSON Configuration\n \noxAuth JSON Configuration\n \nCache Refresh/Backend LDAP/AD\n\n\n\n\n\n\nSAML\n\n\nOutbound\n \nInbound\n\n\n\n\n\n\nOpenID Connect\n\n\nn/a\n\n\n\n\n\n\nUMA\n\n\nn/a\n\n\n\n\n\n\nUsers\n\n\nImport People\n\n\n\n\n\n\nPersonal\n\n\nn/a\n\n\n\n\n\n\n\n\nIntegrate Gluu Server\n\n\nService Provider/Requesting Party Integration\n\n\n\n\n\n\n\n\nSAML SP\n\n\nOpenID Connect RP\n\n\n\n\n\n\n\n\n\n\nCentOS\n\n\nCentOS\n\n\n\n\n\n\nUbuntu\n\n\nUbuntu\n\n\n\n\n\n\nIIS 7\n\n\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\n\n\n\n\nIntegration Guides\n\n\n\n\n\n\n\n\nSSO\n\n\nPlugin\n\n\n\n\n\n\n\n\n\n\nGoogle\n\n\nLiferay\n\n\n\n\n\n\nHobsons\n\n\n\n\n\n\n\n\nSalesforce\n\n\n\n\n\n\n\n\n\n\nAuthentication\n\n\n\n\n\n\n\n\nMulti Factor Guides\n\n\n\n\n\n\n\n\n\n\nDUO\n\n\n\n\n\n\nU2F\n\n\n\n\n\n\noxPush2\n\n\n\n\n\n\nWikid\n\n\n\n\n\n\nCertificate\n\n\n\n\n\n\n\n\nSupport\n\n\nPlease see the \nFAQ Page\n for basic troubleshooting, or \nopen a ticket\n on our support portal for community support. Gluu also offers paid support. Please view our \npricing page\n to learn more about our VIP support options.",
            "title": "Home"
        },
        {
            "location": "/#gluu-server-community-edition-docs",
            "text": "Gluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.  Primarily, the Gluu Server is used to achieve the following solutions:    \n- Outbound and Inbound Single Sign-On (SSO)     \n- Centralized authentication and authorization     \n- Customer, partner, and employee authentication     \n- Web & API access management    \n- Strong authentication    \n- Identity Federation       The code is open source, and available on  Github .  Community support can be enlisted on the  Gluu support site . If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of  VIP support  options.",
            "title": "Gluu Server Community Edition Docs"
        },
        {
            "location": "/#navigating-the-docs",
            "text": "The menu on the left can be used to navigate the docs. However for convenience the following is given.",
            "title": "Navigating The Docs"
        },
        {
            "location": "/#install-gluu-server",
            "text": "Operating System  Version      Ubuntu  14.04     16.04    CentOS  6.x     7.2    RHEL  6.x     7    Debian  8.x     Upgrading from a previous release   Upgrade to latest release",
            "title": "Install Gluu Server"
        },
        {
            "location": "/#configure-cluster",
            "text": "Please use the following to confugure Gluu Server manual cluster.   Cluster with Gluu Server",
            "title": "Configure Cluster"
        },
        {
            "location": "/#gluu-server-gui",
            "text": "The following pages explain the oxTrust GUI     oxTrust Tab Menu  Sub-menu      Configuration  oxTrust JSON Configuration   oxAuth JSON Configuration   Cache Refresh/Backend LDAP/AD    SAML  Outbound   Inbound    OpenID Connect  n/a    UMA  n/a    Users  Import People    Personal  n/a",
            "title": "Gluu Server GUI"
        },
        {
            "location": "/#integrate-gluu-server",
            "text": "Service Provider/Requesting Party Integration     SAML SP  OpenID Connect RP      CentOS  CentOS    Ubuntu  Ubuntu    IIS 7     Windows      Integration Guides     SSO  Plugin      Google  Liferay    Hobsons     Salesforce",
            "title": "Integrate Gluu Server"
        },
        {
            "location": "/#authentication",
            "text": "Multi Factor Guides      DUO    U2F    oxPush2    Wikid    Certificate",
            "title": "Authentication"
        },
        {
            "location": "/#support",
            "text": "Please see the  FAQ Page  for basic troubleshooting, or  open a ticket  on our support portal for community support. Gluu also offers paid support. Please view our  pricing page  to learn more about our VIP support options.",
            "title": "Support"
        },
        {
            "location": "/introduction/",
            "text": "Introduction\n\n\nHistory\n\n\nDesign Goals\n\n\nArchitecture\n\n\nLicense\n\n\n\n\n\n\nIntroduction\n\n\nThe Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.\n\n\nHistory\n\n\nGluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.(\nRead More\n)\n\n\nDesign Goals\n\n\nAt OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux...(\nRead More\n)\n\n\nArchitecture\n\n\nThere are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.(\nRead More\n)\n\n\nLicense\n\n\nAny software published by Gluu in the OX Project is under the \nMIT License\n.\nThe third party components have separate licenses.\n\n\n\n\n\n\n\n\nComponent\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nShibboleth\n\n\nApache2\n\n\n\n\n\n\nOpenDJ\n\n\nCDDL-1.0\n\n\n\n\n\n\nAsimba\n\n\nGNU APGL 3.0\n\n\n\n\n\n\nJagger\n\n\nMIT License\n\n\n\n\n\n\n\n\nNote: Gluu maintains a fork of OpenDJ 3 in \nour Github\n.",
            "title": "Summary"
        },
        {
            "location": "/introduction/#introduction",
            "text": "The Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.",
            "title": "Introduction"
        },
        {
            "location": "/introduction/#history",
            "text": "Gluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.( Read More )",
            "title": "History"
        },
        {
            "location": "/introduction/#design-goals",
            "text": "At OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux...( Read More )",
            "title": "Design Goals"
        },
        {
            "location": "/introduction/#architecture",
            "text": "There are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.( Read More )",
            "title": "Architecture"
        },
        {
            "location": "/introduction/#license",
            "text": "Any software published by Gluu in the OX Project is under the  MIT License .\nThe third party components have separate licenses.     Component  License      Shibboleth  Apache2    OpenDJ  CDDL-1.0    Asimba  GNU APGL 3.0    Jagger  MIT License     Note: Gluu maintains a fork of OpenDJ 3 in  our Github .",
            "title": "License"
        },
        {
            "location": "/introduction/history/",
            "text": "History\n\n\nHow we got started\n\n\nVersions 1 and 2\n\n\nVersion 3\n\n\nEnter OAuth2\n\n\n\n\n\n\n\n\n\n\nHistory\n\n\nHow we got started\n\n\nGluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.\n\n\nVersions 1 and 2\n\n\nVersions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.\n\n\nVersion 3\n\n\nThe first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.\n\n\nEnter OAuth2\n\n\nOAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for\n\nIDCubed\n. This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.",
            "title": "History"
        },
        {
            "location": "/introduction/history/#history",
            "text": "",
            "title": "History"
        },
        {
            "location": "/introduction/history/#how-we-got-started",
            "text": "Gluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.",
            "title": "How we got started"
        },
        {
            "location": "/introduction/history/#versions-1-and-2",
            "text": "Versions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.",
            "title": "Versions 1 and 2"
        },
        {
            "location": "/introduction/history/#version-3",
            "text": "The first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.",
            "title": "Version 3"
        },
        {
            "location": "/introduction/history/#enter-oauth2",
            "text": "OAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for IDCubed . This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.",
            "title": "Enter OAuth2"
        },
        {
            "location": "/introduction/design/",
            "text": "Design Goals\n\n\nFree Open Source Identity Suite\n\n\nSupport most promising open standards\n\n\nLeverage existing business processes\n\n\nFree license\n\n\nWrite as a last resort\n\n\nNot just comprehensive, but easy to use\n\n\nHorizontal scalability\n\n\nExtreme flexibility\n\n\n\n\n\n\n\n\n\n\nDesign Goals\n\n\nFree Open Source Identity Suite\n\n\nOne of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.\n\n\nSupport most promising open standards\n\n\nThe goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.\n\n\nLeverage existing business processes\n\n\nWhere possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.\n\n\nFree license\n\n\nThe components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.\n\n\nWrite as a last resort\n\n\nUse the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!\n\n\nNot just comprehensive, but easy to use\n\n\nThe Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.\n\n\nHorizontal scalability\n\n\nSystem administrators should be able to add more servers to make the \nGluu Server scale as much as needed.\n\n\nExtreme flexibility\n\n\nAs Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.",
            "title": "Design Goals"
        },
        {
            "location": "/introduction/design/#design-goals",
            "text": "",
            "title": "Design Goals"
        },
        {
            "location": "/introduction/design/#free-open-source-identity-suite",
            "text": "One of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.",
            "title": "Free Open Source Identity Suite"
        },
        {
            "location": "/introduction/design/#support-most-promising-open-standards",
            "text": "The goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.",
            "title": "Support most promising open standards"
        },
        {
            "location": "/introduction/design/#leverage-existing-business-processes",
            "text": "Where possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.",
            "title": "Leverage existing business processes"
        },
        {
            "location": "/introduction/design/#free-license",
            "text": "The components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.",
            "title": "Free license"
        },
        {
            "location": "/introduction/design/#write-as-a-last-resort",
            "text": "Use the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!",
            "title": "Write as a last resort"
        },
        {
            "location": "/introduction/design/#not-just-comprehensive-but-easy-to-use",
            "text": "The Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.",
            "title": "Not just comprehensive, but easy to use"
        },
        {
            "location": "/introduction/design/#horizontal-scalability",
            "text": "System administrators should be able to add more servers to make the \nGluu Server scale as much as needed.",
            "title": "Horizontal scalability"
        },
        {
            "location": "/introduction/design/#extreme-flexibility",
            "text": "As Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.",
            "title": "Extreme flexibility"
        },
        {
            "location": "/introduction/architecture/",
            "text": "Architecture\n\n\nJ2EE Servlet container\n\n\nApache HTTP front end web server\n\n\nLDAP for Persistence\n\n\nWeb container plugins\n\n\n\n\n\n\n\n\n\n\nArchitecture\n\n\nFollowing is a list of the technical components that comprise the Gluu Server.\n\n\nJ2EE Servlet container\n\n\nMost of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.\n\n\nApache HTTP front end web server\n\n\nAlthough there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content. \n\n\nLDAP for Persistence\n\n\nLDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.\n\n\nWeb container plugins\n\n\nToday, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.\n\n\nWeb agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.\n\n\nIf developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Gluu Server Architecture"
        },
        {
            "location": "/introduction/architecture/#architecture",
            "text": "Following is a list of the technical components that comprise the Gluu Server.",
            "title": "Architecture"
        },
        {
            "location": "/introduction/architecture/#j2ee-servlet-container",
            "text": "Most of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.",
            "title": "J2EE Servlet container"
        },
        {
            "location": "/introduction/architecture/#apache-http-front-end-web-server",
            "text": "Although there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content.",
            "title": "Apache HTTP front end web server"
        },
        {
            "location": "/introduction/architecture/#ldap-for-persistence",
            "text": "LDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.",
            "title": "LDAP for Persistence"
        },
        {
            "location": "/introduction/architecture/#web-container-plugins",
            "text": "Today, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.  Web agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.  If developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Web container plugins"
        },
        {
            "location": "/deployment/",
            "text": "Hardware Requirements\n\n\nOperating System Requirement\n\n\nMemory allocated for Tomcat's heap.\n\n\nFile Descriptor\n\n\nPort\n\n\nDisable SELinux\n\n\n\n\n\n\nCloud Specific Requirements\n\n\nAmazon AWS\n\n\nMicrosoft Azure\n\n\nLinode\n\n\n\n\n\n\nAvailable Components\n\n\nSupport\n\n\n\n\n\n\nHardware Requirements\n\n\nThe Gluu Server is very flexible, and can be used for a wide array of\naccess management requirements. Depending on the size of your data, and\nthe number of concurrent transactions you want to support, you may need\nmore or less memory or CPU capacity.\n\n\nIf you are running all the Gluu Server services on the same server (i.e.\nSAML, OAuth2, LDAP), you will need at least:\n\n\n\n\n\n\n\n\nCPU Unit\n\n\nRAM\n\n\nDisk Space\n\n\n\n\n\n\n\n\n\n\n2\n\n\n4GB\n\n\n40GB\n\n\n\n\n\n\n\n\nNote:\n \nNot enough memory may produce some really weird bugs. From there, you\nmay need to adjust the resources based on your specific requirements.\n\n\nOperating System Requirement\n\n\nGluu Server Community Edition is available for the following Operating Systems.\nClick on the desired operating system for deployment guide.\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported Versions\n\n\nArchitecture\n\n\n\n\n\n\n\n\n\n\nUbuntu Server\n\n\n14.04.2\n\n\n64 Bit\n\n\n\n\n\n\nCentOS 6.x\n\n\n6.5\n, \n6.6\n, \n6.7\n\n\n64 Bit\n\n\n\n\n\n\nCentOS 7.2\n\n\n7.1\n\n\n64 Bit\n\n\n\n\n\n\nRHEL 6.x\n\n\n6.5\n, \n6.6\n, \n6.7\n\n\n64 Bit\n\n\n\n\n\n\nRHEL 7\n\n\n7\n\n\n64 Bit\n\n\n\n\n\n\n\n\nMemory allocated for Tomcat's heap.\n\n\nYou must allocate at least 3GB of RAM for Tomcat's heap to spin up a test instance of Gluu CE 2.4.3 (and later). For production setups we strongly recommend to allocate at least 4-6GB of RAM for that purpose.\n\n\nYou'll be asked to provide amount of RAM allocated during \nsetup.py\n script's phase of installation. You also will be able to change this property after installation has completed, by editing \n/opt/tomcat/conf/gluuTomcatWrapper.conf\n file inside of the container and setting \nwrapper.java.initmemory\n and \nwrapper.java.maxmemory\n properties there to desired values.\n\n\nFile Descriptor\n\n\nSet \nfile descriptors\n\nto 65k. The following steps will help set the \nfile descriptor\n limit.\n\n\n\n\nEdit the \n/etc/security/limits.conf\n file.\n\n\nBy adding following lines to the file you can set default limits which will apply to any user for whom they weren't specified explicitly:\n\n\n\n\n* soft nofile 65536\n* hard nofile 262144\n\n\n\n\n\n\nIf you would like to set limits on per-user basis for \"tomcat\", \"ldap\" and \"apache\" users, you can use next directives in there (please note, that users under which different Gluu services run within container may be named differently in different linux distros; you'll need to edit provided examples accordingly):\n\n\n\n\n    ldap soft nofile 131072\n    ldap hard nofile 262144\n\n    apache soft nofile 131072\n    apache hard nofile 262144\n\n    tomcat soft nofile 131072\n    tomcat hard nofile 262144\n\n\n\n\n\n\nEdit the \n/etc/pam.d/login\n by adding the line:\n\n\n\n\nsession required pam_limits.so\n\n\n\n\n\n\nUse the system file limit to increase the file descriptor limit to 262144. The system file limit is set in \n/proc/sys/fs/file-max\n.\n\n\n\n\necho 262144 > /proc/sys/fs/file-max\n\n\n\n\n\n\nUse the \nulimit\n command to set the file descriptor limit to the hard limit specified in \n/etc/security/limits.conf\n.\n\n\n\n\nulimit -n unlimited\n\n\n\n\n\n\nRestart your system.\n\n\n\n\nPort\n\n\nThe following ports need to stay open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.\n\n\n\n\n\n\n\n\nPort Number\n\n\nProtocol\n\n\n\n\n\n\n\n\n\n\n80\n\n\ntcp\n\n\n\n\n\n\n443\n\n\ntcp\n\n\n\n\n\n\n\n\nDisable SELinux\n\n\n\n\nMake sure there is \"SELINUX=disabled\" directive in the /etc/selinux/config file.\n\n\nReboot your system. After reboot, confirm that the \ngetenforce\n command returns \nDisabled\n.\n\n\n\n\nCloud Specific Requirements\n\n\nAmazon AWS\n\n\nAmazon AWS provides a public and private IP address to its clouds. While\nrunning the \n/install/community-edition-setup/setup.py\n script, use the\nPrivate IP address.\n\n\nMicrosoft Azure\n\n\nAccessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started. Please see the \nAzure Guide\n for more info.\n\n\nLinode\n\n\nThe Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. Please see the \nLinode Guide\n to update your Linode VM Kernel.\n\n\nAvailable Components\n\n\nWhen you deploy the Gluu Server, you will have the opportunity to\nspecify which of the following software you want to use on your\nserver:\n\n\n\n\noxAuth:*\n oxAuth provides endpoints for an OpenID Connect Identity\n  Provider (IdP) and an UMA Authorization Server (AS). Both OpenID\n  Connect and UMA are standard profiles of OAuth 2.0, used for single\n  sign-on (SSO) and web and API access management, respectively.\n\n\noxTrust:*\n oxTrust is the graphical user interface that is used for\n  server management.\n  \nLDAP:*\n The Gluu Server ships with a fork of the OpenDJ LDAP server.\n  It is used to store attributes and server configurations locally.\n\n\nApache 2 web server:*\n Apache 2 serves the web server for the Gluu\n  Server. Without Apache 2, it is not possible to see the hostname from \n  a browser.\n\n\nShibboleth 2 SAML IDP:\n The Shibboleth server provides endpoints\n  for a SAML Identity Provider (IdP). If you want to create single\n  sign-on (SSO) to a SAML SP, you will need a SAML IdP.\n\n\nAsimba SAML Proxy:\n The Asimba SAML proxy should be deployed on if\n  your organization needs to consolidate inbound SAML authentication\n  from the IdPs of partners to a single website or app.\n\n\nCAS:\n CAS is legacy at this point and should only be deployed if\n  your organization has existing apps that can only support CAS for\n  single sign-on.\n\n\noxAuth RP:\n The oxAuth RP is a web UI to enable OpenID Connect\n  discovery, dynamic client registration, and authentication testing.\n\n\noxEleven:\n Web Application providing REST API's for a PKCS #11\n  interface using SoftHSMv2 as cryptographic store.\n\n\n\n\nNote:\n * implies that the software should \nalways\n be deployed.\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open\ntickets on our \nsupport portal\n. For private\nsupport, expedited assistance, and strategic consultations, please view\n\nour pricing\n and \nschedule a meeting with\nus\n to discuss VIP support options.",
            "title": "Preparing VM"
        },
        {
            "location": "/deployment/#hardware-requirements",
            "text": "The Gluu Server is very flexible, and can be used for a wide array of\naccess management requirements. Depending on the size of your data, and\nthe number of concurrent transactions you want to support, you may need\nmore or less memory or CPU capacity.  If you are running all the Gluu Server services on the same server (i.e.\nSAML, OAuth2, LDAP), you will need at least:     CPU Unit  RAM  Disk Space      2  4GB  40GB     Note:   Not enough memory may produce some really weird bugs. From there, you\nmay need to adjust the resources based on your specific requirements.",
            "title": "Hardware Requirements"
        },
        {
            "location": "/deployment/#operating-system-requirement",
            "text": "Gluu Server Community Edition is available for the following Operating Systems.\nClick on the desired operating system for deployment guide.     Operating System  Supported Versions  Architecture      Ubuntu Server  14.04.2  64 Bit    CentOS 6.x  6.5 ,  6.6 ,  6.7  64 Bit    CentOS 7.2  7.1  64 Bit    RHEL 6.x  6.5 ,  6.6 ,  6.7  64 Bit    RHEL 7  7  64 Bit",
            "title": "Operating System Requirement"
        },
        {
            "location": "/deployment/#memory-allocated-for-tomcats-heap",
            "text": "You must allocate at least 3GB of RAM for Tomcat's heap to spin up a test instance of Gluu CE 2.4.3 (and later). For production setups we strongly recommend to allocate at least 4-6GB of RAM for that purpose.  You'll be asked to provide amount of RAM allocated during  setup.py  script's phase of installation. You also will be able to change this property after installation has completed, by editing  /opt/tomcat/conf/gluuTomcatWrapper.conf  file inside of the container and setting  wrapper.java.initmemory  and  wrapper.java.maxmemory  properties there to desired values.",
            "title": "Memory allocated for Tomcat's heap."
        },
        {
            "location": "/deployment/#file-descriptor",
            "text": "Set  file descriptors \nto 65k. The following steps will help set the  file descriptor  limit.   Edit the  /etc/security/limits.conf  file.  By adding following lines to the file you can set default limits which will apply to any user for whom they weren't specified explicitly:   * soft nofile 65536\n* hard nofile 262144   If you would like to set limits on per-user basis for \"tomcat\", \"ldap\" and \"apache\" users, you can use next directives in there (please note, that users under which different Gluu services run within container may be named differently in different linux distros; you'll need to edit provided examples accordingly):       ldap soft nofile 131072\n    ldap hard nofile 262144\n\n    apache soft nofile 131072\n    apache hard nofile 262144\n\n    tomcat soft nofile 131072\n    tomcat hard nofile 262144   Edit the  /etc/pam.d/login  by adding the line:   session required pam_limits.so   Use the system file limit to increase the file descriptor limit to 262144. The system file limit is set in  /proc/sys/fs/file-max .   echo 262144 > /proc/sys/fs/file-max   Use the  ulimit  command to set the file descriptor limit to the hard limit specified in  /etc/security/limits.conf .   ulimit -n unlimited   Restart your system.",
            "title": "File Descriptor"
        },
        {
            "location": "/deployment/#port",
            "text": "The following ports need to stay open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.     Port Number  Protocol      80  tcp    443  tcp",
            "title": "Port"
        },
        {
            "location": "/deployment/#disable-selinux",
            "text": "Make sure there is \"SELINUX=disabled\" directive in the /etc/selinux/config file.  Reboot your system. After reboot, confirm that the  getenforce  command returns  Disabled .",
            "title": "Disable SELinux"
        },
        {
            "location": "/deployment/#cloud-specific-requirements",
            "text": "",
            "title": "Cloud Specific Requirements"
        },
        {
            "location": "/deployment/#amazon-aws",
            "text": "Amazon AWS provides a public and private IP address to its clouds. While\nrunning the  /install/community-edition-setup/setup.py  script, use the\nPrivate IP address.",
            "title": "Amazon AWS"
        },
        {
            "location": "/deployment/#microsoft-azure",
            "text": "Accessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started. Please see the  Azure Guide  for more info.",
            "title": "Microsoft Azure"
        },
        {
            "location": "/deployment/#linode",
            "text": "The Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. Please see the  Linode Guide  to update your Linode VM Kernel.",
            "title": "Linode"
        },
        {
            "location": "/deployment/#available-components",
            "text": "When you deploy the Gluu Server, you will have the opportunity to\nspecify which of the following software you want to use on your\nserver:   oxAuth:*  oxAuth provides endpoints for an OpenID Connect Identity\n  Provider (IdP) and an UMA Authorization Server (AS). Both OpenID\n  Connect and UMA are standard profiles of OAuth 2.0, used for single\n  sign-on (SSO) and web and API access management, respectively.  oxTrust:*  oxTrust is the graphical user interface that is used for\n  server management.\n   LDAP:*  The Gluu Server ships with a fork of the OpenDJ LDAP server.\n  It is used to store attributes and server configurations locally.  Apache 2 web server:*  Apache 2 serves the web server for the Gluu\n  Server. Without Apache 2, it is not possible to see the hostname from \n  a browser.  Shibboleth 2 SAML IDP:  The Shibboleth server provides endpoints\n  for a SAML Identity Provider (IdP). If you want to create single\n  sign-on (SSO) to a SAML SP, you will need a SAML IdP.  Asimba SAML Proxy:  The Asimba SAML proxy should be deployed on if\n  your organization needs to consolidate inbound SAML authentication\n  from the IdPs of partners to a single website or app.  CAS:  CAS is legacy at this point and should only be deployed if\n  your organization has existing apps that can only support CAS for\n  single sign-on.  oxAuth RP:  The oxAuth RP is a web UI to enable OpenID Connect\n  discovery, dynamic client registration, and authentication testing.  oxEleven:  Web Application providing REST API's for a PKCS #11\n  interface using SoftHSMv2 as cryptographic store.   Note:  * implies that the software should  always  be deployed.",
            "title": "Available Components"
        },
        {
            "location": "/deployment/#support",
            "text": "Gluu offers both community and VIP support. Anyone can browse and open\ntickets on our  support portal . For private\nsupport, expedited assistance, and strategic consultations, please view our pricing  and  schedule a meeting with\nus  to discuss VIP support options.",
            "title": "Support"
        },
        {
            "location": "/deployment/ubuntu/",
            "text": "Ubuntu 14.04.2 Installation Guide\n\n\nInstalling Gluu Server\n\n\nConfiguring Gluu Server\n\n\nRemoving/disabling Gluu repo\n\n\nStarting and Stopping the Gluu Server\n\n\nLogin to the chroot environment\n\n\nScripted Installation\n\n\n\n\n\n\nUninstallation\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nUbuntu 14.04.2 Installation Guide\n\n\nInstalling Gluu Server\n\n\nDownload and install Gluu Server by the following commands. Use the\n\n.deb\n installation to perform a base chroot installation with the\nfollowing Gluu Server Base Ubuntu requirements.\n\n\nAs an alternative, use our Gluu repository for Ubuntu Trusty (14.04):\n\n\n# echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n\n# apt-get update\n\n# apt-get install gluu-server-2.4.4\n\n\n\n\nConfiguring Gluu Server\n\n\nAfter both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:\n\n\n# /etc/init.d/gluu-server-2.4.4 start\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py\n\n\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate. It is recommened to use\n\nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n\nfor IP address. After the successful execution of \nsetup.py\n script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri\n\nhttps://hostname.domain\n.\n\n\nFor both help and the latest\ninstallation options see either \nsetup.py help\n, or run\n\n./setup.py -h\n.\n\n\nIf you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in \nsetup.properties.last\n (use the\nUnix command \ngrep --color -i pass\n to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt \nsetup.properties.last\n It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check \nsetup.log\n for a detailed step-by-step\nof the installation. As an alternative you may check the file\n\nsetup_errors.log\n to just see the errors (or stderr output from the\nscripts).\n\n\nRemoving/disabling Gluu repo\n\n\nAfter initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running \n# apt-get update\n)\n\n\nEither remove \n/etc/apt/sources.list.d/gluu-repo.list\n file, or modify it\ncommenting out lines declaring Gluu CE's repos there.\n\n\nStarting and Stopping the Gluu Server\n\n\nYou can start the Gluu Server with this command:\n\n\n# /etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\nYou can stop the Gluu Server with this command:\n\n\n# /etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\nLogin to the chroot environment\n\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\nOr if you prefer...\n\n\n# chroot /home/gluu-server24/ su -\n\n\n\n\n\nScripted Installation\n\n\nIf you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:\n\n\n\n\nSave and backup your existing file \nsetup.properties.last\n.\n\n\nUninstall existing Gluu Server installation.\n\n\nFor a new installation you can either grab a new VM, or just use the\n  existing one.\n\n\nRun all the commands until \nservice gluu-server24 login\n.\n\n\nCopy your file \nsetup.properties.last\n into the new server's\n  \n/install/community-edition-setup/\n location.\n\n\nRename the file \nsetup.properties.last\n to \nsetup.properties\n.\n\n\nRun the setup script with \n./setup.py\n command.\n\n\n\n\nUninstallation\n\n\nFirst, exit from the chroot environment to main Linux.\n\n\nSecond, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:\n\n\n# service gluu-server-2.4.4 stop\n\n# apt-get remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\nOn an installation, any modified files are saved in the directory\n\n/home/gluu-server24.save\n. If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/home/gluu-server24.save'.\n\n\nIn some circumstances, the installation can be broken. In that case\nplease try the following to force to uninstall the package.\n\n\n# dpkg --purge --force-all gluu-server-2.4.4\n\n\n\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open\ntickets on our \nsupport portal\n. For private\nsupport, expedited assistance, and strategic consultations, please view\n\nour pricing\n and \nschedule a meeting with\nus\n to discuss VIP support options.",
            "title": "Ubuntu 14.04"
        },
        {
            "location": "/deployment/ubuntu/#ubuntu-14042-installation-guide",
            "text": "",
            "title": "Ubuntu 14.04.2 Installation Guide"
        },
        {
            "location": "/deployment/ubuntu/#installing-gluu-server",
            "text": "Download and install Gluu Server by the following commands. Use the .deb  installation to perform a base chroot installation with the\nfollowing Gluu Server Base Ubuntu requirements.  As an alternative, use our Gluu repository for Ubuntu Trusty (14.04):  # echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n\n# apt-get update\n\n# apt-get install gluu-server-2.4.4",
            "title": "Installing Gluu Server"
        },
        {
            "location": "/deployment/ubuntu/#configuring-gluu-server",
            "text": "After both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:  # /etc/init.d/gluu-server-2.4.4 start\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py  The  setup.py  script will bring up a prompt to provide information for certificate. It is recommened to use hostname.domain  structure for hostname and refrain from using  127.x.x.x \nfor IP address. After the successful execution of  setup.py  script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri https://hostname.domain .  For both help and the latest\ninstallation options see either  setup.py help , or run ./setup.py -h .  If you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in  setup.properties.last  (use the\nUnix command  grep --color -i pass  to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.  Make sure you remove or encrypt  setup.properties.last  It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check  setup.log  for a detailed step-by-step\nof the installation. As an alternative you may check the file setup_errors.log  to just see the errors (or stderr output from the\nscripts).",
            "title": "Configuring Gluu Server"
        },
        {
            "location": "/deployment/ubuntu/#removingdisabling-gluu-repo",
            "text": "After initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running  # apt-get update )  Either remove  /etc/apt/sources.list.d/gluu-repo.list  file, or modify it\ncommenting out lines declaring Gluu CE's repos there.",
            "title": "Removing/disabling Gluu repo"
        },
        {
            "location": "/deployment/ubuntu/#starting-and-stopping-the-gluu-server",
            "text": "You can start the Gluu Server with this command:  # /etc/init.d/gluu-server-2.4.4 start  You can stop the Gluu Server with this command:  # /etc/init.d/gluu-server-2.4.4 stop",
            "title": "Starting and Stopping the Gluu Server"
        },
        {
            "location": "/deployment/ubuntu/#login-to-the-chroot-environment",
            "text": "# /etc/init.d/gluu-server-2.4.4 login  Or if you prefer...  # chroot /home/gluu-server24/ su -  Scripted Installation  If you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:   Save and backup your existing file  setup.properties.last .  Uninstall existing Gluu Server installation.  For a new installation you can either grab a new VM, or just use the\n  existing one.  Run all the commands until  service gluu-server24 login .  Copy your file  setup.properties.last  into the new server's\n   /install/community-edition-setup/  location.  Rename the file  setup.properties.last  to  setup.properties .  Run the setup script with  ./setup.py  command.",
            "title": "Login to the chroot environment"
        },
        {
            "location": "/deployment/ubuntu/#uninstallation",
            "text": "First, exit from the chroot environment to main Linux.  Second, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:  # service gluu-server-2.4.4 stop\n\n# apt-get remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*  On an installation, any modified files are saved in the directory /home/gluu-server24.save . If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/home/gluu-server24.save'.  In some circumstances, the installation can be broken. In that case\nplease try the following to force to uninstall the package.  # dpkg --purge --force-all gluu-server-2.4.4",
            "title": "Uninstallation"
        },
        {
            "location": "/deployment/ubuntu/#support",
            "text": "Gluu offers both community and VIP support. Anyone can browse and open\ntickets on our  support portal . For private\nsupport, expedited assistance, and strategic consultations, please view our pricing  and  schedule a meeting with\nus  to discuss VIP support options.",
            "title": "Support"
        },
        {
            "location": "/deployment/ubuntu-xenial/",
            "text": "Ubuntu 16.04 Installation Guide\n\n\nInstalling Gluu Server\n\n\nConfiguring Gluu Server\n\n\nRemoving/disabling Gluu repo\n\n\nStarting and Stopping the Gluu Server\n\n\nLogin to the chroot environment\n\n\nScripted Installation\n\n\n\n\n\n\nUninstallation\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nUbuntu 16.04 Installation Guide\n\n\nInstalling Gluu Server\n\n\nDownload and install Gluu Server by the following commands. Use the\n\n.deb\n installation to perform a base chroot installation with the\nfollowing Gluu Server Base Ubuntu requirements.\n\n\nAs an alternative, use our Gluu repository for Ubuntu Xenial (16.04):\n\n\n# echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n\n# apt-get update\n\n# apt-get install gluu-server-2.4.4\n\n\n\n\nConfiguring Gluu Server\n\n\nAfter both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:\n\n\n# /etc/init.d/gluu-server-2.4.4 start\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py\n\n\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate. It is recommened to use\n\nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n\nfor IP address. After the successful execution of \nsetup.py\n script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri\n\nhttps://hostname.domain\n.\n\n\nFor both help and the latest\ninstallation options see either \nsetup.py help\n, or run\n\n./setup.py -h\n.\n\n\nIf you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in \nsetup.properties.last\n (use the\nUnix command \ngrep --color -i pass\n to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt \nsetup.properties.last\n It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check \nsetup.log\n for a detailed step-by-step\nof the installation. As an alternative you may check the file\n\nsetup_errors.log\n to just see the errors (or stderr output from the\nscripts).\n\n\nRemoving/disabling Gluu repo\n\n\nAfter initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running \n# apt-get update\n)\n\n\nEither remove \n/etc/apt/sources.list.d/gluu-repo.list\n file, or modify it\ncommenting out lines declaring Gluu CE's repos there.\n\n\nStarting and Stopping the Gluu Server\n\n\nYou can start the Gluu Server with this command:\n\n\n# /etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\nYou can stop the Gluu Server with this command:\n\n\n# /etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\nLogin to the chroot environment\n\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\nOr if you prefer...\n\n\n# chroot /home/gluu-server24/ su -\n\n\n\n\n\nScripted Installation\n\n\nIf you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:\n\n\n\n\nSave and backup your existing file \nsetup.properties.last\n.\n\n\nUninstall existing Gluu Server installation.\n\n\nFor a new installation you can either grab a new VM, or just use the\n  existing one.\n\n\nRun all the commands until \nservice gluu-server24 login\n.\n\n\nCopy your file \nsetup.properties.last\n into the new server's\n  \n/install/community-edition-setup/\n location.\n\n\nRename the file \nsetup.properties.last\n to \nsetup.properties\n.\n\n\nRun the setup script with \n./setup.py\n command.\n\n\n\n\nUninstallation\n\n\nFirst, exit from the chroot environment to main Linux.\n\n\nSecond, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:\n\n\n# service gluu-server-2.4.4 stop\n\n# apt-get remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\nOn an installation, any modified files are saved in the directory\n\n/home/gluu-server24.save\n. If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/home/gluu-server24.save'.\n\n\nIn some circumstances, the installation can be broken. In that case\nplease try the following to force to uninstall the package.\n\n\n# dpkg --purge --force-all gluu-server-2.4.4\n\n\n\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open\ntickets on our \nsupport portal\n. For private\nsupport, expedited assistance, and strategic consultations, please view\n\nour pricing\n and \nschedule a meeting with\nus\n to discuss VIP support options.",
            "title": "Ubuntu 16.04"
        },
        {
            "location": "/deployment/ubuntu-xenial/#ubuntu-1604-installation-guide",
            "text": "",
            "title": "Ubuntu 16.04 Installation Guide"
        },
        {
            "location": "/deployment/ubuntu-xenial/#installing-gluu-server",
            "text": "Download and install Gluu Server by the following commands. Use the .deb  installation to perform a base chroot installation with the\nfollowing Gluu Server Base Ubuntu requirements.  As an alternative, use our Gluu repository for Ubuntu Xenial (16.04):  # echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n\n# apt-get update\n\n# apt-get install gluu-server-2.4.4",
            "title": "Installing Gluu Server"
        },
        {
            "location": "/deployment/ubuntu-xenial/#configuring-gluu-server",
            "text": "After both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:  # /etc/init.d/gluu-server-2.4.4 start\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py  The  setup.py  script will bring up a prompt to provide information for certificate. It is recommened to use hostname.domain  structure for hostname and refrain from using  127.x.x.x \nfor IP address. After the successful execution of  setup.py  script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri https://hostname.domain .  For both help and the latest\ninstallation options see either  setup.py help , or run ./setup.py -h .  If you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in  setup.properties.last  (use the\nUnix command  grep --color -i pass  to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.  Make sure you remove or encrypt  setup.properties.last  It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check  setup.log  for a detailed step-by-step\nof the installation. As an alternative you may check the file setup_errors.log  to just see the errors (or stderr output from the\nscripts).",
            "title": "Configuring Gluu Server"
        },
        {
            "location": "/deployment/ubuntu-xenial/#removingdisabling-gluu-repo",
            "text": "After initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running  # apt-get update )  Either remove  /etc/apt/sources.list.d/gluu-repo.list  file, or modify it\ncommenting out lines declaring Gluu CE's repos there.",
            "title": "Removing/disabling Gluu repo"
        },
        {
            "location": "/deployment/ubuntu-xenial/#starting-and-stopping-the-gluu-server",
            "text": "You can start the Gluu Server with this command:  # /etc/init.d/gluu-server-2.4.4 start  You can stop the Gluu Server with this command:  # /etc/init.d/gluu-server-2.4.4 stop",
            "title": "Starting and Stopping the Gluu Server"
        },
        {
            "location": "/deployment/ubuntu-xenial/#login-to-the-chroot-environment",
            "text": "# /etc/init.d/gluu-server-2.4.4 login  Or if you prefer...  # chroot /home/gluu-server24/ su -  Scripted Installation  If you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:   Save and backup your existing file  setup.properties.last .  Uninstall existing Gluu Server installation.  For a new installation you can either grab a new VM, or just use the\n  existing one.  Run all the commands until  service gluu-server24 login .  Copy your file  setup.properties.last  into the new server's\n   /install/community-edition-setup/  location.  Rename the file  setup.properties.last  to  setup.properties .  Run the setup script with  ./setup.py  command.",
            "title": "Login to the chroot environment"
        },
        {
            "location": "/deployment/ubuntu-xenial/#uninstallation",
            "text": "First, exit from the chroot environment to main Linux.  Second, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:  # service gluu-server-2.4.4 stop\n\n# apt-get remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*  On an installation, any modified files are saved in the directory /home/gluu-server24.save . If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/home/gluu-server24.save'.  In some circumstances, the installation can be broken. In that case\nplease try the following to force to uninstall the package.  # dpkg --purge --force-all gluu-server-2.4.4",
            "title": "Uninstallation"
        },
        {
            "location": "/deployment/ubuntu-xenial/#support",
            "text": "Gluu offers both community and VIP support. Anyone can browse and open\ntickets on our  support portal . For private\nsupport, expedited assistance, and strategic consultations, please view our pricing  and  schedule a meeting with\nus  to discuss VIP support options.",
            "title": "Support"
        },
        {
            "location": "/deployment/centos/",
            "text": "CentOS 6.5 Installation Guide\n\n\nInstalling Gluu Server\n\n\nConfiguring Gluu Server\n\n\nRemoving/disabling Gluu repo\n\n\nStarting and Stopping the Gluu Server\n\n\nLogin to the chroot environment\n\n\nScripted Installation\n\n\n\n\n\n\nUninstallation\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nCentOS 6.5 Installation Guide\n\n\nInstalling Gluu Server\n\n\nDownload and install Gluu Server by the following commands. Use the\n\n.rpm\n installation to perform a base chroot installation with the\nfollowing Gluu Server Base CentOS requirements.\n\n\nAs an alternative, use our Gluu repository for CentOS 6.5:\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-server-2.4.4\n\n\n\n\nConfiguring Gluu Server\n\n\nAfter both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:\n\n\n# service gluu-server-2.4.4 start\n\n# service gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py\n\n\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate. It is recommened to use\n\nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n\nfor IP address. After the successful execution of \nsetup.py\n script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri\n\nhttps://hostname.domain\n.\n\n\nFor both help and the latest\ninstallation options see either \nsetup.py help\n, or run\n\n./setup.py -h\n.\n\n\nIf you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in \nsetup.properties.last\n (use the\nUnix command \ngrep --color -i pass\n to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt \nsetup.properties.last\n It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check \nsetup.log\n for a detailed step-by-step\nof the installation. As an alternative you may check the file\n\nsetup_errors.log\n to just see the errors (or stderr output from the\nscripts).\n\n\nRemoving/disabling Gluu repo\n\n\nAfter initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running \n# yum update\n)\n\n\nEither remove \n/etc/yum.repos.d/Gluu.repo\n file, or modify it setting\n\"enabled\" property to \"0\" for Gluu CE repos there.\n\n\nStarting and Stopping the Gluu Server\n\n\nYou can start the Gluu Server with this command:\n\n\n# service gluu-server-2.4.4 start\n\n\n\n\nYou can stop the Gluu Server with this command:\n\n\n# service gluu-server-2.4.4 stop\n\n\n\n\nLogin to the chroot environment\n\n\n# service gluu-server-2.4.4 login\n\n\n\n\nScripted Installation\n\n\nIf you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:\n\n\n\n\nSave and backup your existing file \nsetup.properties.last\n.\n\n\nUninstall existing Gluu Server installation.\n\n\nFor a new installation you can either grab a new VM, or just use the\n  existing one.\n\n\nRun all the commands until \nservice gluu-server24 login\n.\n\n\nCopy your file \nsetup.properties.last\n into the new server's\n  \n/install/community-edition-setup/\n location.\n\n\nRename the file \nsetup.properties.last\n to \nsetup.properties\n.\n\n\nRun the setup script with \n./setup.py\n command.\n\n\n\n\nUninstallation\n\n\nFirst, exit from the chroot environment to main Linux.\n\n\nSecond, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:\n\n\n# service gluu-server-2.4.4 stop\n\n# yum remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*\n\n\n\n\nOn an installation, any modified files are saved in the directory\n\n/opt/gluu-server24.save\n. If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/opt/gluu-server24.save'.\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open\ntickets on our \nsupport portal\n. For private\nsupport, expedited assistance, and strategic consultations, please view\n\nour pricing\n and \nschedule a meeting with\nus\n to discuss VIP support options.",
            "title": "CentOS 6.x"
        },
        {
            "location": "/deployment/centos/#centos-65-installation-guide",
            "text": "",
            "title": "CentOS 6.5 Installation Guide"
        },
        {
            "location": "/deployment/centos/#installing-gluu-server",
            "text": "Download and install Gluu Server by the following commands. Use the .rpm  installation to perform a base chroot installation with the\nfollowing Gluu Server Base CentOS requirements.  As an alternative, use our Gluu repository for CentOS 6.5:  # wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-server-2.4.4",
            "title": "Installing Gluu Server"
        },
        {
            "location": "/deployment/centos/#configuring-gluu-server",
            "text": "After both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:  # service gluu-server-2.4.4 start\n\n# service gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py  The  setup.py  script will bring up a prompt to provide information for certificate. It is recommened to use hostname.domain  structure for hostname and refrain from using  127.x.x.x \nfor IP address. After the successful execution of  setup.py  script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri https://hostname.domain .  For both help and the latest\ninstallation options see either  setup.py help , or run ./setup.py -h .  If you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in  setup.properties.last  (use the\nUnix command  grep --color -i pass  to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.  Make sure you remove or encrypt  setup.properties.last  It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check  setup.log  for a detailed step-by-step\nof the installation. As an alternative you may check the file setup_errors.log  to just see the errors (or stderr output from the\nscripts).",
            "title": "Configuring Gluu Server"
        },
        {
            "location": "/deployment/centos/#removingdisabling-gluu-repo",
            "text": "After initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running  # yum update )  Either remove  /etc/yum.repos.d/Gluu.repo  file, or modify it setting\n\"enabled\" property to \"0\" for Gluu CE repos there.",
            "title": "Removing/disabling Gluu repo"
        },
        {
            "location": "/deployment/centos/#starting-and-stopping-the-gluu-server",
            "text": "You can start the Gluu Server with this command:  # service gluu-server-2.4.4 start  You can stop the Gluu Server with this command:  # service gluu-server-2.4.4 stop",
            "title": "Starting and Stopping the Gluu Server"
        },
        {
            "location": "/deployment/centos/#login-to-the-chroot-environment",
            "text": "# service gluu-server-2.4.4 login  Scripted Installation  If you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:   Save and backup your existing file  setup.properties.last .  Uninstall existing Gluu Server installation.  For a new installation you can either grab a new VM, or just use the\n  existing one.  Run all the commands until  service gluu-server24 login .  Copy your file  setup.properties.last  into the new server's\n   /install/community-edition-setup/  location.  Rename the file  setup.properties.last  to  setup.properties .  Run the setup script with  ./setup.py  command.",
            "title": "Login to the chroot environment"
        },
        {
            "location": "/deployment/centos/#uninstallation",
            "text": "First, exit from the chroot environment to main Linux.  Second, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:  # service gluu-server-2.4.4 stop\n\n# yum remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*  On an installation, any modified files are saved in the directory /opt/gluu-server24.save . If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/opt/gluu-server24.save'.",
            "title": "Uninstallation"
        },
        {
            "location": "/deployment/centos/#support",
            "text": "Gluu offers both community and VIP support. Anyone can browse and open\ntickets on our  support portal . For private\nsupport, expedited assistance, and strategic consultations, please view our pricing  and  schedule a meeting with\nus  to discuss VIP support options.",
            "title": "Support"
        },
        {
            "location": "/deployment/centos7/",
            "text": "CentOS 7 Installation Guide\n\n\nInstalling Gluu Server\n\n\nConfiguring Gluu Server\n\n\nRemoving/disabling Gluu repo\n\n\nStarting and Stopping the Gluu Server\n\n\nLogin to the chroot environment\n\n\nScripted Installation\n\n\n\n\n\n\nUninstallation\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nCentOS 7 Installation Guide\n\n\nInstalling Gluu Server\n\n\nDownload and install Gluu Server by the following commands. Use the\n\n.rpm\n installation to perform a base chroot installation with the\nfollowing Gluu Server Base CentOS requirements.\n\n\nAs an alternative, use our Gluu repository for CentOS 7:\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-server-2.4.4\n\n\n\n\nConfiguring Gluu Server\n\n\nAfter both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:\n\n\n# /sbin/gluu-serverd-2.4.4 start\n\n# /sbin/gluu-serverd-2.4.4 enable\n\n# /sbin/gluu-serverd-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py\n\n\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate. It is recommened to use\n\nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n\nfor IP address. After the successful execution of \nsetup.py\n script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri\n\nhttps://hostname.domain\n.\n\n\nFor both help and the latest\ninstallation options see either \nsetup.py help\n, or run\n\n./setup.py -h\n.\n\n\nIf you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in \nsetup.properties.last\n (use the\nUnix command \ngrep --color -i pass\n to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt \nsetup.properties.last\n It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check \nsetup.log\n for a detailed step-by-step\nof the installation. As an alternative you may check the file\n\nsetup_errors.log\n to just see the errors (or stderr output from the\nscripts).\n\n\nRemoving/disabling Gluu repo\n\n\nAfter initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running \n# yum update\n)\n\n\nEither remove \n/etc/yum.repos.d/Gluu.repo\n file, or modify it setting\n\"enabled\" property to \"0\" for Gluu CE repos there.\n\n\nStarting and Stopping the Gluu Server\n\n\nYou can start the Gluu Server with this command:\n\n\n# /sbin/gluu-serverd-2.4.4 start\n\n\n\n\nYou can stop the Gluu Server with this command:\n\n\n# /sbin/gluu-serverd-2.4.4 stop\n\n\n\n\nLogin to the chroot environment\n\n\n# /sbin/gluu-serverd-2.4.4 login\n\n\n\n\nScripted Installation\n\n\nIf you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:\n\n\n\n\nSave and backup your existing file \nsetup.properties.last\n.\n\n\nUninstall existing Gluu Server installation.\n\n\nFor a new installation you can either grab a new VM, or just use the\n  existing one.\n\n\nRun all the commands until \n# /sbin/gluu-serverd-2.4.4 login\n.\n\n\nCopy your file \nsetup.properties.last\n into the new server's\n  \n/install/community-edition-setup/\n location.\n\n\nRename the file \nsetup.properties.last\n to \nsetup.properties\n.\n\n\nRun the setup script with \n./setup.py\n command.\n\n\n\n\nUninstallation\n\n\nFirst, exit from the chroot environment to main Linux.\n\n\nSecond, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:\n\n\n# /sbin/gluu-serverd-2.4.4 stop\n\n# yum remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*\n\n\n\n\nOn an installation, any modified files are saved in the directory\n\n/opt/gluu-server24.save\n. If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/opt/gluu-server24.save'.\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open\ntickets on our \nsupport portal\n. For private\nsupport, expedited assistance, and strategic consultations, please view\n\nour pricing\n and \nschedule a meeting with\nus\n to discuss VIP support options.",
            "title": "CentOS 7.2"
        },
        {
            "location": "/deployment/centos7/#centos-7-installation-guide",
            "text": "",
            "title": "CentOS 7 Installation Guide"
        },
        {
            "location": "/deployment/centos7/#installing-gluu-server",
            "text": "Download and install Gluu Server by the following commands. Use the .rpm  installation to perform a base chroot installation with the\nfollowing Gluu Server Base CentOS requirements.  As an alternative, use our Gluu repository for CentOS 7:  # wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-server-2.4.4",
            "title": "Installing Gluu Server"
        },
        {
            "location": "/deployment/centos7/#configuring-gluu-server",
            "text": "After both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:  # /sbin/gluu-serverd-2.4.4 start\n\n# /sbin/gluu-serverd-2.4.4 enable\n\n# /sbin/gluu-serverd-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py  The  setup.py  script will bring up a prompt to provide information for certificate. It is recommened to use hostname.domain  structure for hostname and refrain from using  127.x.x.x \nfor IP address. After the successful execution of  setup.py  script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri https://hostname.domain .  For both help and the latest\ninstallation options see either  setup.py help , or run ./setup.py -h .  If you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in  setup.properties.last  (use the\nUnix command  grep --color -i pass  to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.  Make sure you remove or encrypt  setup.properties.last  It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check  setup.log  for a detailed step-by-step\nof the installation. As an alternative you may check the file setup_errors.log  to just see the errors (or stderr output from the\nscripts).",
            "title": "Configuring Gluu Server"
        },
        {
            "location": "/deployment/centos7/#removingdisabling-gluu-repo",
            "text": "After initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running  # yum update )  Either remove  /etc/yum.repos.d/Gluu.repo  file, or modify it setting\n\"enabled\" property to \"0\" for Gluu CE repos there.",
            "title": "Removing/disabling Gluu repo"
        },
        {
            "location": "/deployment/centos7/#starting-and-stopping-the-gluu-server",
            "text": "You can start the Gluu Server with this command:  # /sbin/gluu-serverd-2.4.4 start  You can stop the Gluu Server with this command:  # /sbin/gluu-serverd-2.4.4 stop",
            "title": "Starting and Stopping the Gluu Server"
        },
        {
            "location": "/deployment/centos7/#login-to-the-chroot-environment",
            "text": "# /sbin/gluu-serverd-2.4.4 login  Scripted Installation  If you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:   Save and backup your existing file  setup.properties.last .  Uninstall existing Gluu Server installation.  For a new installation you can either grab a new VM, or just use the\n  existing one.  Run all the commands until  # /sbin/gluu-serverd-2.4.4 login .  Copy your file  setup.properties.last  into the new server's\n   /install/community-edition-setup/  location.  Rename the file  setup.properties.last  to  setup.properties .  Run the setup script with  ./setup.py  command.",
            "title": "Login to the chroot environment"
        },
        {
            "location": "/deployment/centos7/#uninstallation",
            "text": "First, exit from the chroot environment to main Linux.  Second, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:  # /sbin/gluu-serverd-2.4.4 stop\n\n# yum remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*  On an installation, any modified files are saved in the directory /opt/gluu-server24.save . If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/opt/gluu-server24.save'.",
            "title": "Uninstallation"
        },
        {
            "location": "/deployment/centos7/#support",
            "text": "Gluu offers both community and VIP support. Anyone can browse and open\ntickets on our  support portal . For private\nsupport, expedited assistance, and strategic consultations, please view our pricing  and  schedule a meeting with\nus  to discuss VIP support options.",
            "title": "Support"
        },
        {
            "location": "/deployment/rhel/",
            "text": "RHEL 6.x Installation Guide\n\n\nInstalling Gluu Server\n\n\nConfiguring Gluu Server\n\n\nRemoving/disabling Gluu repo\n\n\nStarting and Stopping the Gluu Server\n\n\nLogin to the chroot environment\n\n\nScripted Installation\n\n\n\n\n\n\nUninstallation\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nRHEL 6.x Installation Guide\n\n\nInstalling Gluu Server\n\n\nDownload and install Gluu Server by the following commands. Use the\n\n.rpm\n installation to perform a base chroot installation with the\nfollowing Gluu Server Base CentOS requirements.\n\n\nAs an alternative, use our Gluu repository for RHEL 6.x:\n\n\n# wget https://repo.gluu.org/rhel/Gluu-rhel6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-server-2.4.4\n\n\n\n\nConfiguring Gluu Server\n\n\nAfter both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:\n\n\n# service gluu-server-2.4.4 start\n\n# service gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py\n\n\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate. It is recommened to use\n\nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n\nfor IP address. After the successful execution of \nsetup.py\n script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri\n\nhttps://hostname.domain\n.\n\n\nFor both help and the latest\ninstallation options see either \nsetup.py help\n, or run\n\n./setup.py -h\n.\n\n\nIf you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in \nsetup.properties.last\n (use the\nUnix command \ngrep --color -i pass\n to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt \nsetup.properties.last\n It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check \nsetup.log\n for a detailed step-by-step\nof the installation. As an alternative you may check the file\n\nsetup_errors.log\n to just see the errors (or stderr output from the\nscripts).\n\n\nRemoving/disabling Gluu repo\n\n\nAfter initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running \n# yum update\n)\n\n\nEither remove \n/etc/yum.repos.d/Gluu.repo\n file, or modify it setting\n\"enabled\" property to \"0\" for Gluu CE repos there.\n\n\nStarting and Stopping the Gluu Server\n\n\nYou can start the Gluu Server with this command:\n\n\n# service gluu-server-2.4.4 start\n\n\n\n\nYou can stop the Gluu Server with this command:\n\n\n# service gluu-server-2.4.4 stop\n\n\n\n\nLogin to the chroot environment\n\n\n# service gluu-server-2.4.4 login\n\n\n\n\nScripted Installation\n\n\nIf you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:\n\n\n\n\nSave and backup your existing file \nsetup.properties.last\n.\n\n\nUninstall existing Gluu Server installation.\n\n\nFor a new installation you can either grab a new VM, or just use the\n  existing one.\n\n\nRun all the commands until \nservice gluu-server24 login\n.\n\n\nCopy your file \nsetup.properties.last\n into the new server's\n  \n/install/community-edition-setup/\n location.\n\n\nRename the file \nsetup.properties.last\n to \nsetup.properties\n.\n\n\nRun the setup script with \n./setup.py\n command.\n\n\n\n\nUninstallation\n\n\nFirst, exit from the chroot environment to main Linux.\n\n\nSecond, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:\n\n\n# service gluu-server-2.4.4 stop\n\n# yum remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*\n\n\n\n\nOn an installation, any modified files are saved in the directory\n\n/opt/gluu-server24.save\n. If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/opt/gluu-server24.save'.\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open\ntickets on our \nsupport portal\n. For private\nsupport, expedited assistance, and strategic consultations, please view\n\nour pricing\n and \nschedule a meeting with\nus\n to discuss VIP support options.",
            "title": "RHEL 6.x"
        },
        {
            "location": "/deployment/rhel/#rhel-6x-installation-guide",
            "text": "",
            "title": "RHEL 6.x Installation Guide"
        },
        {
            "location": "/deployment/rhel/#installing-gluu-server",
            "text": "Download and install Gluu Server by the following commands. Use the .rpm  installation to perform a base chroot installation with the\nfollowing Gluu Server Base CentOS requirements.  As an alternative, use our Gluu repository for RHEL 6.x:  # wget https://repo.gluu.org/rhel/Gluu-rhel6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-server-2.4.4",
            "title": "Installing Gluu Server"
        },
        {
            "location": "/deployment/rhel/#configuring-gluu-server",
            "text": "After both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:  # service gluu-server-2.4.4 start\n\n# service gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py  The  setup.py  script will bring up a prompt to provide information for certificate. It is recommened to use hostname.domain  structure for hostname and refrain from using  127.x.x.x \nfor IP address. After the successful execution of  setup.py  script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri https://hostname.domain .  For both help and the latest\ninstallation options see either  setup.py help , or run ./setup.py -h .  If you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in  setup.properties.last  (use the\nUnix command  grep --color -i pass  to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.  Make sure you remove or encrypt  setup.properties.last  It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check  setup.log  for a detailed step-by-step\nof the installation. As an alternative you may check the file setup_errors.log  to just see the errors (or stderr output from the\nscripts).",
            "title": "Configuring Gluu Server"
        },
        {
            "location": "/deployment/rhel/#removingdisabling-gluu-repo",
            "text": "After initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running  # yum update )  Either remove  /etc/yum.repos.d/Gluu.repo  file, or modify it setting\n\"enabled\" property to \"0\" for Gluu CE repos there.",
            "title": "Removing/disabling Gluu repo"
        },
        {
            "location": "/deployment/rhel/#starting-and-stopping-the-gluu-server",
            "text": "You can start the Gluu Server with this command:  # service gluu-server-2.4.4 start  You can stop the Gluu Server with this command:  # service gluu-server-2.4.4 stop",
            "title": "Starting and Stopping the Gluu Server"
        },
        {
            "location": "/deployment/rhel/#login-to-the-chroot-environment",
            "text": "# service gluu-server-2.4.4 login  Scripted Installation  If you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:   Save and backup your existing file  setup.properties.last .  Uninstall existing Gluu Server installation.  For a new installation you can either grab a new VM, or just use the\n  existing one.  Run all the commands until  service gluu-server24 login .  Copy your file  setup.properties.last  into the new server's\n   /install/community-edition-setup/  location.  Rename the file  setup.properties.last  to  setup.properties .  Run the setup script with  ./setup.py  command.",
            "title": "Login to the chroot environment"
        },
        {
            "location": "/deployment/rhel/#uninstallation",
            "text": "First, exit from the chroot environment to main Linux.  Second, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:  # service gluu-server-2.4.4 stop\n\n# yum remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*  On an installation, any modified files are saved in the directory /opt/gluu-server24.save . If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/opt/gluu-server24.save'.",
            "title": "Uninstallation"
        },
        {
            "location": "/deployment/rhel/#support",
            "text": "Gluu offers both community and VIP support. Anyone can browse and open\ntickets on our  support portal . For private\nsupport, expedited assistance, and strategic consultations, please view our pricing  and  schedule a meeting with\nus  to discuss VIP support options.",
            "title": "Support"
        },
        {
            "location": "/deployment/rhel7/",
            "text": "RHEL 7 Installation Guide\n\n\nInstalling Gluu Server\n\n\nConfiguring Gluu Server\n\n\nRemoving/disabling Gluu repo\n\n\nStarting and Stopping the Gluu Server\n\n\nLogin to the chroot environment\n\n\nScripted Installation\n\n\n\n\n\n\nUninstallation\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nRHEL 7 Installation Guide\n\n\nInstalling Gluu Server\n\n\nDownload and install Gluu Server by the following commands. Use the\n\n.rpm\n installation to perform a base chroot installation with the\nfollowing Gluu Server Base CentOS requirements.\n\n\nAs an alternative, use our Gluu repository for RHEL 7:\n\n\n# wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-server-2.4.4\n\n\n\n\nConfiguring Gluu Server\n\n\nAfter both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:\n\n\n# /sbin/gluu-serverd-2.4.4 start\n\n# /sbin/gluu-serverd-2.4.4 enable\n\n# /sbin/gluu-serverd-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py\n\n\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate. It is recommened to use\n\nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n\nfor IP address. After the successful execution of \nsetup.py\n script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri\n\nhttps://hostname.domain\n.\n\n\nFor both help and the latest\ninstallation options see either \nsetup.py help\n, or run\n\n./setup.py -h\n.\n\n\nIf you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in \nsetup.properties.last\n (use the\nUnix command \ngrep --color -i pass\n to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt \nsetup.properties.last\n It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check \nsetup.log\n for a detailed step-by-step\nof the installation. As an alternative you may check the file\n\nsetup_errors.log\n to just see the errors (or stderr output from the\nscripts).\n\n\nRemoving/disabling Gluu repo\n\n\nAfter initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running \n# yum update\n)\n\n\nEither remove \n/etc/yum.repos.d/Gluu.repo\n file, or modify it setting\n\"enabled\" property to \"0\" for Gluu CE repos there.\n\n\nStarting and Stopping the Gluu Server\n\n\nYou can start the Gluu Server with this command:\n\n\n# /sbin/gluu-serverd-2.4.4 start\n\n\n\n\nYou can stop the Gluu Server with this command:\n\n\n# /sbin/gluu-serverd-2.4.4 stop\n\n\n\n\nLogin to the chroot environment\n\n\n# /sbin/gluu-serverd-2.4.4 login\n\n\n\n\nScripted Installation\n\n\nIf you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:\n\n\n\n\nSave and backup your existing file \nsetup.properties.last\n.\n\n\nUninstall existing Gluu Server installation.\n\n\nFor a new installation you can either grab a new VM, or just use the\n  existing one.\n\n\nRun all the commands until \nservice gluu-server24 login\n.\n\n\nCopy your file \nsetup.properties.last\n into the new server's\n  \n/install/community-edition-setup/\n location.\n\n\nRename the file \nsetup.properties.last\n to \nsetup.properties\n.\n\n\nRun the setup script with \n./setup.py\n command.\n\n\n\n\nUninstallation\n\n\nFirst, exit from the chroot environment to main Linux.\n\n\nSecond, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:\n\n\n# /sbin/gluu-serverd-2.4.4 stop\n\n# yum remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*\n\n\n\n\nOn an installation, any modified files are saved in the directory\n\n/opt/gluu-server24.save\n. If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/opt/gluu-server24.save'.\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open\ntickets on our \nsupport portal\n. For private\nsupport, expedited assistance, and strategic consultations, please view\n\nour pricing\n and \nschedule a meeting with\nus\n to discuss VIP support options.",
            "title": "RHEL 7"
        },
        {
            "location": "/deployment/rhel7/#rhel-7-installation-guide",
            "text": "",
            "title": "RHEL 7 Installation Guide"
        },
        {
            "location": "/deployment/rhel7/#installing-gluu-server",
            "text": "Download and install Gluu Server by the following commands. Use the .rpm  installation to perform a base chroot installation with the\nfollowing Gluu Server Base CentOS requirements.  As an alternative, use our Gluu repository for RHEL 7:  # wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-server-2.4.4",
            "title": "Installing Gluu Server"
        },
        {
            "location": "/deployment/rhel7/#configuring-gluu-server",
            "text": "After both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:  # /sbin/gluu-serverd-2.4.4 start\n\n# /sbin/gluu-serverd-2.4.4 enable\n\n# /sbin/gluu-serverd-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py  The  setup.py  script will bring up a prompt to provide information for certificate. It is recommened to use hostname.domain  structure for hostname and refrain from using  127.x.x.x \nfor IP address. After the successful execution of  setup.py  script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri https://hostname.domain .  For both help and the latest\ninstallation options see either  setup.py help , or run ./setup.py -h .  If you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in  setup.properties.last  (use the\nUnix command  grep --color -i pass  to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.  Make sure you remove or encrypt  setup.properties.last  It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check  setup.log  for a detailed step-by-step\nof the installation. As an alternative you may check the file setup_errors.log  to just see the errors (or stderr output from the\nscripts).",
            "title": "Configuring Gluu Server"
        },
        {
            "location": "/deployment/rhel7/#removingdisabling-gluu-repo",
            "text": "After initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running  # yum update )  Either remove  /etc/yum.repos.d/Gluu.repo  file, or modify it setting\n\"enabled\" property to \"0\" for Gluu CE repos there.",
            "title": "Removing/disabling Gluu repo"
        },
        {
            "location": "/deployment/rhel7/#starting-and-stopping-the-gluu-server",
            "text": "You can start the Gluu Server with this command:  # /sbin/gluu-serverd-2.4.4 start  You can stop the Gluu Server with this command:  # /sbin/gluu-serverd-2.4.4 stop",
            "title": "Starting and Stopping the Gluu Server"
        },
        {
            "location": "/deployment/rhel7/#login-to-the-chroot-environment",
            "text": "# /sbin/gluu-serverd-2.4.4 login  Scripted Installation  If you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:   Save and backup your existing file  setup.properties.last .  Uninstall existing Gluu Server installation.  For a new installation you can either grab a new VM, or just use the\n  existing one.  Run all the commands until  service gluu-server24 login .  Copy your file  setup.properties.last  into the new server's\n   /install/community-edition-setup/  location.  Rename the file  setup.properties.last  to  setup.properties .  Run the setup script with  ./setup.py  command.",
            "title": "Login to the chroot environment"
        },
        {
            "location": "/deployment/rhel7/#uninstallation",
            "text": "First, exit from the chroot environment to main Linux.  Second, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:  # /sbin/gluu-serverd-2.4.4 stop\n\n# yum remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*  On an installation, any modified files are saved in the directory /opt/gluu-server24.save . If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/opt/gluu-server24.save'.",
            "title": "Uninstallation"
        },
        {
            "location": "/deployment/rhel7/#support",
            "text": "Gluu offers both community and VIP support. Anyone can browse and open\ntickets on our  support portal . For private\nsupport, expedited assistance, and strategic consultations, please view our pricing  and  schedule a meeting with\nus  to discuss VIP support options.",
            "title": "Support"
        },
        {
            "location": "/deployment/debian/",
            "text": "Debian 8 Installation Guide\n\n\nInstalling Gluu Server\n\n\nConfiguring Gluu Server\n\n\nRemoving/disabling Gluu repo\n\n\nStarting and Stopping the Gluu Server\n\n\nLogin to the chroot environment\n\n\nScripted Installation\n\n\n\n\n\n\nUninstallation\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nDebian 8 Installation Guide\n\n\nInstalling Gluu Server\n\n\nDownload and install Gluu Server by the following commands. Use the\n\n.deb\n installation to perform a base chroot installation with the\nfollowing Gluu Server Base Ubuntu requirements.\n\n\nAs an alternative, use our Gluu repository for Debian Jessie (8):\n\n\n# echo \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n# curl https://repo.gluu.org/debian/gluu-apt.key.new-xenial | apt-key add -\n\n# apt-get update\n\n# apt-get install gluu-server-2.4.4\n\n\n\n\nConfiguring Gluu Server\n\n\nAfter both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:\n\n\n# /etc/init.d/gluu-server-2.4.4 start\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py\n\n\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate. It is recommened to use\n\nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n\nfor IP address. After the successful execution of \nsetup.py\n script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri\n\nhttps://hostname.domain\n.\n\n\nFor both help and the latest\ninstallation options see either \nsetup.py help\n, or run\n\n./setup.py -h\n.\n\n\nIf you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in \nsetup.properties.last\n (use the\nUnix command \ngrep --color -i pass\n to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt \nsetup.properties.last\n It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check \nsetup.log\n for a detailed step-by-step\nof the installation. As an alternative you may check the file\n\nsetup_errors.log\n to just see the errors (or stderr output from the\nscripts).\n\n\nRemoving/disabling Gluu repo\n\n\nAfter initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running \n# apt-get update\n)\n\n\nEither remove \n/etc/apt/sources.list.d/gluu-repo.list\n file, or modify it\ncommenting out lines declaring Gluu CE's repos there.\n\n\nStarting and Stopping the Gluu Server\n\n\nYou can start the Gluu Server with this command:\n\n\n# /etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\nYou can stop the Gluu Server with this command:\n\n\n# /etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\nLogin to the chroot environment\n\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\nOr if you prefer...\n\n\n# chroot /home/gluu-server24/ su -\n\n\n\n\n\nScripted Installation\n\n\nIf you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:\n\n\n\n\nSave and backup your existing file \nsetup.properties.last\n.\n\n\nUninstall existing Gluu Server installation.\n\n\nFor a new installation you can either grab a new VM, or just use the\n  existing one.\n\n\nRun all the commands until \nservice gluu-server24 login\n.\n\n\nCopy your file \nsetup.properties.last\n into the new server's\n  \n/install/community-edition-setup/\n location.\n\n\nRename the file \nsetup.properties.last\n to \nsetup.properties\n.\n\n\nRun the setup script with \n./setup.py\n command.\n\n\n\n\nUninstallation\n\n\nFirst, exit from the chroot environment to main Linux.\n\n\nSecond, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:\n\n\n# service gluu-server-2.4.4 stop\n\n# apt-get remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\nOn an installation, any modified files are saved in the directory\n\n/home/gluu-server24.save\n. If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/home/gluu-server24.save'.\n\n\nIn some circumstances, the installation can be broken. In that case\nplease try the following to force to uninstall the package.\n\n\n# dpkg --purge --force-all gluu-server-2.4.4\n\n\n\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open\ntickets on our \nsupport portal\n. For private\nsupport, expedited assistance, and strategic consultations, please view\n\nour pricing\n and \nschedule a meeting with\nus\n to discuss VIP support options.",
            "title": "Debian"
        },
        {
            "location": "/deployment/debian/#debian-8-installation-guide",
            "text": "",
            "title": "Debian 8 Installation Guide"
        },
        {
            "location": "/deployment/debian/#installing-gluu-server",
            "text": "Download and install Gluu Server by the following commands. Use the .deb  installation to perform a base chroot installation with the\nfollowing Gluu Server Base Ubuntu requirements.  As an alternative, use our Gluu repository for Debian Jessie (8):  # echo \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n# curl https://repo.gluu.org/debian/gluu-apt.key.new-xenial | apt-key add -\n\n# apt-get update\n\n# apt-get install gluu-server-2.4.4",
            "title": "Installing Gluu Server"
        },
        {
            "location": "/deployment/debian/#configuring-gluu-server",
            "text": "After both the retrieval, and the installation of the Gluu Server\nsoftware package start the Gluu Server, and login into the local chroot\nenvironment to configure the Gluu Server. These are the single steps:  # /etc/init.d/gluu-server-2.4.4 start\n\n# /etc/init.d/gluu-server-2.4.4 login\n\n# cd /install/community-edition-setup/\n\n#./setup.py  The  setup.py  script will bring up a prompt to provide information for certificate. It is recommened to use hostname.domain  structure for hostname and refrain from using  127.x.x.x \nfor IP address. After the successful execution of  setup.py  script, login to oxTrust,\nthe policy administration point for Gluu. Point your browser to the uri https://hostname.domain .  For both help and the latest\ninstallation options see either  setup.py help , or run ./setup.py -h .  If you are not using a resolvable DNS host, you will need to add\nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in\nthe confirmation (also contained in  setup.properties.last  (use the\nUnix command  grep --color -i pass  to find the according line quickly)\nand look for the LDAP password which is the same as the admin password.  Make sure you remove or encrypt  setup.properties.last  It has the clear \ntext passwords for everything: LDAP, admin user, keystores, and 3DES salt.\nIf something goes wrong, check  setup.log  for a detailed step-by-step\nof the installation. As an alternative you may check the file setup_errors.log  to just see the errors (or stderr output from the\nscripts).",
            "title": "Configuring Gluu Server"
        },
        {
            "location": "/deployment/debian/#removingdisabling-gluu-repo",
            "text": "After initial installation is completed, it's recommended to remove Gluu\nrepos from sources list so you won't inadvertently upgrade your Gluu package by\nconducting regular system's update procedures (like, by running  # apt-get update )  Either remove  /etc/apt/sources.list.d/gluu-repo.list  file, or modify it\ncommenting out lines declaring Gluu CE's repos there.",
            "title": "Removing/disabling Gluu repo"
        },
        {
            "location": "/deployment/debian/#starting-and-stopping-the-gluu-server",
            "text": "You can start the Gluu Server with this command:  # /etc/init.d/gluu-server-2.4.4 start  You can stop the Gluu Server with this command:  # /etc/init.d/gluu-server-2.4.4 stop",
            "title": "Starting and Stopping the Gluu Server"
        },
        {
            "location": "/deployment/debian/#login-to-the-chroot-environment",
            "text": "# /etc/init.d/gluu-server-2.4.4 login  Or if you prefer...  # chroot /home/gluu-server24/ su -  Scripted Installation  If you want to script the installation of the Gluu Server, here is what\nyou can do to achieve your goal:   Save and backup your existing file  setup.properties.last .  Uninstall existing Gluu Server installation.  For a new installation you can either grab a new VM, or just use the\n  existing one.  Run all the commands until  service gluu-server24 login .  Copy your file  setup.properties.last  into the new server's\n   /install/community-edition-setup/  location.  Rename the file  setup.properties.last  to  setup.properties .  Run the setup script with  ./setup.py  command.",
            "title": "Login to the chroot environment"
        },
        {
            "location": "/deployment/debian/#uninstallation",
            "text": "First, exit from the chroot environment to main Linux.  Second, stop the Gluu Server chroot environment which will unmount all\nchroot directories. As a third step, delete both the Gluu Server\npackages that are installed, and the home directory of the Gluu Server\nuser. The following commands illustrate the single steps:  # service gluu-server-2.4.4 stop\n\n# apt-get remove gluu-server-2.4.4\n\n# rm -rf /opt/gluu-server-2.4.4*  On an installation, any modified files are saved in the directory /home/gluu-server24.save . If you want to remove all the remnants of the\ninstallation, delete these files with the command `rm -rf\n/home/gluu-server24.save'.  In some circumstances, the installation can be broken. In that case\nplease try the following to force to uninstall the package.  # dpkg --purge --force-all gluu-server-2.4.4",
            "title": "Uninstallation"
        },
        {
            "location": "/deployment/debian/#support",
            "text": "Gluu offers both community and VIP support. Anyone can browse and open\ntickets on our  support portal . For private\nsupport, expedited assistance, and strategic consultations, please view our pricing  and  schedule a meeting with\nus  to discuss VIP support options.",
            "title": "Support"
        },
        {
            "location": "/deployment/setup_py/",
            "text": "setup.py Command Line Options\n\n\nUse \nsetup.py\n to configure your Gluu Server and to add initial data\nrequired for oxAuth and oxTrust to start. If \nsetup.properties\n is found\nin this folder, these properties will automatically be used instead of\nthe interactive setup.\n\n\nThe following options are available:\n\n\n\n\n-a\n install Asimba\n\n\n-c\n install CAS\n\n\n-d\n specify the directory where community-edition-setup is located. Defaults to '.'\n\n\n-f\n specify \nsetup.properties\n file\n\n\n-h\n invoke this help\n\n\n-l\n install LDAP\n\n\n-n\n no interactive prompt before install starts. Run with \n-f\n\n\n-N\n no Apache httpd server\n\n\n-s\n install the Shibboleth IDP\n\n\n-u\n update hosts file with IP address/hostname\n\n\n-w\n get the development head war files",
            "title": "Setup Script Options"
        },
        {
            "location": "/deployment/setup_py/#setuppy-command-line-options",
            "text": "Use  setup.py  to configure your Gluu Server and to add initial data\nrequired for oxAuth and oxTrust to start. If  setup.properties  is found\nin this folder, these properties will automatically be used instead of\nthe interactive setup.  The following options are available:   -a  install Asimba  -c  install CAS  -d  specify the directory where community-edition-setup is located. Defaults to '.'  -f  specify  setup.properties  file  -h  invoke this help  -l  install LDAP  -n  no interactive prompt before install starts. Run with  -f  -N  no Apache httpd server  -s  install the Shibboleth IDP  -u  update hosts file with IP address/hostname  -w  get the development head war files",
            "title": "setup.py Command Line Options"
        },
        {
            "location": "/deployment/azure/",
            "text": "Installing Gluu Server in Azure\n\n\nAccessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Here is the step by step guide to creating a VM,\ninstalling Gluu Server and accessing the same. These steps are OS\nindependent.\n\n\nSetting up VM\n\n\n\n\n\n\nLog into Windows Azure Administrative Panel\n\n\n\n\n\n\nClick on \nVirtual Machines\n tab, and click \nCreate a Virtual Machine\n link\n\n\n\n\n\n\nFrom the menu, choose \nCompute\n --> \nVirtual Machine\n --> \nFrom Gallery\n branch.\n\n\n\n\n\n\nChoose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.\n\n\n\n\n\n\nProvide a name for the VM in the \nVirtual Machine Name\n field and use\n\nStandard\n for \nTier\n.\n\n\n\n\n\n\nSelect at least \nA2\n variant equipped with 3.5GB RAM in the \nSize\n\ndropdown menu.\n\n\n\n\n\n\nProvide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification \n   without passwords. Then, click \nNext\n.\n\n\n\n\n\n\nCreate a new cloud service and select \nNone\n for \nAvailability Set\n\n   option.\n\n\n\n\nEndpoints Section: This is where the port forwarding is set so \n  that the internal IP address could be selectively reachable from \n  the outside world. By default, only ssh tcp port 22 is there. The\n  public ports for http and https (tcp ports 80 and 443) have to be \n  added and mapped to the same private ports. If the cloud mappings\n  are flagged conflicting, proceed without setting them. Remember to \n  set them after the creation of the VM. Then, click \nNext\n.\n\n\n\n\n\n\n\n\nChoose not to install \nVM Agent\n and click the \ntick\n button to\n   finalize the VM.\n\n\n\n\n\n\nGo to the \nDashboard\n tab of VM Management Panel and copy the \nDNS\n    Name\n. This is the name that is used to access the Gluu Server.\n\n\n\n\n\n\nSSH into the VM and install the Gluu Server. See our \nDeployment\n    Guide\n for\n    installation instructions.\n\n\n\n\n\n\nSetup.py Configuration\n\n\nThis section describes what to put in the prompt when \nsetup.py\n is run\nafter installing Gluu Server.\n\n\n\n\n\n\nIP Address: Do not change the default IP address; just press \nenter\n.\n\n\n\n\n\n\nhostname: Use the DNS name that was copied from the `VM Management Panel.\n\n\n\n\n\n\nUpdate hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n\n\n\n\nFor CentOS, manually update the file \n/etc/sysconfig/networking\n,\n  and add the full DNS name.\n\n\n\n\n\n\n\n\nOther Settings: The other settings can be left to the default values.\n\n\n\n\nRecommendation: the Gluu Server requires a 64bit OS, and allocates\n  at least 4GB of RAM for Apache Tomcat in production environments.\n\n\n\n\n\n\n\n\nNow the chosen DNS name can be used to access the Gluu Server.",
            "title": "Microsoft Azure Guide"
        },
        {
            "location": "/deployment/azure/#installing-gluu-server-in-azure",
            "text": "Accessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Here is the step by step guide to creating a VM,\ninstalling Gluu Server and accessing the same. These steps are OS\nindependent.",
            "title": "Installing Gluu Server in Azure"
        },
        {
            "location": "/deployment/azure/#setting-up-vm",
            "text": "Log into Windows Azure Administrative Panel    Click on  Virtual Machines  tab, and click  Create a Virtual Machine  link    From the menu, choose  Compute  -->  Virtual Machine  -->  From Gallery  branch.    Choose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.    Provide a name for the VM in the  Virtual Machine Name  field and use Standard  for  Tier .    Select at least  A2  variant equipped with 3.5GB RAM in the  Size \ndropdown menu.    Provide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification \n   without passwords. Then, click  Next .    Create a new cloud service and select  None  for  Availability Set \n   option.   Endpoints Section: This is where the port forwarding is set so \n  that the internal IP address could be selectively reachable from \n  the outside world. By default, only ssh tcp port 22 is there. The\n  public ports for http and https (tcp ports 80 and 443) have to be \n  added and mapped to the same private ports. If the cloud mappings\n  are flagged conflicting, proceed without setting them. Remember to \n  set them after the creation of the VM. Then, click  Next .     Choose not to install  VM Agent  and click the  tick  button to\n   finalize the VM.    Go to the  Dashboard  tab of VM Management Panel and copy the  DNS\n    Name . This is the name that is used to access the Gluu Server.    SSH into the VM and install the Gluu Server. See our  Deployment\n    Guide  for\n    installation instructions.",
            "title": "Setting up VM"
        },
        {
            "location": "/deployment/azure/#setuppy-configuration",
            "text": "This section describes what to put in the prompt when  setup.py  is run\nafter installing Gluu Server.    IP Address: Do not change the default IP address; just press  enter .    hostname: Use the DNS name that was copied from the `VM Management Panel.    Update hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.   For CentOS, manually update the file  /etc/sysconfig/networking ,\n  and add the full DNS name.     Other Settings: The other settings can be left to the default values.   Recommendation: the Gluu Server requires a 64bit OS, and allocates\n  at least 4GB of RAM for Apache Tomcat in production environments.     Now the chosen DNS name can be used to access the Gluu Server.",
            "title": "Setup.py Configuration"
        },
        {
            "location": "/deployment/linode/",
            "text": "Linode VM\n\n\nAs mentioned earlier that the Linode VMs come with a custom kernel and they are not compatiable with Gluu Server. The following steps will help you to update your kernel so that Gluu Server can be installed.\n\n\nUpdate Kernel\n\n\nIt is a good practice to check for the current version. Run the following command to check for kernel version:\n\n\n# uname -a\n\n\n\n\nIf the output contains the \n-Linode\n then it is a custom kernel and you have to run the following command:\n\n\n# apt-get install linux-image-virtual grub2\n\n\n\n\nModify Grub2\n\n\nAfter the installation of the new kernel and grub2, it is time to configure grub2.\nEdit the file \ngrub\n under the \n/etc/default/\n folder.\n\n\n# vim /etc/default/grub\n\n\n\n\nPlease ensure that the following lines are present in the \ngrub\n file\n\n\nGRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"\n\n\n\n\nRun the following command to update grub and reboot VM.\n\n\n# update-grub",
            "title": "Linode VM Guide"
        },
        {
            "location": "/deployment/linode/#linode-vm",
            "text": "As mentioned earlier that the Linode VMs come with a custom kernel and they are not compatiable with Gluu Server. The following steps will help you to update your kernel so that Gluu Server can be installed.",
            "title": "Linode VM"
        },
        {
            "location": "/deployment/linode/#update-kernel",
            "text": "It is a good practice to check for the current version. Run the following command to check for kernel version:  # uname -a  If the output contains the  -Linode  then it is a custom kernel and you have to run the following command:  # apt-get install linux-image-virtual grub2  Modify Grub2  After the installation of the new kernel and grub2, it is time to configure grub2.\nEdit the file  grub  under the  /etc/default/  folder.  # vim /etc/default/grub  Please ensure that the following lines are present in the  grub  file  GRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"  Run the following command to update grub and reboot VM.  # update-grub",
            "title": "Update Kernel"
        },
        {
            "location": "/deployment/upgrading/",
            "text": "Upgrading Gluu Server CE\n\n\nExport the data from the current installation\n\n\nInstall the latest version of the Gluu server\n\n\nImport your old data\n\n\n\n\n\n\n\n\n\n\nUpgrading Gluu Server CE\n\n\nUpgrading a Gluu Server is NOT a simple \napt-get upgrade\n. The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:\n\n\n\n\nInstall new version\n\n\nExport the data from your current version\n\n\nStop the current Gluu Server\n\n\nStart the new version of Gluu Server\n\n\nImport data into the new server\n\n\n\n\nGluu provides the necessary \nscripts\n to perform the import and export of the data in and out of the servers.\n\n\n\n\nNOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one. \n\n\n\n\nExport the data from the current installation\n\n\n# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py\n\n\n\n\nThe export script will generate a directory called \nbackup_24\n which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.\n\n\nInstall the latest version of the Gluu server\n\n\nStop the current version of the gluu-server.\n\n\n# service gluu-server-2.4.x stop\n\n\n\n\nConsult the \ndocs\n of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version \n2.4.y\n, then:\n\n\n# cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py\n\n\n\n\nEnter the required information for the setup and complete the installation.\n\n\nImport your old data\n\n\nGo to the folder where you have the \nbackup_24\n folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.\n\n\n\n# wget -c https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import244.py\n\n# wget -c https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py\n\n\n\n\nInstall the \npython-pip\n package using your package manager.\n\n\n# apt-get install python-pip\n\nor\n\n# yum -y install python-pip\n\n\n\n\nInstall the \njson-merge\n Python package and run the import script.\n\n\n# pip install jsonmerge\n\n# chmod +x import244.py\n\n# ./import244.py backup_24\n\n\n\n\nAny error or warning will be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place. After the completion of import, stop/start 2.4.4 container one more time.",
            "title": "Upgrade from 2.4.x"
        },
        {
            "location": "/deployment/upgrading/#upgrading-gluu-server-ce",
            "text": "Upgrading a Gluu Server is NOT a simple  apt-get upgrade . The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:   Install new version  Export the data from your current version  Stop the current Gluu Server  Start the new version of Gluu Server  Import data into the new server   Gluu provides the necessary  scripts  to perform the import and export of the data in and out of the servers.   NOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one.",
            "title": "Upgrading Gluu Server CE"
        },
        {
            "location": "/deployment/upgrading/#export-the-data-from-the-current-installation",
            "text": "# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py  The export script will generate a directory called  backup_24  which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.",
            "title": "Export the data from the current installation"
        },
        {
            "location": "/deployment/upgrading/#install-the-latest-version-of-the-gluu-server",
            "text": "Stop the current version of the gluu-server.  # service gluu-server-2.4.x stop  Consult the  docs  of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version  2.4.y , then:  # cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py  Enter the required information for the setup and complete the installation.",
            "title": "Install the latest version of the Gluu server"
        },
        {
            "location": "/deployment/upgrading/#import-your-old-data",
            "text": "Go to the folder where you have the  backup_24  folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.  \n# wget -c https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import244.py\n\n# wget -c https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py  Install the  python-pip  package using your package manager.  # apt-get install python-pip\n\nor\n\n# yum -y install python-pip  Install the  json-merge  Python package and run the import script.  # pip install jsonmerge\n\n# chmod +x import244.py\n\n# ./import244.py backup_24  Any error or warning will be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place. After the completion of import, stop/start 2.4.4 container one more time.",
            "title": "Import your old data"
        },
        {
            "location": "/deployment/updating/",
            "text": "Gluu Server Update Package\n\n\nGluu Server update packages are released to fix urgent issues, with low \nimpact on deployment. Normally these involve updates to the java code,\neffected replacing the \nwar\n file. These are installed using \n\nyum\n or \napt-get\n command.\n\n\nBackup\n\n\nIt is highly recommended to stop the Gluu Server, and \ntar\n \nfolder \n/opt/gluu-server-2.4.4\n to ensure speedy recovery from any \nunexpected hiccup. If your organization has other contingency plans,\nthat is ok too.\n\n\n\n\nWarning\n\n\nPlease make sure that there is enough disk space to tar the entire \nGluu Server.\n\n\n\n\nUse the following commands to tar the Gluu Server folder from the host\nOS:\n\n\n# service gluu-server-2.4.4 stop\n# tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/\n\n\n\n\nInstall Update Package\n\n\nGluu Server update packages are available from the Gluu Repository.\nMake sure to stop Gluu Server before installing and finalizing the \nupdate package.\n\n\n\n\nCentOS 6.x/7.2, RHEL 6/7:\n \n\n\n\n\n# yum update\n# service gluu-server-2.4.4 stop\n# yum install gluu-updater-2.4.4\n\n\n\n\n\n\n\nUbuntu Server 14.04/16.04, Debian 8:\n \n\n\n\n\n# apt-get update\n# service gluu-server-2.4.4 stop\n# apt-get install gluu-updater-2.4.4\n\n\n\n\n\nAfter the update package is installed, use the following commands to \nfinalize the installation by running the update script. \n\n\n# service gluu-server-2.4.4 start\n# service gluu-server-2.4.4 login\n# cd /opt/upd/2.4.4.sp1/bin\n# ./update_war.sh\n\n\n\n\nIt is recommended to wait a few minutes while the changes take place and \nGluu Server CE can be used.",
            "title": "Update Gluu CE 2.4.4"
        },
        {
            "location": "/deployment/updating/#gluu-server-update-package",
            "text": "Gluu Server update packages are released to fix urgent issues, with low \nimpact on deployment. Normally these involve updates to the java code,\neffected replacing the  war  file. These are installed using  yum  or  apt-get  command.",
            "title": "Gluu Server Update Package"
        },
        {
            "location": "/deployment/updating/#backup",
            "text": "It is highly recommended to stop the Gluu Server, and  tar  \nfolder  /opt/gluu-server-2.4.4  to ensure speedy recovery from any \nunexpected hiccup. If your organization has other contingency plans,\nthat is ok too.   Warning  Please make sure that there is enough disk space to tar the entire \nGluu Server.   Use the following commands to tar the Gluu Server folder from the host\nOS:  # service gluu-server-2.4.4 stop\n# tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/",
            "title": "Backup"
        },
        {
            "location": "/deployment/updating/#install-update-package",
            "text": "Gluu Server update packages are available from the Gluu Repository.\nMake sure to stop Gluu Server before installing and finalizing the \nupdate package.   CentOS 6.x/7.2, RHEL 6/7:     # yum update\n# service gluu-server-2.4.4 stop\n# yum install gluu-updater-2.4.4   Ubuntu Server 14.04/16.04, Debian 8:     # apt-get update\n# service gluu-server-2.4.4 stop\n# apt-get install gluu-updater-2.4.4  After the update package is installed, use the following commands to \nfinalize the installation by running the update script.   # service gluu-server-2.4.4 start\n# service gluu-server-2.4.4 login\n# cd /opt/upd/2.4.4.sp1/bin\n# ./update_war.sh  It is recommended to wait a few minutes while the changes take place and \nGluu Server CE can be used.",
            "title": "Install Update Package"
        },
        {
            "location": "/cluster/csync-installation/",
            "text": "How to install csync2 in different Gluu CE containers\n\n\nCentOS 6.x\n\n\nCentOS 7.x\n\n\nUbuntu 14.x (compiling from sources)\n\n\nUbuntu 14.x (from repo)\n\n\n\n\n\n\n\n\n\n\nHow to install csync2 in different Gluu CE containers\n\n\nCentOS 6.x\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nInstall epel-release-latest by running \nrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\n\n\n\n\n\n\nInstall \ncsync2\n package by running \nyum install csync2\n\n\n\n\n\n\nCentOS 7.x\n\n\nOn the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources.\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nEnable epel-release repo: \n# yum install epel-release\n\n\n\n\n\n\nInstall compiler and development environment: \n# yum groupinstall \"Development Tools\"\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# yum install librsync-devel\n\n\n\n\n\n\n# yum install gnutls-devel\n\n\n\n\n\n\n# yum install sqlite-devel\n\n\n\n\n\n\n\n\n\n\n# mkdir building_csync && cd building_csync/\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/usr/local/etc/csync2/\n directory for storing configuration (for convenience): \n# ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install\n. Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!\n\n\n\n\n\n\nUbuntu 14.x (compiling from sources)\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# apt-get install pkg-config\n\n\n\n\n\n\n# apt-get install libsqlite-dev\n\n\n\n\n\n\n# apt-get install libsqlite3-dev\n\n\n\n\n\n\n# apt-get install librsync-dev\n\n\n\n\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/etc/csync2/\n directory for storing configuration and \n/usr/sbin\n directory for executables (for convenience): \n./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install\n\n\n\n\n\n\nUbuntu 14.x (from repo)\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nRun \napt-get install csync2",
            "title": "Requirements: csync2 Installation"
        },
        {
            "location": "/cluster/csync-installation/#how-to-install-csync2-in-different-gluu-ce-containers",
            "text": "",
            "title": "How to install csync2 in different Gluu CE containers"
        },
        {
            "location": "/cluster/csync-installation/#centos-6x",
            "text": "Log into Gluu-Server container    Install epel-release-latest by running  rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm    Install  csync2  package by running  yum install csync2",
            "title": "CentOS 6.x"
        },
        {
            "location": "/cluster/csync-installation/#centos-7x",
            "text": "On the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources.    Log into Gluu-Server container    Enable epel-release repo:  # yum install epel-release    Install compiler and development environment:  # yum groupinstall \"Development Tools\"    Install csync2's dependencies:    # yum install librsync-devel    # yum install gnutls-devel    # yum install sqlite-devel      # mkdir building_csync && cd building_csync/    Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /usr/local/etc/csync2/  directory for storing configuration (for convenience):  # ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install . Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!",
            "title": "CentOS 7.x"
        },
        {
            "location": "/cluster/csync-installation/#ubuntu-14x-compiling-from-sources",
            "text": "Log into Gluu-Server container    Run  apt-get update    Install csync2's dependencies:    # apt-get install pkg-config    # apt-get install libsqlite-dev    # apt-get install libsqlite3-dev    # apt-get install librsync-dev      Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /etc/csync2/  directory for storing configuration and  /usr/sbin  directory for executables (for convenience):  ./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install",
            "title": "Ubuntu 14.x (compiling from sources)"
        },
        {
            "location": "/cluster/csync-installation/#ubuntu-14x-from-repo",
            "text": "Log into Gluu-Server container    Run  apt-get update    Run  apt-get install csync2",
            "title": "Ubuntu 14.x (from repo)"
        },
        {
            "location": "/cluster/",
            "text": "Manual Cluster\n\n\nDesign\n\n\nRequirements\n\n\nTimezone Requirements\n\n\n\n\n\n\nPreparing VMs\n\n\nPreparing Node-1 of cluster:\n\n\nPreparing Node-2 of cluster:\n\n\n\n\n\n\nLDAP Replication\n\n\nFile System Replication\n\n\nCsync2 installation\n\n\nCsync2 configuration for host-1\n\n\nCsync2 configuration for host-2\n\n\n\n\n\n\n\n\n\n\nCertificate Management\n\n\n[Optional] Actions in case setup.properties.last method of installation didn't work for you\n\n\n\n\n\n\n\n\n\n\nManual Cluster\n\n\nDesign\n\n\nThe following diagram outlines the design of the cluster.\n\n\n\nRequirements\n\n\nFor complete deployment requirements and instructions, please see the \nDeployment Page\n.\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs.\n\n\n\n\n\n\n\n\nNumber of VMs\n\n\nCPU Units\n\n\nRAM\n\n\nRoot Partion\n\n\nPort Requirements\n\n\n\n\n\n\n\n\n\n\n2\n\n\n2 CPU ea.\n\n\n8 GB\n\n\n40 GB\n\n\n4444 and 8989 (LDAP replication), 30865 (file system syncing)\n\n\n\n\n\n\n\n\nNOTE: Above three ports should be opened in such a way that Node-1/host-1 can talk to Node-2/host-2 through these ports and vice versa\n\n\nNote:\n For convenience, the VMs are identified as \nhost-1\n and \nhost-2\n\n\nTimezone Requirements\n\n\nIt is mandatory to keep the date and time synced between all the nodes of a cluster. It is recommended to change the timzone from UTC to local timezone where the cluster is situated or use a single timezone if the cluster spans multiple timezones. The timezone requirement is applicable to both the VM and the \nchroot\n container.\n\n\n\n\nNote\n\n\nIt is recommended to use a single timezone for all the nodes of the cluster in both VM and chroot.\n\n\n\n\nGluu strongly recommends using \nntpd\n in the VMs and run the \nntp\n daemon from \ncronjob\n to sync time. It is preferable if the cronjob is run every second to ensure smooth performance of the cluster.\n\n\nPreparing VMs\n\n\nPreparing Node-1 of cluster:\n\n\n\n\nInstall Gluu CE following the \nDeployment Page\n in \nhost-1\n. \n\n\nNOTE: you must provide hostname of the cluster itself to \nsetup.py\n script (\nidp.gluu.org\n in this example), not hostnames of individual nodes!\n\n\n\n\n\n\n\n\nPreparing Node-2 of cluster:\n\n\n\n\nGrab \nsetup.properties.last\n from Node-1/host-1 ( location: /install/community-edition-setup/ )\n\n\nChange attribute 'ip': Provide node-2/host-2 IP address here. \n\n\nRename \nsetup.properties.last\n to  \nsetup.properties\n\n\nPut this new file inside 2nd node's Gluu Server container ( location: /install/community-edition/setup/ )\n\n\nEnter into Gluu Server Container\n\n\nRun \nsetup.py\n \n\n\nNOTE: As it won't be running in interactive mode this way, make sure you'll provide all optional components (like Shibboleth, Asimba etc) you need to be installed explicitly with keys (run \n# ./setup.py -h\n for full list of them) Please be sure to read \nthis part\n in case you failed to setup the 2nd node using \nsetup.properties.last\n file from the 1st one for some reason, and resorted to installing it from scratch, that will call for additional steps.\n\n\n\n\n\n\n\n\nLDAP Replication\n\n\nNOTE: Deployer need to perform LDAP Replication in Node-1/host-1 as user 'ldap'\n\n\n\n\nThings to know\n\n\n\n\n\n\n\n\n\n\nhost-1\n\n\nhost-2\n\n\n\n\n\n\n\n\n\n\nIP Address eg. 192.168.6.1\n\n\nIp Address eg. 192.168.6.2\n\n\n\n\n\n\nLDAP admin pass\n\n\nLDAP admin pass\n\n\n\n\n\n\nldapGeneralConfigInstall.py\n\n\n\n\n\n\n\n\nreplicationSetup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLog into \nhost-1\n Gluu Server container\n\n\n\n\n\n\nRun \nldapGeneralConfigInstall.py\n in \nhost-1\n. This script will prepare the \nhost-1\n LDAP server to accept various configurations such as \nallow-pre-encoded-passwords\n or applyting the host and port for LDAP Server.\n\n\n\n\n\n\nRun \nreplicationSetup.py\n in \nhost-1\n and it will give a similar output as below:\n\n\n\n\n\n\n[ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$\n\n\n\n\n\n\nInitialize directory server replication with this command \n/opt/opendj/bin/dsreplication initialize\n and it will give the following output (some issues were reported for this step, resulting in \"Invalid credentials\" errors; in that case try to run the tool in console mode rather than interactive: \n/opt/opendj/bin/dsreplication initialize-all --hostname 127.0.0.1 --port 4444 -I 'admin' \\\n-w 'REPLICATION_ADMIN_PASSWORD' -b 'o=gluu' --trustAll --no-prompt\n):\n\n\n\n\n[ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.\n\n\n\n\n(!)\n OpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; another option is to use the same OpenDJ certificate/key pair for both nodes\n   \n\n\nFile System Replication\n\n\n(!)\n Be advised that backup feature is broken in some of earlier versions of csync2 you may get installed from your distribution's repo. In that case you will need either to disable it by commenting out \nbackup-*\n clauses in tool's configuration file, or to build csync2 of version 2.0+ from sources and use key \n-l\n in your xinetd.d's config (like \nserver_args     = -i -l -N idp1.gluu.org\n) on both nodes.\n \n\n\n(!)\n Be sure to verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ for different linux distros.\n\n\ncsync2\n is used for file system syncing between \nhost-1\n and \nhost-2\n. The following locations are synced in between the two VMs.\n\n\n\n\n/opt/idp/conf\n\n\n/opt/idp/metadata\n\n\n/opt/idp/ssl\n\n\n/opt/tomcat/conf\n\n\n/etc/csync2/csync2.cfg\n\n\n\n\nCsync2 installation\n\n\nPlease follow steps provided in next articles to install csync2 on both nodes: \nCentOS 6.x\n, \nCentOS 7.x\n, \nUbuntu 14.x (from repo)\n, \nUbuntu 14.x (compiling from sources)\n.\n\n\nCsync2 configuration for host-1\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nGenerate \ncsync2\n private key by running \ncsync2 -k csync2.key\n and put it into \n/etc/csync2/csync2.key\n file\n\n\n\n\n\n\nCopy the private key to \nhost-2\n and put it into the same file there\n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-1\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \nEnter\n accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\n Add IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp.gluu.org idp1.gluu.org\n192.168.6.2     idp2.gluu.org  \n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, then \n# chkconfig xinetd on\n):\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\nNote:\n The status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n Configure \ncsync2.cfg\n to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n \n\nRun \nmkdir -p /var/backups/csync2\n\n\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\nCsync2 configuration for host-2\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\n(If you haven't done it yet) Copy the private key you generated on \nhost-1\n previously to \nhost-2\n and put it into \n/etc/csync2/csync2.key\n file \n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-2\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\nAdd IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp.gluu.org idp2.gluu.org\n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, then \n# chkconfig xinetd on\n):\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\nNote:\n The status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n Configure \ncsync2.cfg\n to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n Run \nmkdir -p /var/backups/csync2\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\nCertificate Management\n\n\nCertificates are not being synced automatically in the proposed setup. They must be initially copied by hand from one node to the other, and must be synced in this manner each time they are being updated.\nin each host, when required. Move to \n/etc/certs/\n on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks: \nhttpd.*\n, \nasimba.*\n, \nasimbaIDP.*\n, \nidp-encryption.*\n, \nidp-signing.*\n, \nshibIDP.*\n, \noxauth-keys.*\n and \nscim-rs.*\n - to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).\n\n\nAfter that's done you still will need to update default system storage (\ncacerts\n file) at the 2nd node with these newly copied certificates. The \nCertificate Page\n contains the details about available certificates and how to update certificates are detailed in the \nupdate-certificate page\n.\n\n\n[Optional] Actions in case setup.properties.last method of installation didn't work for you\n\n\nIn this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.\n\n\nThus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.\n\n\nTo achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:\n\n\n\n\n\n\nComment out \nauto younger;\n string in \ncsync2.cfg\n on both nodes to disable autoresolution of conflicts\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp1.gluu.org /\n on the 1st node\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp2.gluu.org /\n on the 2nd node\n\n\n\n\n\n\nPrevious commands did initial scan and filled metadata database. Now run \n# csync2 -xrvvv -N idp1.gluu.org /\n on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.\n\n\n\n\n\n\nYou should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this \n# csync2 -frvvv -N idp1.gluu.org /\n on the 1st node to mark its files that are still in dirty state as the ones that will win any conflict next time.\n\n\n\n\n\n\nRun \n# csync2 -xrvvv -N idp1.gluu.org /\n on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.\n\n\n\n\n\n\nUncomment \nauto younger;\n string and proceed to installing cron jobs",
            "title": "Clustering with CE"
        },
        {
            "location": "/cluster/#manual-cluster",
            "text": "",
            "title": "Manual Cluster"
        },
        {
            "location": "/cluster/#design",
            "text": "The following diagram outlines the design of the cluster.",
            "title": "Design"
        },
        {
            "location": "/cluster/#requirements",
            "text": "For complete deployment requirements and instructions, please see the  Deployment Page .\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs.     Number of VMs  CPU Units  RAM  Root Partion  Port Requirements      2  2 CPU ea.  8 GB  40 GB  4444 and 8989 (LDAP replication), 30865 (file system syncing)     NOTE: Above three ports should be opened in such a way that Node-1/host-1 can talk to Node-2/host-2 through these ports and vice versa  Note:  For convenience, the VMs are identified as  host-1  and  host-2  Timezone Requirements  It is mandatory to keep the date and time synced between all the nodes of a cluster. It is recommended to change the timzone from UTC to local timezone where the cluster is situated or use a single timezone if the cluster spans multiple timezones. The timezone requirement is applicable to both the VM and the  chroot  container.   Note  It is recommended to use a single timezone for all the nodes of the cluster in both VM and chroot.   Gluu strongly recommends using  ntpd  in the VMs and run the  ntp  daemon from  cronjob  to sync time. It is preferable if the cronjob is run every second to ensure smooth performance of the cluster.",
            "title": "Requirements"
        },
        {
            "location": "/cluster/#preparing-vms",
            "text": "Preparing Node-1 of cluster:   Install Gluu CE following the  Deployment Page  in  host-1 .   NOTE: you must provide hostname of the cluster itself to  setup.py  script ( idp.gluu.org  in this example), not hostnames of individual nodes!     Preparing Node-2 of cluster:   Grab  setup.properties.last  from Node-1/host-1 ( location: /install/community-edition-setup/ )  Change attribute 'ip': Provide node-2/host-2 IP address here.   Rename  setup.properties.last  to   setup.properties  Put this new file inside 2nd node's Gluu Server container ( location: /install/community-edition/setup/ )  Enter into Gluu Server Container  Run  setup.py    NOTE: As it won't be running in interactive mode this way, make sure you'll provide all optional components (like Shibboleth, Asimba etc) you need to be installed explicitly with keys (run  # ./setup.py -h  for full list of them) Please be sure to read  this part  in case you failed to setup the 2nd node using  setup.properties.last  file from the 1st one for some reason, and resorted to installing it from scratch, that will call for additional steps.",
            "title": "Preparing VMs"
        },
        {
            "location": "/cluster/#ldap-replication",
            "text": "NOTE: Deployer need to perform LDAP Replication in Node-1/host-1 as user 'ldap'   Things to know      host-1  host-2      IP Address eg. 192.168.6.1  Ip Address eg. 192.168.6.2    LDAP admin pass  LDAP admin pass    ldapGeneralConfigInstall.py     replicationSetup.py        Log into  host-1  Gluu Server container    Run  ldapGeneralConfigInstall.py  in  host-1 . This script will prepare the  host-1  LDAP server to accept various configurations such as  allow-pre-encoded-passwords  or applyting the host and port for LDAP Server.    Run  replicationSetup.py  in  host-1  and it will give a similar output as below:    [ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$   Initialize directory server replication with this command  /opt/opendj/bin/dsreplication initialize  and it will give the following output (some issues were reported for this step, resulting in \"Invalid credentials\" errors; in that case try to run the tool in console mode rather than interactive:  /opt/opendj/bin/dsreplication initialize-all --hostname 127.0.0.1 --port 4444 -I 'admin' \\\n-w 'REPLICATION_ADMIN_PASSWORD' -b 'o=gluu' --trustAll --no-prompt ):   [ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.  (!)  OpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; another option is to use the same OpenDJ certificate/key pair for both nodes",
            "title": "LDAP Replication"
        },
        {
            "location": "/cluster/#file-system-replication",
            "text": "(!)  Be advised that backup feature is broken in some of earlier versions of csync2 you may get installed from your distribution's repo. In that case you will need either to disable it by commenting out  backup-*  clauses in tool's configuration file, or to build csync2 of version 2.0+ from sources and use key  -l  in your xinetd.d's config (like  server_args     = -i -l -N idp1.gluu.org ) on both nodes.    (!)  Be sure to verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ for different linux distros.  csync2  is used for file system syncing between  host-1  and  host-2 . The following locations are synced in between the two VMs.   /opt/idp/conf  /opt/idp/metadata  /opt/idp/ssl  /opt/tomcat/conf  /etc/csync2/csync2.cfg   Csync2 installation  Please follow steps provided in next articles to install csync2 on both nodes:  CentOS 6.x ,  CentOS 7.x ,  Ubuntu 14.x (from repo) ,  Ubuntu 14.x (compiling from sources) .  Csync2 configuration for host-1    Log into Gluu-Server container    Generate  csync2  private key by running  csync2 -k csync2.key  and put it into  /etc/csync2/csync2.key  file    Copy the private key to  host-2  and put it into the same file there    Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-1  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit  Enter  accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.    Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp.gluu.org idp1.gluu.org\n192.168.6.2     idp2.gluu.org      Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , then  # chkconfig xinetd on ):   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on  Note:  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.    Configure  csync2.cfg  to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org     Run  mkdir -p /var/backups/csync2     Add cronjob to automate csync2 run. The cronjob example is given below:   1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log   Csync2 configuration for host-2    Log into Gluu-Server container    (If you haven't done it yet) Copy the private key you generated on  host-1  previously to  host-2  and put it into  /etc/csync2/csync2.key  file     Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-2  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.   Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp.gluu.org idp2.gluu.org    Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , then  # chkconfig xinetd on ):   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on  Note:  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.    Configure  csync2.cfg  to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org    Run  mkdir -p /var/backups/csync2    Add cronjob to automate csync2 run. The cronjob example is given below:  1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log",
            "title": "File System Replication"
        },
        {
            "location": "/cluster/#certificate-management",
            "text": "Certificates are not being synced automatically in the proposed setup. They must be initially copied by hand from one node to the other, and must be synced in this manner each time they are being updated.\nin each host, when required. Move to  /etc/certs/  on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks:  httpd.* ,  asimba.* ,  asimbaIDP.* ,  idp-encryption.* ,  idp-signing.* ,  shibIDP.* ,  oxauth-keys.*  and  scim-rs.*  - to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).  After that's done you still will need to update default system storage ( cacerts  file) at the 2nd node with these newly copied certificates. The  Certificate Page  contains the details about available certificates and how to update certificates are detailed in the  update-certificate page .",
            "title": "Certificate Management"
        },
        {
            "location": "/cluster/#optional-actions-in-case-setuppropertieslast-method-of-installation-didnt-work-for-you",
            "text": "In this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.  Thus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.  To achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:    Comment out  auto younger;  string in  csync2.cfg  on both nodes to disable autoresolution of conflicts    Run  # csync2 -crvvv -N idp1.gluu.org /  on the 1st node    Run  # csync2 -crvvv -N idp2.gluu.org /  on the 2nd node    Previous commands did initial scan and filled metadata database. Now run  # csync2 -xrvvv -N idp1.gluu.org /  on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.    You should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this  # csync2 -frvvv -N idp1.gluu.org /  on the 1st node to mark its files that are still in dirty state as the ones that will win any conflict next time.    Run  # csync2 -xrvvv -N idp1.gluu.org /  on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.    Uncomment  auto younger;  string and proceed to installing cron jobs",
            "title": "[Optional] Actions in case setup.properties.last method of installation didn't work for you"
        },
        {
            "location": "/oxtrust/configuration/",
            "text": "Configuration\n\n\nOrganization Configuration\n\n\nSystem Configuration\n\n\nSMTP Server Configuration\n\n\noxTrust Settings\n\n\n\n\n\n\nManage Authentication\n\n\nDefault Authentication Method\n\n\n\n\n\n\nManage Custom Scripts\n\n\nManage Registration\n\n\nDisable Captcha for registration form\n\n\nConfigure Registration Form Attributes\n\n\n\n\n\n\nAttributes\n\n\nCache Refresh\n\n\nCustomer Backend Key and Attributes\n\n\nSource Backend LDAP Servers\n\n\nInum LDAP Server\n\n\nAttributes Mapping\n\n\n\n\n\n\nConfigure Log Viewer\n\n\nView Log File\n\n\nStatus\n\n\n\n\n\n\nConfiguration\n\n\nThis section of the documentation includes instructions for configuring\na number of the components of the Gluu Server in order to adjust the\nserver to your organizational needs.\n\n\n\n\nOrganization Configuration\n\n\nThis section contains the following options:\n- \nSystem Configuration\n\n- \nManage Email Addresses\n\n- \nSMTP Server Configuration\n\n- \noxTrust Configuration\n\n\nSystem Configuration\n\n\nThis feature allows the Gluu system administrator to customize and\nimplement various options such as \nCache Refresh\n, \nFederation Hosting\n,\n\nSCIM Support\n etc.\n\n\n\n\n\n\n\n\nWhite Pages:\n If the user intends to use the built-in White Pages of\n  the Gluu Server, this feature can be enabled here.\n\n\n\n\n\n\nSelf-Service Password Reset:\n The Self-Service Password Reset is\n  disabled by default. For Self-Service Password Reset to work an SMTP\n  server (see below) should be configured as well. Password reset link \n  for your Gluu server should be something like:\n  \"https://your.idp.link/identity/person/passwordReminder.htm\".\n\n\n\n\n\n\nSCIM Support:\n If the organization already has an identity management\n  or provisioning system in place, the SCIM protocol can be used to push\n  and synchronize the existing identity data into the Gluu Server.\n\n\n\n\n\n\nDNS Server:\n The address of the DNS Server goes here.\n\n\n\n\n\n\nMaximum Log Size:\n This option can be used to mitigate the space\n  issues within the Gluu Server. The Gluu Server automatically zips any\n  log file which is bigger than the defined value in this field.\n\n\n\n\n\n\nUser Can Edit Own Profiel:\n This option allows the user to edit his own profile which is located under \nPersonal\n.\n\n\n\n\n\n\nSMTP Server Configuration\n\n\nThe Gluu server can communicate to any SMTP server specified in these\nfields. All Gluu Server related informats \n(cron daemon/logwatch/crash\nreports etc.)\n can be pushed to the desired Gluu Server administrator\nusing this feature.\n\n\n\n\n\n\n\n\nSMTP Host:\n Name of the SMTP host server.\n\n\n\n\n\n\nFrom Name:\n Name of the Gluu Server administrator.\n\n\n\n\n\n\nFrom Email Address:\n Email Address of the Gluu Server administrator.\n\n\n\n\n\n\nRequired Authentication:\n If the SMTP server requires authentication\n  for every access, then enable this option by ticking the check-box,\n  please.\n\n\n\n\n\n\nSMTP User Name:\n The username for the SMTP server goes here.\n\n\n\n\n\n\nSMTP Password:\n The password for the username above goes here. The\n  username and password are used to access the SMTP server.\n\n\n\n\n\n\nRequires SSL:\n If the SMTP Server offers communication via SSL enable\n  this option by ticking the check-box.\n\n\n\n\n\n\nSMTP Port:\n The number of the SMTP host server port has to be entered\n  here.\n\n\n\n\n\n\noxTrust Settings\n\n\nThis feature provides options to add various changes in the Gluu Server\nUser Interface. The Gluu Server administrator can add Title, Display\nName or even modify the Web User Interface color and logo from this\nsection.\n\n\n\n\n\n\n\n\nManager Group:\n The Gluu Server has a single manager group. The users\n  that belong to the manager group can use the Web User Interface to\n  operate the Gluu Server. There is no limit to the number of users that\n  can be added to the manager group.\n\n\n\n\n\n\nOrganization Logo:\n The organization logo can be uploaded and\n  activated from the configuration menu.\n\n\n\n\n\n\nOrganization Favicon:\n This feature can be used to change the\n  organization favicon, if desired.\n\n\n\n\n\n\nManage Authentication\n\n\nThis section allows the Gluu Server administrator to define how and\nwhere the server should connect to authenticate users. If it is a remote\nLDAP/Active Directory server, the values are required. Put the details\nof the data source that you are trying to connect with Gluu Server. For\nexample, the data source can be your back-end Active Directory, or your\nlocal LDAP server.\n\n\n\n\n\n\n\n\nDeactivate:\n This button \nDeactivates/Activates\n the Gluu Server\n  accessibility for authentication.\n\n\n\n\n\n\nName:\n This field contains the name of the authentication server.\n\n\n\n\n\n\nBind DN:\n The \nUsername\n for the authentication server (local\n  LDAP/remote LDAP/remote Active Directory) goes here.\n\n\n\n\n\n\nUse SSL:\n If the authentication server requires a secured port (i.e.\n  636) then this option should be activated using the check-box.\n\n\n\n\n\n\nMax Connections:\n This option can be used to define the total number\n  of simultaneous connections allowed for reading local LDAP/remote Active\n  Directory/remote LDAP.\n\n\n\n\n\n\nServer:\n The unique name of the authentication server and port number\n  (i.e. auth.company.org:636) goes here.\n\n\n\n\n\n\nBase DN:\n Add base DNs in this field to allow the Gluu Server to\n  connect and search the LDAP server. Every directory tree should be added\n  separately using the \nAdd Base DN\n option.\n\n\n\n\n\n\nPrimary Key:\n This field contains the primary key to connect to the\n  authentication server (i.e. SAMAccountName/uid/mail etc.).\n\n\n\n\n\n\nLocal Primary Key:\n This field contains the internal LDAP primary key\n  of the Gluu Server. Generally the key is either the \nuid\n or the \nmail\n.\n\n\n\n\n\n\nEnabled:\n This check-box is used to enable the keys that are inserted\n  in their respective fields.\n\n\n\n\n\n\nChange Bind Password:\n This button assignes a password to\n  authenticate the \nAuthentication Server\n.\n\n\n\n\n\n\nTest LDAP Connection:\n This button checks whether the provided\n  information are sufficient to connect to the authentication server. The\n  scan is done in real time, and it is recommended to be used by the Gluu\n  Server administrators, only.\n\n\n\n\n\n\nDefault Authentication Method\n\n\nThis allows the Gluu Server administrator to select both the default\nauthentication mode, and level for person authentication. Both modes are\nset to \"Default\" until additional authentication mechanisms are enabled\nvia \ncustom scripts\n.\n\n\nGluu Server uses oxAuth as the first step of authentication in all kind of SSO protocols ( OpenID Connect, SAML, CAS )\n\n\n\n\n\n\n\n\nAuthentication Method\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAuthentication mode\n\n\nThis mode is used in case of users authenticating with Gluu Server only without entring into oxTrust\n\n\n\n\n\n\noxTrust authentication mode\n\n\nThis mode is used for authenticate the GUI admins or users with oxTrust GUI access\n\n\n\n\n\n\n\n\n\n\nManage Custom Scripts\n\n\nThe latest edition of the Gluu Server introduced a new Configuration\nsection called \nManage Custom Scripts\n. This is a single place where the\nserver administrator can manage and implement interception scripts to\ncustomize the behavior of the Gluu Server.\n\n\n\n\nPlease see the \nBehaviour Customization page\n for details.\n\n\nManage Registration\n\n\n\n\nFrom the Manage Registration interface, the Gluu Server administrator\ncan customize the self-registration work-flow. Each option will be\ncovered individually as described below.\n\n\nDisable Captcha for registration form\n\n\nUpon activating this feature, the default Captcha will be removed from\nthe registration form.\n\n\nConfigure Registration Form Attributes\n\n\nBy default, there are a limited number of fields present in the\nself-registration form. If more attributes are needed they can be added\nin this section of Registration Management. Once you activate this\nfeature, just start typing the attribute name in the Attributes Filter\nand then add desired attributes to the right column. Finally, click\n\"Update\" to complete this step.\n\n\nAttributes\n\n\nAn \nActive\n attribute list can be seen from the Configuration >\nAttributes section.\n\n\n\n\nThe Gluu Server has a large LDAP tree which includes all standard\nattributes. It is not necessary for all of them to be \nActive\n. The\nactive LDAP trees can be sorted using the \nShow only Active Attributes\n\nlink.\n\n\n\n\nThe Gluu Server administrator can make changes, such as changing the\nstatus to active/inactive, to an attribute after clicking on it.\n\n\n\n\nAdditional attributes can be added from the Gluu Server GUI, oxTrust, by\nclicking the \nAdd Attribute\n button. Then, the following screen will\nappear:\n\n\n\n\n\n\n\n\nName:\n This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.\n\n\n\n\n\n\nSAML1 URI:\n This field contains the SAML1 uri for the custom attribute.\n\n\n\n\n\n\nSAML2 URI:\n This field contains the SAML2 uri for the custom attribute.\n\n\n\n\n\n\nDisplay Name:\n This display name can be anything that is human readable.\n\n\n\n\n\n\nType:\n The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:\n\n\n\n\nText\n\n\nNumeric\n\n\nPhoto\n\n\n\n\nDate\n\n\n\n\n\n\nEdit Type:\n This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).\n\n\n\n\n\n\nView Type:\n This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.\n\n\n\n\n\n\nPrivacy Level:\n Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.\n\n\n\n\n\n\nMultivalued:\n Please select multivalue in this field if the attribute\n  contains more than one value.\n\n\n\n\n\n\nSCIM Attributes:\n If the attribute is a part of SCIM architecture select true.\n\n\n\n\n\n\nDescription:\n This contains a few words to describe the attribute.\n\n\n\n\n\n\nStatus:\n The status, when selected active, will release and publish\n  the attribute in IdP.\n\n\n\n\n\n\nCache Refresh\n\n\nCache Refresh\n was built by Gluu to pull user information from a\nbackend customer Active Directory/LDAP Server. Cache refresh dynamically\nsynchronizes user information from the backend data source of the\ncustomer to the Gluu Server in order to maximize performance. This\nfeature is sensitive in nature and any incorrect action may result in\nloss of data within the Gluu Server. Before configuring Cache Refresh,\nyou should read the Cache Refresh overview (see Articles). For any\nquestions relating to Cache Refresh functionality, you can ask for\nassistance from \nGluu Support\n. \nFor a\nsuccessful Cache Refresh setup, you have to insert data in ALL FIELDS\nbelow.\n\n\n\n\n\n\n\n\nLast Run:\n The date and time of the latest cache refresh cycle\n  completion is shown here.\n\n\n\n\n\n\nUpdates at the Last Run:\n This shows the total number of users who\n  have been updated in the last Cache Refresh cycle. For example an user\n  who has any of his attribute updated will show up here.\n\n\n\n\n\n\nProblem at the Last Run:\n This shows the number of users who have\n  been rejected by the Gluu Server during the update. If there are any\n  rejections, please contact Gluu Support for clarification and help.\n\n\n\n\n\n\n\n\nCustomer Backend Key and Attributes\n\n\n\n\n\n\n\n\nKey Attribute:\n This is the unique key attribute of backend Active\n  Directory/LDAP Server such as SAMAccountname for any Active Directory.\n\n\n\n\n\n\nObject Class:\n This contains the Object Classes of the backend Active\n  Directory/LDAP which has permission to talk to Gluu Server Cache Refresh\n  such as person, organizationalPerson, user etc.\n\n\n\n\n\n\nSource Attribute:\n This contains the list of attributes which will be\n  pulled and read by the Gluu Server.\n\n\n\n\n\n\nCustom LDAP Filter:\n If there is any custom search required, this\nfiltering mechanism can be used such as \"sn=*\" whereas the value of this\nfield ensures that every user must contain an attribute named SN.\n\n\n\n\n\n\nSource Backend LDAP Servers\n\n\n\n\nThis section allows the Gluu Server to connect to the backend Active\nDirectory/LDAP server of the organization.\n\n\n\n\n\n\nName:\n Please input \nsource\n as the value.\n\n\n\n\n\n\nUse Anonymous Bind:\n Some customers do now allow username/password\n  connections to their backend server. Enable this option if this applies\n  to your organization.\n\n\n\n\n\n\nBind DN:\n This contains the username to connect to the backend\n  server. You need to use full DN here. As for example,\n  \ncn=gluu,dc=company,dc=org\n.\n\n\n\n\n\n\nUse SSL:\n Use this feature if the backend server allows SSL\n  connectivity.\n\n\n\n\n\n\nMax Connections:\n This value defines the maximum number of\n  connections that are allowed to read the backend Active Directory/LDAP\n  server. It is recommended to keep the value of 2 or 3.\n\n\n\n\n\n\nServer:\n This contains the backend Active Directory/LDAP server\n  hostname with port i.e. backend.organization.com:389. If organization\n  has a failover server, click \nAdd Server\n and add more hostnames with\n  port.\n\n\n\n\n\n\nBase DN:\n This contains the location of the Active Directory/LDAP\n  tree from where the Gluu Server shall read the user information.\n\n\n\n\n\n\nEnabled:\n This check-box is used to save and push the changes. Do not\n  use this unless the server administrator has entered all the required\n  values.\n\n\n\n\n\n\nChange Bind Password:\n This can be used for a new password or to\n  change any existing password.\n\n\n\n\n\n\nIf your organization has a multiple Active Directory/LDAP server, click\non \nAdd source LDAP server\n and add the additional server information.\nPlease remember that a \nfailover server\n is not a new server.\n\n\nInum LDAP Server\n\n\n\n\nThis section of the application allows the server administrator to\nconnect to the internal LDAP of the Gluu Server. As Gluu Server\nadministrator, you do not need to insert anything here in this section\nas new Gluu Server versions automatically populates this for you (unless\nyou try to manually configure it anyway).\n\n\n\n\n\n\nRefresh Method:\n The Gluu Server allows the Server Administrator to\n  apply two types of Cache Refresh mechanism--(i) VDS Method and (ii) Copy\n  Method.\n\n\n\n\n\n\nVDS Method:\n Any organization with a database like \nmysql\n can use\n  the VDS method. This option can be enabled via the drop-down menu in\n  Refresh Method option.\n\n\n\n\n\n\n\n\n\n\nCopy Method:\n If the organization has any kind of Active\n  Directory/LDAP server, they are strongly recommended to use the \nCopy\n  Method\n from the drop-down menu.\n\n\n\n\n\n\nAttributes Mapping\n\n\nWhen the Copy method is selected, a section for Attribute mapping will\nbe exposed. In this section, the Gluu Server Administrator can map any\nattribute from the backend Active Directory/LDAP to the LDAP cache of\nthe Gluu Server.\n\n\n\n\nIn the source attribute to destination attribute mapping field, you can\nenter the source attribute value on the left, and the destination\nattribute on the right. In other words, you can specify what the\nattribute is on the backend in the left field, and what it should be\nrendered as when it comes through the Gluu Server in the right field.\n\n\nThe Administrator can select any Cache Refresh Method according to the\nbackend Active Directory/LDAP server, but there are some essential\nvalues for both types of cache refresh method. The values are given\nbelow.\n\n\n\n\n\n\nPooling Interval (Minutes):\n This is the interval value for running\n    the Cache Refresh mechanism in the Gluu Server. It is recommended to \n    be kept higher than 15 minutes.\n\n\n\n\n\n\nScript File Name:\n The Gluu Server cache refresh can accept any\n    kind of Jython Script which might help to calculate any custom/complex\n    attribute i.e. eduPersonScopedAffiliation. For more information please\n    contact Gluu Support.\n\n\n\n\n\n\nSnapshot Folder:\n Every cycle of of Gluu Server Cache Refresh cycle\n    saves an overall snapshot and problem-list record on a specified\n    location. This is where the Gluu Server Administrator can specify the\n    location. You can easily decide whether cache refresh synchronizes all\n    users or not. Generally the rejected users are enclosed in the\n    problem-list file. An overall report is displayed at the top of the\n    cache refresh page with headings \nUpdated at the last run\n and\n    \nProblems at the last run\n.\n\n\n\n\n\n\nSnapshot Count:\n This defines the total number of snapshots that\n    are allowed to be saved in the hard drive of the VM. It is recommended\n    to be kept to 20 snapshots.\n\n\n\n\n\n\nLatest Gluu Servers (including Community Edition) introduced two\nupgraded sections here.\n\n\n\n\n\n\nServer IP Address:\n Include the IP of your Gluu Server here. This\n    feature helps to run Cache Refresh mechanism perfectly in a clustered\n    environment.\n\n\n\n\n\n\nRemoved Script File Name location:\n New version of the Gluu Server\n    allows the administrator to manage your custom scripts with more\n    interactive section under configuration named Manage Custom Scripts.\n\n\n\n\n\n\nUpdate:\n This button is used to push the changes in the Gluu\n    Server. Hit this button only when the values have been entered,\n    completely.\n\n\n\n\n\n\nUpdate and Validate Script:\n This button is used to test the\n    operation and integrity of any custom script such as a Jython Script.\n\n\n\n\n\n\nConfigure Log Viewer\n\n\nThe Gluu Server has the facility to read log files using the GUI. The\nlog file can be displayed from the Web UI with a few clicks of the\nmouse. This feature can be enabled from the configuration menu clicking\n\nConfiguration --> Configure Log Viewer\n.\n\n\n\n\nGluu Server comes preloaded with four logs in this page as the screenshot portrays. The oxAuth, oxTrust, Cache Refresh and the console log is available by default.\nClicking on \nAdd log template\n will bring up boxes where log path can be set to view the same from the GUI. The boxes on the\nleft contain the name/description of the log file, and the right boxes\ncontain the path of the log file such as \n/opt/tomcat/logs/demo.log\n.\n\n\nView Log File\n\n\nThe log files configured in the earlier section can be viewed using the\n\nView log file\n feature. This feature can be accessed through the\nconfiguration menu using \nConfiguration --> View Log File\n.\n\n\n\n\nThe \nDisplay last lines count\n field contains the lines that will be\ndisplayed in the Web GUI. If the field contains the value \n400\n, then\nthe Gluu Server will show the last 400 lines of the log in the GUI. The\nscreenshot below shows an according example.\n\n\n\n\nStatus\n\n\n\n\nThe Status section provides a high level overview of server metrics. The\nincluded values are straightforward and shouldn't require any further\nexplanation.",
            "title": "Configuration"
        },
        {
            "location": "/oxtrust/configuration/#configuration",
            "text": "This section of the documentation includes instructions for configuring\na number of the components of the Gluu Server in order to adjust the\nserver to your organizational needs.",
            "title": "Configuration"
        },
        {
            "location": "/oxtrust/configuration/#organization-configuration",
            "text": "This section contains the following options:\n-  System Configuration \n-  Manage Email Addresses \n-  SMTP Server Configuration \n-  oxTrust Configuration",
            "title": "Organization Configuration"
        },
        {
            "location": "/oxtrust/configuration/#system-configuration",
            "text": "This feature allows the Gluu system administrator to customize and\nimplement various options such as  Cache Refresh ,  Federation Hosting , SCIM Support  etc.     White Pages:  If the user intends to use the built-in White Pages of\n  the Gluu Server, this feature can be enabled here.    Self-Service Password Reset:  The Self-Service Password Reset is\n  disabled by default. For Self-Service Password Reset to work an SMTP\n  server (see below) should be configured as well. Password reset link \n  for your Gluu server should be something like:\n  \"https://your.idp.link/identity/person/passwordReminder.htm\".    SCIM Support:  If the organization already has an identity management\n  or provisioning system in place, the SCIM protocol can be used to push\n  and synchronize the existing identity data into the Gluu Server.    DNS Server:  The address of the DNS Server goes here.    Maximum Log Size:  This option can be used to mitigate the space\n  issues within the Gluu Server. The Gluu Server automatically zips any\n  log file which is bigger than the defined value in this field.    User Can Edit Own Profiel:  This option allows the user to edit his own profile which is located under  Personal .",
            "title": "System Configuration"
        },
        {
            "location": "/oxtrust/configuration/#smtp-server-configuration",
            "text": "The Gluu server can communicate to any SMTP server specified in these\nfields. All Gluu Server related informats  (cron daemon/logwatch/crash\nreports etc.)  can be pushed to the desired Gluu Server administrator\nusing this feature.     SMTP Host:  Name of the SMTP host server.    From Name:  Name of the Gluu Server administrator.    From Email Address:  Email Address of the Gluu Server administrator.    Required Authentication:  If the SMTP server requires authentication\n  for every access, then enable this option by ticking the check-box,\n  please.    SMTP User Name:  The username for the SMTP server goes here.    SMTP Password:  The password for the username above goes here. The\n  username and password are used to access the SMTP server.    Requires SSL:  If the SMTP Server offers communication via SSL enable\n  this option by ticking the check-box.    SMTP Port:  The number of the SMTP host server port has to be entered\n  here.",
            "title": "SMTP Server Configuration"
        },
        {
            "location": "/oxtrust/configuration/#oxtrust-settings",
            "text": "This feature provides options to add various changes in the Gluu Server\nUser Interface. The Gluu Server administrator can add Title, Display\nName or even modify the Web User Interface color and logo from this\nsection.     Manager Group:  The Gluu Server has a single manager group. The users\n  that belong to the manager group can use the Web User Interface to\n  operate the Gluu Server. There is no limit to the number of users that\n  can be added to the manager group.    Organization Logo:  The organization logo can be uploaded and\n  activated from the configuration menu.    Organization Favicon:  This feature can be used to change the\n  organization favicon, if desired.",
            "title": "oxTrust Settings"
        },
        {
            "location": "/oxtrust/configuration/#manage-authentication",
            "text": "This section allows the Gluu Server administrator to define how and\nwhere the server should connect to authenticate users. If it is a remote\nLDAP/Active Directory server, the values are required. Put the details\nof the data source that you are trying to connect with Gluu Server. For\nexample, the data source can be your back-end Active Directory, or your\nlocal LDAP server.     Deactivate:  This button  Deactivates/Activates  the Gluu Server\n  accessibility for authentication.    Name:  This field contains the name of the authentication server.    Bind DN:  The  Username  for the authentication server (local\n  LDAP/remote LDAP/remote Active Directory) goes here.    Use SSL:  If the authentication server requires a secured port (i.e.\n  636) then this option should be activated using the check-box.    Max Connections:  This option can be used to define the total number\n  of simultaneous connections allowed for reading local LDAP/remote Active\n  Directory/remote LDAP.    Server:  The unique name of the authentication server and port number\n  (i.e. auth.company.org:636) goes here.    Base DN:  Add base DNs in this field to allow the Gluu Server to\n  connect and search the LDAP server. Every directory tree should be added\n  separately using the  Add Base DN  option.    Primary Key:  This field contains the primary key to connect to the\n  authentication server (i.e. SAMAccountName/uid/mail etc.).    Local Primary Key:  This field contains the internal LDAP primary key\n  of the Gluu Server. Generally the key is either the  uid  or the  mail .    Enabled:  This check-box is used to enable the keys that are inserted\n  in their respective fields.    Change Bind Password:  This button assignes a password to\n  authenticate the  Authentication Server .    Test LDAP Connection:  This button checks whether the provided\n  information are sufficient to connect to the authentication server. The\n  scan is done in real time, and it is recommended to be used by the Gluu\n  Server administrators, only.",
            "title": "Manage Authentication"
        },
        {
            "location": "/oxtrust/configuration/#default-authentication-method",
            "text": "This allows the Gluu Server administrator to select both the default\nauthentication mode, and level for person authentication. Both modes are\nset to \"Default\" until additional authentication mechanisms are enabled\nvia  custom scripts .  Gluu Server uses oxAuth as the first step of authentication in all kind of SSO protocols ( OpenID Connect, SAML, CAS )     Authentication Method  Description      Authentication mode  This mode is used in case of users authenticating with Gluu Server only without entring into oxTrust    oxTrust authentication mode  This mode is used for authenticate the GUI admins or users with oxTrust GUI access",
            "title": "Default Authentication Method"
        },
        {
            "location": "/oxtrust/configuration/#manage-custom-scripts",
            "text": "The latest edition of the Gluu Server introduced a new Configuration\nsection called  Manage Custom Scripts . This is a single place where the\nserver administrator can manage and implement interception scripts to\ncustomize the behavior of the Gluu Server.   Please see the  Behaviour Customization page  for details.",
            "title": "Manage Custom Scripts"
        },
        {
            "location": "/oxtrust/configuration/#manage-registration",
            "text": "From the Manage Registration interface, the Gluu Server administrator\ncan customize the self-registration work-flow. Each option will be\ncovered individually as described below.",
            "title": "Manage Registration"
        },
        {
            "location": "/oxtrust/configuration/#disable-captcha-for-registration-form",
            "text": "Upon activating this feature, the default Captcha will be removed from\nthe registration form.",
            "title": "Disable Captcha for registration form"
        },
        {
            "location": "/oxtrust/configuration/#configure-registration-form-attributes",
            "text": "By default, there are a limited number of fields present in the\nself-registration form. If more attributes are needed they can be added\nin this section of Registration Management. Once you activate this\nfeature, just start typing the attribute name in the Attributes Filter\nand then add desired attributes to the right column. Finally, click\n\"Update\" to complete this step.",
            "title": "Configure Registration Form Attributes"
        },
        {
            "location": "/oxtrust/configuration/#attributes",
            "text": "An  Active  attribute list can be seen from the Configuration >\nAttributes section.   The Gluu Server has a large LDAP tree which includes all standard\nattributes. It is not necessary for all of them to be  Active . The\nactive LDAP trees can be sorted using the  Show only Active Attributes \nlink.   The Gluu Server administrator can make changes, such as changing the\nstatus to active/inactive, to an attribute after clicking on it.   Additional attributes can be added from the Gluu Server GUI, oxTrust, by\nclicking the  Add Attribute  button. Then, the following screen will\nappear:     Name:  This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.    SAML1 URI:  This field contains the SAML1 uri for the custom attribute.    SAML2 URI:  This field contains the SAML2 uri for the custom attribute.    Display Name:  This display name can be anything that is human readable.    Type:  The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:   Text  Numeric  Photo   Date    Edit Type:  This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).    View Type:  This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.    Privacy Level:  Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.    Multivalued:  Please select multivalue in this field if the attribute\n  contains more than one value.    SCIM Attributes:  If the attribute is a part of SCIM architecture select true.    Description:  This contains a few words to describe the attribute.    Status:  The status, when selected active, will release and publish\n  the attribute in IdP.",
            "title": "Attributes"
        },
        {
            "location": "/oxtrust/configuration/#cache-refresh",
            "text": "Cache Refresh  was built by Gluu to pull user information from a\nbackend customer Active Directory/LDAP Server. Cache refresh dynamically\nsynchronizes user information from the backend data source of the\ncustomer to the Gluu Server in order to maximize performance. This\nfeature is sensitive in nature and any incorrect action may result in\nloss of data within the Gluu Server. Before configuring Cache Refresh,\nyou should read the Cache Refresh overview (see Articles). For any\nquestions relating to Cache Refresh functionality, you can ask for\nassistance from  Gluu Support .  For a\nsuccessful Cache Refresh setup, you have to insert data in ALL FIELDS\nbelow.     Last Run:  The date and time of the latest cache refresh cycle\n  completion is shown here.    Updates at the Last Run:  This shows the total number of users who\n  have been updated in the last Cache Refresh cycle. For example an user\n  who has any of his attribute updated will show up here.    Problem at the Last Run:  This shows the number of users who have\n  been rejected by the Gluu Server during the update. If there are any\n  rejections, please contact Gluu Support for clarification and help.",
            "title": "Cache Refresh"
        },
        {
            "location": "/oxtrust/configuration/#customer-backend-key-and-attributes",
            "text": "Key Attribute:  This is the unique key attribute of backend Active\n  Directory/LDAP Server such as SAMAccountname for any Active Directory.    Object Class:  This contains the Object Classes of the backend Active\n  Directory/LDAP which has permission to talk to Gluu Server Cache Refresh\n  such as person, organizationalPerson, user etc.    Source Attribute:  This contains the list of attributes which will be\n  pulled and read by the Gluu Server.    Custom LDAP Filter:  If there is any custom search required, this\nfiltering mechanism can be used such as \"sn=*\" whereas the value of this\nfield ensures that every user must contain an attribute named SN.",
            "title": "Customer Backend Key and Attributes"
        },
        {
            "location": "/oxtrust/configuration/#source-backend-ldap-servers",
            "text": "This section allows the Gluu Server to connect to the backend Active\nDirectory/LDAP server of the organization.    Name:  Please input  source  as the value.    Use Anonymous Bind:  Some customers do now allow username/password\n  connections to their backend server. Enable this option if this applies\n  to your organization.    Bind DN:  This contains the username to connect to the backend\n  server. You need to use full DN here. As for example,\n   cn=gluu,dc=company,dc=org .    Use SSL:  Use this feature if the backend server allows SSL\n  connectivity.    Max Connections:  This value defines the maximum number of\n  connections that are allowed to read the backend Active Directory/LDAP\n  server. It is recommended to keep the value of 2 or 3.    Server:  This contains the backend Active Directory/LDAP server\n  hostname with port i.e. backend.organization.com:389. If organization\n  has a failover server, click  Add Server  and add more hostnames with\n  port.    Base DN:  This contains the location of the Active Directory/LDAP\n  tree from where the Gluu Server shall read the user information.    Enabled:  This check-box is used to save and push the changes. Do not\n  use this unless the server administrator has entered all the required\n  values.    Change Bind Password:  This can be used for a new password or to\n  change any existing password.    If your organization has a multiple Active Directory/LDAP server, click\non  Add source LDAP server  and add the additional server information.\nPlease remember that a  failover server  is not a new server.",
            "title": "Source Backend LDAP Servers"
        },
        {
            "location": "/oxtrust/configuration/#inum-ldap-server",
            "text": "This section of the application allows the server administrator to\nconnect to the internal LDAP of the Gluu Server. As Gluu Server\nadministrator, you do not need to insert anything here in this section\nas new Gluu Server versions automatically populates this for you (unless\nyou try to manually configure it anyway).    Refresh Method:  The Gluu Server allows the Server Administrator to\n  apply two types of Cache Refresh mechanism--(i) VDS Method and (ii) Copy\n  Method.    VDS Method:  Any organization with a database like  mysql  can use\n  the VDS method. This option can be enabled via the drop-down menu in\n  Refresh Method option.      Copy Method:  If the organization has any kind of Active\n  Directory/LDAP server, they are strongly recommended to use the  Copy\n  Method  from the drop-down menu.",
            "title": "Inum LDAP Server"
        },
        {
            "location": "/oxtrust/configuration/#attributes-mapping",
            "text": "When the Copy method is selected, a section for Attribute mapping will\nbe exposed. In this section, the Gluu Server Administrator can map any\nattribute from the backend Active Directory/LDAP to the LDAP cache of\nthe Gluu Server.   In the source attribute to destination attribute mapping field, you can\nenter the source attribute value on the left, and the destination\nattribute on the right. In other words, you can specify what the\nattribute is on the backend in the left field, and what it should be\nrendered as when it comes through the Gluu Server in the right field.  The Administrator can select any Cache Refresh Method according to the\nbackend Active Directory/LDAP server, but there are some essential\nvalues for both types of cache refresh method. The values are given\nbelow.    Pooling Interval (Minutes):  This is the interval value for running\n    the Cache Refresh mechanism in the Gluu Server. It is recommended to \n    be kept higher than 15 minutes.    Script File Name:  The Gluu Server cache refresh can accept any\n    kind of Jython Script which might help to calculate any custom/complex\n    attribute i.e. eduPersonScopedAffiliation. For more information please\n    contact Gluu Support.    Snapshot Folder:  Every cycle of of Gluu Server Cache Refresh cycle\n    saves an overall snapshot and problem-list record on a specified\n    location. This is where the Gluu Server Administrator can specify the\n    location. You can easily decide whether cache refresh synchronizes all\n    users or not. Generally the rejected users are enclosed in the\n    problem-list file. An overall report is displayed at the top of the\n    cache refresh page with headings  Updated at the last run  and\n     Problems at the last run .    Snapshot Count:  This defines the total number of snapshots that\n    are allowed to be saved in the hard drive of the VM. It is recommended\n    to be kept to 20 snapshots.    Latest Gluu Servers (including Community Edition) introduced two\nupgraded sections here.    Server IP Address:  Include the IP of your Gluu Server here. This\n    feature helps to run Cache Refresh mechanism perfectly in a clustered\n    environment.    Removed Script File Name location:  New version of the Gluu Server\n    allows the administrator to manage your custom scripts with more\n    interactive section under configuration named Manage Custom Scripts.    Update:  This button is used to push the changes in the Gluu\n    Server. Hit this button only when the values have been entered,\n    completely.    Update and Validate Script:  This button is used to test the\n    operation and integrity of any custom script such as a Jython Script.",
            "title": "Attributes Mapping"
        },
        {
            "location": "/oxtrust/configuration/#configure-log-viewer",
            "text": "The Gluu Server has the facility to read log files using the GUI. The\nlog file can be displayed from the Web UI with a few clicks of the\nmouse. This feature can be enabled from the configuration menu clicking Configuration --> Configure Log Viewer .   Gluu Server comes preloaded with four logs in this page as the screenshot portrays. The oxAuth, oxTrust, Cache Refresh and the console log is available by default.\nClicking on  Add log template  will bring up boxes where log path can be set to view the same from the GUI. The boxes on the\nleft contain the name/description of the log file, and the right boxes\ncontain the path of the log file such as  /opt/tomcat/logs/demo.log .",
            "title": "Configure Log Viewer"
        },
        {
            "location": "/oxtrust/configuration/#view-log-file",
            "text": "The log files configured in the earlier section can be viewed using the View log file  feature. This feature can be accessed through the\nconfiguration menu using  Configuration --> View Log File .   The  Display last lines count  field contains the lines that will be\ndisplayed in the Web GUI. If the field contains the value  400 , then\nthe Gluu Server will show the last 400 lines of the log in the GUI. The\nscreenshot below shows an according example.",
            "title": "View Log File"
        },
        {
            "location": "/oxtrust/configuration/#status",
            "text": "The Status section provides a high level overview of server metrics. The\nincluded values are straightforward and shouldn't require any further\nexplanation.",
            "title": "Status"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/",
            "text": "Configuration\n\n\noxTrust Configuration\n\n\noxtrust.properties\n\n\npersonObjectClassTypes\n\n\npersonObjectClassDisplayNames\n\n\ncontactObjectClassDisplayNames\n\n\ngluuSpAttributes\n\n\nclusteredInums\n\n\n\n\n\n\n\n\n\n\nConfiguration\n\n\noxTrust Configuration\n\n\nThis page explains the JSON Configuration under the Configuration Tab in the Configuration menu.\n\n\n\n\noxtrust.properties\n\n\n\n\nThe following fields are available for edit in the menu.\n\n\n\n\nidpBindDn:\n the admin user of the ldap server\n\n\nbaseDN:\n the base doaim name of oxtrust. The default is \no=gluu\n\n\norgIname:\n \n\n\norgSupportEmail:\n the support email address of the Gluu Server installation\n\n\n\n\n\n\n\n\napplianceInum:\n the \nINUM\n of the appliance\n\n\napplianceUrl:\n the \nURI\n of the appliance\n\n\nbaseEndpoint:\n \n\n\nschemaAddObjectClassWithAttributeTypesDefinition:\n the schema to add various attribute types\n\n\nschemaAddObjectClassWithoutAttributeTypesDefinition:\n the schema to add various attribute types\n\n\n\n\npersonObjectClassTypes\n\n\nThis class holds the relation between the person entry and it's relative object class.\n\n\n\n\n\n\nitem 1:\n inetOrgPerson\n\n\nitem 2:\n gluuPerson\n\n\n\n\n\n\n\n\npersonCustomObjectClass:\n\n\n\n\npersonObjectClassDisplayNames\n\n\nThis class holds the relation betwee the display name of the person and the relative object class.\n\n\n\n\n\n\nitem 1:\n inetOrgPerson\n\n\nitem 2:\n gluuPerson\n\n\n\n\n\n\n\n\nschemaAddAttributeDefenition:\n \n\n\n\n\ncontactObjectClassDisplayNames\n\n\nItems can be added under this class by clicking on the \n+ item\n button.\n\n\n\n\n\n\nphotoRepositoryRootDir:\n the path to the root directory of photographs\n\n\nphotoRepositoryThumbWidth:\n the thumb with of a photo\n\n\nphotoRepositoryThumbheight:\n sets the thumb height of a photo\n\n\nphotoRepositoryCountLevels:\n the count level per photo repository\n\n\nphotoRepositoryCountFoldersPerLevel:\n he number of folders per level\n\n\n\n\n\n\n\n\nauthMode:\n set this tag to \nbasic\n to use basic authentication or leave it blank to use oxAuth\n\n\nldifStore:\n the path to the \nLDIF\n store\n\n\n\n\n\n\n\n\nshibboleth2IdpRootDir:\n the root directory for the shibboleth plugin\n\n\nshibboleth2SpConfDir:\n the configuration directory for the shibboleth plugin\n\n\n\n\n\n\n\n\npokenApplicationSecret:\n\n\nupdateAplicanceStatus:\n  the update appliance state for the site. Use \ntrue\n to allow, and \nfalse\n to forbid (default value)\n\n\nsvnConfigurationStoreRoot:\n he root of the \nSVN\n configuration store\n\n\nsvnConfigurationStorePassword:\n the password of the \nSVN\n configuration store\n\n\n\n\n\n\n\n\nkeystorePath:\n the path to the keystore\n\n\nkeystorePassword:\n the password to the keystore\n\n\nallowPersonModification:\n enables or disables the allowance to modify a person entry. Use \ntrue\n to allow (default value), and  \nfalse\n otherwise\n\n\n\n\n\n\n\n\nidpUrl:\n the \nuri\n of the \nOpenID\n provider that is in use\n\n\nvelocityLog:\n the velocity log filename with path\n\n\n_spMetadataPath:_the path to the Gluu Server metadata\n\n\nlogoLocation:\n the directory name for the images and logos that are used\n\n\n\n\n\n\n\n\nidpSecurityKey:\n the security key of the \nOpenID\n provider\n\n\nidpSecurityKeyPassowrd:\n the security password of the \nOpenID\n provider\n\n\nidpSecurityCert:\n the security certificate of the machine\n\n\n\n\ngluuSpAttributes\n\n\nItems can be added here by clicking on the \n+ item\n button.\n\n\n\n\n\n\nconfigGeneration:\n this entry controls the automatic generation of the configuration files. Use \nenable\n to allow and \ndisable\n otherwise\n\n\nidpLdapProtocol:\n the protocol used by the [LDAP][ldap] server\n\n\nidpLdapServer:\n hostname of the [LDAP][ldap] server with port\n\n\n\n\n\n\n\n\norgInum:\n the \nINUM\n of the organization\n\n\nidpBindDn:\n the domain name of the \nOpenID\n provider\n\n\nidpBindPassowrd:\n the password for the \nOpenID\n provider\n\n\nidpUserFields:\n \n\n\ngluuSpCert:\n the certificate name and location of the Gluu Server\n\n\n\n\n\n\n\n\nmysqlUrl:\n the MySql connector as \nURI\n\n\nmysqlUser:\n the username for the MySql server\n\n\nmysqlPassword:\n passowrd for the MySql server\n\n\nshibboleth2FederationRootDir:\n the root directory for the \nShobboleth\n federation plugin\n\n\n\n\n\n\n\n\ncacheRefreshEnabled:\n the value of the cache refresh mechanism. Use \ntrue\n to enable and \nfalse\n otherwise\n\n\ncacheRefreshIntervalMinutes:\n the time in minutes counting down to next cache-refresh event\n\n\ncaCertsLocation:\n the keystore to use for downloaded \nSSL\n certificates\n\n\ncaCertsPassphrase:\n the password for the caCerts keystore\n\n\ntempCertDir:\n the temporary location for certificates while certificate update procedure\n\n\ncertDir:\n the locaiton of certificates used in configuration files\n\n\n\n\n\n\n\n\nservicesRestartTrigger:\n the location of the file which will restart the applicance server if deleted\n\n\npersistSVN:\n the state of persistence in \nSVN\n. Use \ntrue\n to enable or \nfalse\n otherwise\n\n\n\n\n\n\n\n\noxAuthAuthorizeUrl:\n the authorization \nURI\n for oxAuth\n\n\noxAuthTokenUrl:\n the token \nURI\n for oxAuth\n\n\noxAuthValidateTokenUrl:\n the \nURI\n for oxAuth token validation\n\n\noxAuthEndSessionUrl:\n the \nURI\n for oxAuth session termination\n\n\noxAuthLogoutUrl:\n the \nURI\n for logging out of oxAuth\n\n\noxAuthTokenValidationUrl:\n the \nURI\n for oxAuth token validation\n\n\n\n\n\n\n\n\noxAuthUserInfo:\n the \nURI\n for oxAuth user information\n\n\noxAuthSectorIdentifierUrl:\n the \nURI\n for oxAuth sector identifier\n\n\n_oxAuthClientId:_the identification number for oxAuth client\n\n\noxAuthClientPassowrd:\n the password for oxAuth client\n\n\noxAuthClientScope:\n the scope of the oxAuth client\n\n\nloginRedirectUrl:\n the redirect \nURI\n for oxAuth\n\n\nlogoutRedirectUrl:\n the \nURI\n for oxAuth \n\n\n\n\nclusteredInums\n\n\nItems can be added here by clicking on the \n+ item\n button.\n\n\n\n\n\n\nclientAssociationAttribute:\n the attribute which identifies the \nOpenID\n client\n\n\noxAuthIssuers:\n the \nURI\n of the issuer authorization server\n\n\nignoreValidation:\n the control to check/ignore token validation. Use \ntrue\n to validate or \nfalse\n otherwise\n\n\n\n\n\n\n\n\numaIssuer:\n the \nURI\n of the issuer authorization server\n\n\numaClientId:\n the identification of the \nUMA\n client\n\n\numaClientKeyId:\n \n\n\numaResourceId:\n\n\numaScope:\n the scopes available for this resource\n\n\n\n\n\n\n\n\nrecaptchaSiteKey:\n\n\nrecaptchaSecretKey:\n\n\ncssLocation:\n the path to the CSS files\n\n\njsLocation:\n the path to the JS files\n\n\nrepactchUrl:\n the type for the recaptcha \nURI\n attribute",
            "title": "OxTrust JSON Configuration"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#oxtrust-configuration",
            "text": "This page explains the JSON Configuration under the Configuration Tab in the Configuration menu.",
            "title": "oxTrust Configuration"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#oxtrustproperties",
            "text": "The following fields are available for edit in the menu.   idpBindDn:  the admin user of the ldap server  baseDN:  the base doaim name of oxtrust. The default is  o=gluu  orgIname:    orgSupportEmail:  the support email address of the Gluu Server installation     applianceInum:  the  INUM  of the appliance  applianceUrl:  the  URI  of the appliance  baseEndpoint:    schemaAddObjectClassWithAttributeTypesDefinition:  the schema to add various attribute types  schemaAddObjectClassWithoutAttributeTypesDefinition:  the schema to add various attribute types",
            "title": "oxtrust.properties"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#personobjectclasstypes",
            "text": "This class holds the relation between the person entry and it's relative object class.    item 1:  inetOrgPerson  item 2:  gluuPerson     personCustomObjectClass:",
            "title": "personObjectClassTypes"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#personobjectclassdisplaynames",
            "text": "This class holds the relation betwee the display name of the person and the relative object class.    item 1:  inetOrgPerson  item 2:  gluuPerson     schemaAddAttributeDefenition:",
            "title": "personObjectClassDisplayNames"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#contactobjectclassdisplaynames",
            "text": "Items can be added under this class by clicking on the  + item  button.    photoRepositoryRootDir:  the path to the root directory of photographs  photoRepositoryThumbWidth:  the thumb with of a photo  photoRepositoryThumbheight:  sets the thumb height of a photo  photoRepositoryCountLevels:  the count level per photo repository  photoRepositoryCountFoldersPerLevel:  he number of folders per level     authMode:  set this tag to  basic  to use basic authentication or leave it blank to use oxAuth  ldifStore:  the path to the  LDIF  store     shibboleth2IdpRootDir:  the root directory for the shibboleth plugin  shibboleth2SpConfDir:  the configuration directory for the shibboleth plugin     pokenApplicationSecret:  updateAplicanceStatus:   the update appliance state for the site. Use  true  to allow, and  false  to forbid (default value)  svnConfigurationStoreRoot:  he root of the  SVN  configuration store  svnConfigurationStorePassword:  the password of the  SVN  configuration store     keystorePath:  the path to the keystore  keystorePassword:  the password to the keystore  allowPersonModification:  enables or disables the allowance to modify a person entry. Use  true  to allow (default value), and   false  otherwise     idpUrl:  the  uri  of the  OpenID  provider that is in use  velocityLog:  the velocity log filename with path  _spMetadataPath:_the path to the Gluu Server metadata  logoLocation:  the directory name for the images and logos that are used     idpSecurityKey:  the security key of the  OpenID  provider  idpSecurityKeyPassowrd:  the security password of the  OpenID  provider  idpSecurityCert:  the security certificate of the machine",
            "title": "contactObjectClassDisplayNames"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#gluuspattributes",
            "text": "Items can be added here by clicking on the  + item  button.    configGeneration:  this entry controls the automatic generation of the configuration files. Use  enable  to allow and  disable  otherwise  idpLdapProtocol:  the protocol used by the [LDAP][ldap] server  idpLdapServer:  hostname of the [LDAP][ldap] server with port     orgInum:  the  INUM  of the organization  idpBindDn:  the domain name of the  OpenID  provider  idpBindPassowrd:  the password for the  OpenID  provider  idpUserFields:    gluuSpCert:  the certificate name and location of the Gluu Server     mysqlUrl:  the MySql connector as  URI  mysqlUser:  the username for the MySql server  mysqlPassword:  passowrd for the MySql server  shibboleth2FederationRootDir:  the root directory for the  Shobboleth  federation plugin     cacheRefreshEnabled:  the value of the cache refresh mechanism. Use  true  to enable and  false  otherwise  cacheRefreshIntervalMinutes:  the time in minutes counting down to next cache-refresh event  caCertsLocation:  the keystore to use for downloaded  SSL  certificates  caCertsPassphrase:  the password for the caCerts keystore  tempCertDir:  the temporary location for certificates while certificate update procedure  certDir:  the locaiton of certificates used in configuration files     servicesRestartTrigger:  the location of the file which will restart the applicance server if deleted  persistSVN:  the state of persistence in  SVN . Use  true  to enable or  false  otherwise     oxAuthAuthorizeUrl:  the authorization  URI  for oxAuth  oxAuthTokenUrl:  the token  URI  for oxAuth  oxAuthValidateTokenUrl:  the  URI  for oxAuth token validation  oxAuthEndSessionUrl:  the  URI  for oxAuth session termination  oxAuthLogoutUrl:  the  URI  for logging out of oxAuth  oxAuthTokenValidationUrl:  the  URI  for oxAuth token validation     oxAuthUserInfo:  the  URI  for oxAuth user information  oxAuthSectorIdentifierUrl:  the  URI  for oxAuth sector identifier  _oxAuthClientId:_the identification number for oxAuth client  oxAuthClientPassowrd:  the password for oxAuth client  oxAuthClientScope:  the scope of the oxAuth client  loginRedirectUrl:  the redirect  URI  for oxAuth  logoutRedirectUrl:  the  URI  for oxAuth",
            "title": "gluuSpAttributes"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#clusteredinums",
            "text": "Items can be added here by clicking on the  + item  button.    clientAssociationAttribute:  the attribute which identifies the  OpenID  client  oxAuthIssuers:  the  URI  of the issuer authorization server  ignoreValidation:  the control to check/ignore token validation. Use  true  to validate or  false  otherwise     umaIssuer:  the  URI  of the issuer authorization server  umaClientId:  the identification of the  UMA  client  umaClientKeyId:    umaResourceId:  umaScope:  the scopes available for this resource     recaptchaSiteKey:  recaptchaSecretKey:  cssLocation:  the path to the CSS files  jsLocation:  the path to the JS files  repactchUrl:  the type for the recaptcha  URI  attribute",
            "title": "clusteredInums"
        },
        {
            "location": "/gluu-defaults/oxauth-properties/",
            "text": "Configuration\n\n\noxAuth Configurations\n\n\noxAuth.properties\n\n\n\n\n\n\n\n\n\n\nConfiguration\n\n\noxAuth Configurations\n\n\nThis page explains the JSON Configuration under the Configuration Tab in the configuration Menu.\n\n\n\n\noxAuth.properties\n\n\n\n\nThe descriptions for the oxAuth JSON configurations are given under the fields.",
            "title": "OxAuth JSON Configuration"
        },
        {
            "location": "/gluu-defaults/oxauth-properties/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/gluu-defaults/oxauth-properties/#oxauth-configurations",
            "text": "This page explains the JSON Configuration under the Configuration Tab in the configuration Menu.",
            "title": "oxAuth Configurations"
        },
        {
            "location": "/gluu-defaults/oxauth-properties/#oxauthproperties",
            "text": "The descriptions for the oxAuth JSON configurations are given under the fields.",
            "title": "oxAuth.properties"
        },
        {
            "location": "/integrate/outbound-saml/",
            "text": "Table of Contents\n  \n\n\n\n\nOutbound SAML\n\n\nMetadata of website:\n\n\nRequired attribute of website:\n\n\nSSO testing endpoint of website:\n\n\n\n\n\n\nConfiguring Outbound SAML SSO\n\n\nLDAP Attributes\n\n\nSAML Trust Relationship\n\n\nHow to create Trust Relationship\n\n\n\n\n\n\n\n\n\n\n\n\nOutbound SAML\n\n\nOutbound SAML setup from Gluu Server is pretty easy using the Gluu\nServer's oxTrust GUI. The following pieces of information are needed\nfrom the target website or application:\n\n\n\n\nMetadata of website\n\n\nRequired attribute of website\n\n\nSSO testing endpoint of website\n\n\n\n\nThe three points above are described briefly below.\n\n\nMetadata of website:\n\n\nMetadata is a XML file which has configuration data used to provision any\nwebsite (SP) or IDP (Gluu Server) to communicate with each other. It is\ninterchangeable between the IDP and the SP.\n\n\nWebsites (SP) can provide metadata via URL or as a separate file. If the\nSP provides an separate XML file, the Gluu Server can check the\nintegrity of that metadata with its own mechanism. This mechanism can be\nshown and tested from Gluu Server oxTrust GUI.\n\n\nRequired attribute of website:\n\n\nEvery organization has their own policy to release/share attributes with\nany IDP or SP. The Gluu Server supports, and can be configured for\nstandard or custom attributes. This can be done from the Gluu Server\noxTrust GUI.\n\n\nSSO testing endpoint of website:\n\n\nEvery website (SP) should have both a staging and a production uri\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.\n\n\nConfiguring Outbound SAML SSO\n\n\nThe Gluu Server's SAML capabilities are tightly integrated with\n\nShibboleth\n.\n\n\nSAML Trust Relationship\n\n\nA Trust Relationship is the mechanism to create single sign-on to any\nSAML Service Provider (SP) from the Gluu Server SAML IDP. Trust\nRelationships can be created from within the GUI.\n\n\nHow to create Trust Relationship\n\n\nIn order to create a trust relationship with any SP:\n\n\n\n\nGo to SAML \u2192 Trust Relationships\n\n\nClick on \u201cAdd Relationship\u201d\n\n\n\nA new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.\n\n\n\nDisplay Name\n: Name of the Trust Relationship (it should be unique for every trust relationship)\n\n\nDescription\n: Little description. Purpose and SSO link can be added here.\n\n\n\n\nMetadata Type\n: Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server\n\n\n\n\nFile\n: If SP has uploadable metadata in XML format, this option works best.\n\n\nURI\n: If the metadata of SP has uri link and accessible from internet, Gluu Server Administrator need to use this option. \n\n\n\n\nGenerate\n: Using Gluu Server to generate configuration files for SP is another big option when the SP is inhouse application or \u201cShibboleth SP\u201d is installed or going to be installed in target application site (SP).  \nHow to install Shibboleth SP\n will help user to configure and install Shibboleth SP on their own area. Please note few things when you are going to use \nGenerate\n method for your SP. \n\n\n\n\nURL\n : This is the \nhostname of SP\n\n\nPublic certificate\n : You \nmust\n have to provide the certificate which is Base64 encoded ASCII file and contain \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\". This certificate \ncan not be password protected\n. \n\n\nAfter creating the Trust Relationship, download the generated configuration files from \nDownload Shibboleth2 configuration files\n link and place these configuration files inside your SP configuration. \n\n\n\n\n\n\n\n\nFederation\n: If target application ( SP ) is affiliated with any Federation server (i.e: InCommon, NJEdge etc. ), this option of \u201cMetadata Type\u201d is required. \nSelect \u201cFederation\u201d in Metadata Type and another drop down menu called \u201cSelect Federation\u201d will appear. From this drop menu select desired Federation. \nIn order to create this documentation we took \u201cInCommon\u201d Federation as an example.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfter selecting the \u201cFederation Name\u201d, a new link named \u201cClick to select\nentity id\u201d will appear. From this link Gluu Server Administrator can\nselect all SP\u2019s entityIDs which are InCommon affiliated. Click on this\nlink and another new SP entityID discovery page will appear like below\nimage.\n\n\n\n\nGluu Server Administrator can grab any SP\u2019s entityID from \u201cFilter\u201d box.\nAs for example, Gluu Server Administrator is looking for Educause\nentityID.\n\n\n\n\n\n\n\n\nPublic certificate: Upload the public certificate for this SP server.\n  Please note that: public certificate\u2019s CN (common name) MUST maintain\n  the hostname of the SP server. If the SP has no certificate then keep\n  this option blank and the IdP will generate a self signed certificate.\n\n\n\n\n\n\nReleased: Release required attributes. Available attributes can be\n  grabbed from upper left corner.\n\n\n\n\n\n\nMore configuration: If the SP requires custom relying party and/or \n  custom MetadataFilter configuration, that can be achieved using the\n  following options:\n\n\n\n\nConfigure MetadataFilters: Click on this option and Gluu Server\n  will allow you to configure MetadataFilters inside the GUI.\n\n\nConfigure specific Relying Party: If the server admin \u201cchecks\u201d\n  this option a new link will appear which allows the server \n  administrator to modify various relying party configurations like\n  SAML2SSO, SAML2AttributeQuery, ShibbolethSSO etc.\n\n\n\n\n\n\n\n\n\n\nAfter adding a new Trust Relationship, the server administrator will\nobserve a confirmation page like the one below. Please note that for\ntesting purposes we did not provide any certificates. The IdP created\nboth the key and certificate by itself. The image below shows a sample\nTrust Relationship after successful creation.\n\n\nGluu Server administrator will be able to 'search' any trust relationship from 'Trust Relationship' search box. Searching syntax can be anything affiliated with specific Trust. It's also possible to see all Trusts by just hitting 'Search' button by keeping search box blank.",
            "title": "SAML"
        },
        {
            "location": "/integrate/outbound-saml/#outbound-saml",
            "text": "Outbound SAML setup from Gluu Server is pretty easy using the Gluu\nServer's oxTrust GUI. The following pieces of information are needed\nfrom the target website or application:   Metadata of website  Required attribute of website  SSO testing endpoint of website   The three points above are described briefly below.",
            "title": "Outbound SAML"
        },
        {
            "location": "/integrate/outbound-saml/#metadata-of-website",
            "text": "Metadata is a XML file which has configuration data used to provision any\nwebsite (SP) or IDP (Gluu Server) to communicate with each other. It is\ninterchangeable between the IDP and the SP.  Websites (SP) can provide metadata via URL or as a separate file. If the\nSP provides an separate XML file, the Gluu Server can check the\nintegrity of that metadata with its own mechanism. This mechanism can be\nshown and tested from Gluu Server oxTrust GUI.",
            "title": "Metadata of website:"
        },
        {
            "location": "/integrate/outbound-saml/#required-attribute-of-website",
            "text": "Every organization has their own policy to release/share attributes with\nany IDP or SP. The Gluu Server supports, and can be configured for\nstandard or custom attributes. This can be done from the Gluu Server\noxTrust GUI.",
            "title": "Required attribute of website:"
        },
        {
            "location": "/integrate/outbound-saml/#sso-testing-endpoint-of-website",
            "text": "Every website (SP) should have both a staging and a production uri\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.",
            "title": "SSO testing endpoint of website:"
        },
        {
            "location": "/integrate/outbound-saml/#configuring-outbound-saml-sso",
            "text": "The Gluu Server's SAML capabilities are tightly integrated with Shibboleth .",
            "title": "Configuring Outbound SAML SSO"
        },
        {
            "location": "/integrate/outbound-saml/#saml-trust-relationship",
            "text": "A Trust Relationship is the mechanism to create single sign-on to any\nSAML Service Provider (SP) from the Gluu Server SAML IDP. Trust\nRelationships can be created from within the GUI.  How to create Trust Relationship  In order to create a trust relationship with any SP:   Go to SAML \u2192 Trust Relationships  Click on \u201cAdd Relationship\u201d  A new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.  Display Name : Name of the Trust Relationship (it should be unique for every trust relationship)  Description : Little description. Purpose and SSO link can be added here.   Metadata Type : Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server   File : If SP has uploadable metadata in XML format, this option works best.  URI : If the metadata of SP has uri link and accessible from internet, Gluu Server Administrator need to use this option.    Generate : Using Gluu Server to generate configuration files for SP is another big option when the SP is inhouse application or \u201cShibboleth SP\u201d is installed or going to be installed in target application site (SP).   How to install Shibboleth SP  will help user to configure and install Shibboleth SP on their own area. Please note few things when you are going to use  Generate  method for your SP.    URL  : This is the  hostname of SP  Public certificate  : You  must  have to provide the certificate which is Base64 encoded ASCII file and contain \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\". This certificate  can not be password protected .   After creating the Trust Relationship, download the generated configuration files from  Download Shibboleth2 configuration files  link and place these configuration files inside your SP configuration.      Federation : If target application ( SP ) is affiliated with any Federation server (i.e: InCommon, NJEdge etc. ), this option of \u201cMetadata Type\u201d is required. \nSelect \u201cFederation\u201d in Metadata Type and another drop down menu called \u201cSelect Federation\u201d will appear. From this drop menu select desired Federation. \nIn order to create this documentation we took \u201cInCommon\u201d Federation as an example.        After selecting the \u201cFederation Name\u201d, a new link named \u201cClick to select\nentity id\u201d will appear. From this link Gluu Server Administrator can\nselect all SP\u2019s entityIDs which are InCommon affiliated. Click on this\nlink and another new SP entityID discovery page will appear like below\nimage.   Gluu Server Administrator can grab any SP\u2019s entityID from \u201cFilter\u201d box.\nAs for example, Gluu Server Administrator is looking for Educause\nentityID.     Public certificate: Upload the public certificate for this SP server.\n  Please note that: public certificate\u2019s CN (common name) MUST maintain\n  the hostname of the SP server. If the SP has no certificate then keep\n  this option blank and the IdP will generate a self signed certificate.    Released: Release required attributes. Available attributes can be\n  grabbed from upper left corner.    More configuration: If the SP requires custom relying party and/or \n  custom MetadataFilter configuration, that can be achieved using the\n  following options:   Configure MetadataFilters: Click on this option and Gluu Server\n  will allow you to configure MetadataFilters inside the GUI.  Configure specific Relying Party: If the server admin \u201cchecks\u201d\n  this option a new link will appear which allows the server \n  administrator to modify various relying party configurations like\n  SAML2SSO, SAML2AttributeQuery, ShibbolethSSO etc.      After adding a new Trust Relationship, the server administrator will\nobserve a confirmation page like the one below. Please note that for\ntesting purposes we did not provide any certificates. The IdP created\nboth the key and certificate by itself. The image below shows a sample\nTrust Relationship after successful creation.  Gluu Server administrator will be able to 'search' any trust relationship from 'Trust Relationship' search box. Searching syntax can be anything affiliated with specific Trust. It's also possible to see all Trusts by just hitting 'Search' button by keeping search box blank.",
            "title": "SAML Trust Relationship"
        },
        {
            "location": "/integrate/openid-connect/",
            "text": "Table of Contents\n\n\n\n\n\n\nTable of Contents\n\n\nOverview\n\n\nJargon (taxonomy)\n\n\nDiscovery\n\n\nScopes\n\n\nClient Registration\n\n\nMulti-Factor Authentication for Clients\n\n\nAlgorithm\n\n\nCustom Client Registration\n\n\nSearch clients\n\n\nView client\n\n\n\n\n\n\nSession management\n\n\nTesting with oxAuth RP\n\n\nOpenID Connect Discovery\n\n\nDynamic Client Registration\n\n\nClient Read\n\n\n\n\n\n\nAuthorization Endpoint\n\n\nRequest Authorization and receive the Authorization Code and ID Token\n\n\nRequest Access Token using the Authorization Code\n\n\nRequest new Access Token using the Refresh Token\n\n\n\n\n\n\nUserInfo Endpoint\n\n\nOpenID Connect Session Management\n\n\nEnd Session Endpoint\n\n\nCheck Session iFrame\n\n\n\n\n\n\n\n\n\n\n\n\n\n\noAuth 2 Grants\n\n\n\n\n\n\nOverview\n\n\nOpenID Connect\n (\"Connect\") is a standard\nprofile of OAuth2 which defines a protocol to enable a website or mobile\napplication to send a person to a domain for authentication and required\nattributes (e.g. email address, first name, last name, etc.). OpenID Connect\nalso provides some of the plumbing around authentication to automate how\nthis happens. If a person is visiting a website for the first time, the\nprocess that OpenID Connect defines is 100% bootstrapable by the\nwebsite. This is really critical for Internet scalability. To visit\nsomeone's website, or to send someone an email, you do not need to get\nthe system administrators involved. Connect provides the same type of\nscalable infrastructure for authentication and authorization, and promises to define a base level domain\nidentification.\n\n\nJargon (taxonomy)\n\n\nIf you are familiar with SAML, there are many parallels in OpenID\nConnect, but the jargon (or \"taxonomy\") is different. For example,\ninstead of attributes, we have \"user claims\". Instead of Service\nProvider (SP), we have \"client\". Instead of Identity Provider (IdP), it\nis an OpenID Provider (OP).\n\n\nDiscovery\n\n\nThe first thing you want to know about any OAuth2 API is where are the\nendpoints (i.e. what are the uris where you call the APIs).\nOpenID Connect provides a very simple mechanism to accomplish this: \n\nOpenID Connect Discovery\n.\n\n\nIn order for an OpenID Connect Relying Party to utilize OpenID Connect\nservices for an End-User, the RP needs to know where the OpenID Provider is.\nOpenID Connect uses WebFinger \nWebFinger\n\nto locate the OpenID Provider for an End-User.\n\n\nOnce the OpenID Provider has been identified, the configuration information\nfor the OP is retrieved from a well-known location as a JSON document,\nincluding its OAuth 2.0 endpoint locations.\n\n\nIf you want to try a discovery request, you can make the following\nWebFinger request to discover the Issuer location:\n\n\nGET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}\n\n\n\n\nUsing the Issuer location discovered, the OpenID Provider's configuration information can be retrieved.\n\n\nThe RP makes the following request to the Issuer https://\n/.well-known/openid-configuration to obtain its\nConfiguration information:\n\n\nGET /.well-known/openid-configuration HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"issuer\": \"https://idp.gluu.org\",\n    \"authorization_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n    \"token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/token\",\n    \"userinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/userinfo\",\n    \"clientinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/clientinfo\",\n    \"check_session_iframe\": \"https://idp.gluu.org/oxauth/opiframe\",\n    \"end_session_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/end_session\",\n    \"jwks_uri\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n    \"registration_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/register\",\n    \"validate_token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/validate\",\n    \"federation_metadata_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federationmetadata\",\n    \"federation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federation\",\n    \"id_generation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/id\",\n    \"introspection_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/introspection\",\n    \"scopes_supported\": [\n        \"clientinfo\",\n        \"email\",\n        \"openid\",\n        \"profile\",\n        \"address\",\n        \"uma_protection\",\n        \"user_name\",\n        \"uma_authorization\",\n        \"mobile_phone\",\n        \"phone\"\n    ],\n    \"response_types_supported\": [\n        \"code\",\n        \"code id_token\",\n        \"token\",\n        \"token id_token\",\n        \"code token\",\n        \"code token id_token\",\n        \"id_token\"\n    ],\n    \"grant_types_supported\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n    ],\n    \"acr_values_supported\": [\"\"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"],\n    \"auth_level_mapping\": {\"-1\": [[\"internal\"]]},\n    \"subject_types_supported\": [\n        \"public\",\n        \"pairwise\"\n    ],\n    \"userinfo_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"userinfo_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"userinfo_encryption_enc_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"id_token_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"request_object_signing_alg_values_supported\": [\n        \"none\",\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"request_object_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"request_object_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"token_endpoint_auth_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"display_values_supported\": [\n        \"page\",\n        \"popup\"\n    ],\n    \"claim_types_supported\": [\"normal\"],\n    \"claims_supported\": [\n        \"birthdate\",\n        \"country\",\n        \"name\",\n        \"email\",\n        \"email_verified\",\n        \"given_name\",\n        \"gender\",\n        \"inum\",\n        \"family_name\",\n        \"updated_at\",\n        \"locale\",\n        \"middle_name\",\n        \"nickname\",\n        \"phone_number_verified\",\n        \"picture\",\n        \"preferred_username\",\n        \"profile\",\n        \"zoneinfo\",\n        \"user_name\",\n        \"website\"\n    ],\n    \"service_documentation\": \"http://gluu.org/docs\",\n    \"claims_locales_supported\": [\"en\"],\n    \"ui_locales_supported\": [\n        \"en\", \"es\"\n    ],\n    \"scope_to_claims_mapping\": [\n        {\"clientinfo\": [\n            \"name\",\n            \"inum\"\n        ]},\n        {\"email\": [\n            \"email_verified\",\n            \"email\"\n        ]},\n        {\"openid\": [\"inum\"]},\n        {\"profile\": [\n            \"name\",\n            \"family_name\",\n            \"given_name\",\n            \"middle_name\",\n            \"nickname\",\n            \"preferred_username\",\n            \"profile\",\n            \"picture\",\n            \"website\",\n            \"gender\",\n            \"birthdate\",\n            \"zoneinfo\",\n            \"locale\",\n            \"updated_at\"\n        ]},\n        {\"address\": [\n            \"formatted\",\n            \"postal_code\",\n            \"street_address\",\n            \"locality\",\n            \"country\",\n            \"region\"\n        ]},\n        {\"uma_protection\": []},\n        {\"user_name\": [\"user_name\"]},\n        {\"uma_authorization\": []},\n        {\"mobile_phone\": [\"phone_mobile_number\"]},\n        {\"phone\": [\n            \"phone_number_verified\",\n            \"phone_number\"\n        ]}\n    ],\n    \"claims_parameter_supported\": true,\n    \"request_parameter_supported\": true,\n    \"request_uri_parameter_supported\": true,\n    \"require_request_uri_registration\": false,\n    \"op_policy_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:policy\",\n    \"op_tos_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:tos\",\n    \"http_logout_supported\": \"true\",\n    \"logout_session_supported\": \"true\"\n}\n\n\n\n\nThe following is an example using the \noxAuth-Client\n lib:\n\n\nString resource = \"acct:mike@idp.gluu.org\";\n\nOpenIdConnectDiscoveryClient openIdConnectDiscoveryClient = new OpenIdConnectDiscoveryClient(resource);\nOpenIdConnectDiscoveryResponse openIdConnectDiscoveryResponse = openIdConnectDiscoveryClient.exec();\n\n.....\n\nOpenIdConfigurationClient client = new OpenIdConfigurationClient(configurationEndpoint);\nOpenIdConfigurationResponse response = client.execOpenIdConfiguration();\n\n\n\n\nSee \norg.xdi.oxauth.ws.rs.ConfigurationRestWebServiceHttpTest\n\n\nScopes\n\n\nIn SAML, the IdP releases attributes to the SP. OpenID Connect provides\nsimilar functionality, with more flexibility in case the person needs to\nself-approve the release of information from the IdP to the website (or\nmobile application). In OAuth2, scopes can be used for various purposes.\nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we\ncould have a scope called \"address\" that includes the street, city,\nstate, and country user claims. By default the Gluu Server defines six\nscopes.\n\n\n\n\nThe Gluu Server administrator can easily add more scopes in the GUI.\nClick \nAdd Scope\n and you will be presented with the following screen:\n\n\n\n\nYou will have the ability to provide a Display Name, Description,\nwhether or not the scope is provided by default, and the claims that are\nincluded in the scope.\n\n\nDefault Scope needs some further explanation. When a client uses dynamic\nclient registration, the OpenID Connect specification says that the\n\nopenid\n scope should always be released, which contains an identifier\nfor that person, normally the username. If you want to release another\nscope automatically, set the Default Scope to \ntrue\n for that scope. You\ncan always explicitly release a scope to a certain client later on, but\nthis will require some manual intervention by the domain administrator.\n\n\nTo add more claims, simply click \"Add Claim\" and you will be presented\nwith the following screen:\n\n\n\n\nClient Registration\n\n\nA client in OAuth2 could be either a website or mobile application.\nOpenID Connect has an API for \nDynamic Client\nRegistration\n\nwhich efficiently pushes the task to the application developer. If you\ndo not want to write an application to register your client, there are a\nfew web pages around that can do the job for you. Gluu publishes the\n\noxAuth-RP\n and there is also another in \nPHP\nRP\n.\n\n\nIf you cannot get the developer to help themselves, or if your domain\ndoesn't want to allow dynamic client registration, you can use the\noxTrust admin GUI to manually add trusted clients.\n\n\nAvailable \nClients\n can be seen by hitting the \nSearch\n button\nleaving the search box empty.\n\n\n\n\nA new client can be added by clicking the \nAdd Client\n link.\n\n\n\n\nClicking on the \nAdd Client\n link allows the Gluu Server administrator\nto add a new client. The search box can be used to look up previously\nadded clients as well. The screenshot below shows the interface to add a\nnew client.\n\n\n\n\n\n\n\n\nClient Name:\n This contains the recognizable and unique display name\n  of the client. The name of the Client to be presented to the End-User.\n\n\n\n\n\n\nClient Secret:\n This is the Data Encryption Standard scheme used by\n  Confidential Clients to authenticate to the token endpoint. The value for\n  the secret can be inserted manually, but it is highly recommended to use\n  the Dynamic Client Registration Endpoint. The Gluu oxAuth provides a\n  random, generated Client Secret in the Dynamic Client Registration\n  procedure.\n\n\n\n\n\n\nApplication Type:\n There are two types of applications, Web and\n  Native. The default, if omitted, is web when using the Dynamic\n  Client Registration Endpoint. The different configuration for the\n   different application types are given below.\n\n\n\n\n\n\nWeb:\n The Dynamic Client Registration is the default for web. In\nthis type the redirect_uri for implicit grant type must be a real\nhostname with HTTPS. This type is not approved any localhost or HTTP.\nThe web application uses the authorization code flow for clients which\ncan maintain a client secret between the uris and the authorization\nserver.\n\n\n\n\n\n\nNative:\n Custom uri for Native type application have to follow HTTP\nwith localhost. This is suitable for a mobile app which cannot maintain\nthe client secret between itself and the authorization server.\n\n\n\n\n\n\n\n\n\n\nPre Authorization:\n The Gluu Server disables this option by default,\n  but it is possible to allow pre-authorized Client Applications according to the\n  Organization Policy by the Gluu Server administrator.\n\n\n\n\n\n\nLogo URI:\n The URL of the logo for the client application.\n  If present, the server will display this image to the End-User during approval.\n\n\n\n\n\n\nClient URI:\n The URL of the home page of the client.\n\n\n\n\n\n\nPolicy URI:\n URL that the Relying Party Client provides to the End-User to read about\n  the how the profile data will be used. The value of this field must point\n  to a valid web page. The OpenID Provider will display this URL to the End-User if it is given.\n\n\n\n\n\n\nTerms of Service URI:\n URL that the Relying Party Client provides to the End-User to\n  read about the Relying Party's terms of service. The value of this field must point to\n  a valid web page. The OpenID Provider will display this URL to the End-User if it is given.\n\n\n\n\n\n\nJWKS URI:\n The URL for the Client's JSON Web Key Set document.\n  If the Client signs requests to the Server, it contains the signing key(s) the Server uses to\n  validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s),\n  which are used by the Server to encrypt responses to the Client.\n  When both signing and encryption keys are made available, a use (Key Use) parameter value is\n  required for all keys in the referenced JWK Set to indicate each key's intended usage.\n  Although some algorithms allow the same key to be used for both signatures and encryption,\n  doing so is NOT RECOMMENDED, as it is less secure.\n\n\n\n\n\n\nJWKS:\n Client's JSON Web Key Set document, passed by value.\n  The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the\n  JWK Set is passed by value, rather than by reference.\n  This parameter is intended only to be used by Clients that, for some reason, are unable to use\n  the jwks_uri parameter, for instance, by native applications that might not have a location to\n  host the contents of the JWK Set.\n  If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it\n  does not enable key rotation (which jwks_uri does).\n  The jwks_uri and jwks parameters MUST NOT be used together.\n\n\n\n\n\n\nSector Identifier URI:\n URL using the https scheme to be used in calculating Pseudonymous\n  Identifiers by the OP.\n  The URL references a file with a single JSON array of redirect_uri values.\n  Providers that use pairwise sub (subject) values should utilize the sector_identifier_uri\n  value provided in the Subject Identifier calculation for pairwise identifiers.\n\n\n\n\n\n\nSubject Type:\n The subject type requested for responses to this Client.\n  The subject_types_supported Discovery parameter contains a list of the\n  supported subject_type values for this server. Valid types include pairwise and public.\n\n\n\n\n\n\nJWS alg Algorithm for signing the ID Token:\n JWS alg algorithm for signing the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE alg Algorithm for encrypting the ID Token:\n JWE alg algorithm for encrypting the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting the ID Token:\n JWE enc algorithm for encrypting the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for signing the UserInfo Responses:\n JWS alg algorithm for signing UserInfo Responses.\n  If this is specified, the response will be JWT serialized, and signed using JWS.\n  The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object\n  using the application/json content-type.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for encrypting the UserInfo Responses:\n  JWE alg algorithm for encrypting UserInfo Responses.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting the UserInfo Responses:\n JWE enc algorithm for encrypting UserInfo Responses. \n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for signing Request Objects:\n JWS alg algorithm used for signing Request Objects sent to the OP.\n  This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is\n  passed by reference (using the request_uri parameter).\n  The default, if omitted, is that any algorithm supported by the OP and the RP can be used.\n  The value none can be used.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE alg Algorithm for encrypting Request Objects:\n JWE alg algorithm the RP is declaring that it use for\n  encrypting Request Objects sent to the OP.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting Request Objects:\n JWE enc algorithm the RP is declaring that it may use for\n  encrypting Request Objects sent to the OP.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nAuthentication method for the Token Endpoint:\n Requested Client Authentication method for the Token Endpoint.\n  The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none.\n  If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.\n\n\n\n\n\n\nJWS alg Algorithm for Authentication method to Token Endpoint:\n JWS alg algorithm used for signing the JWT\n  used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt\n  authentication methods. The value none cannot be used.\n  The default, if omitted, is that any algorithm supported by the OP and the RP can be used.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nDefault Maximum Authentication Age:\n Specifies that the End-User must be actively authenticated if the End-User was\n  authenticated longer ago than the specified number of seconds.\n  If omitted, no default Maximum Authentication Age is specified.\n\n\n\n\n\n\nRequire Auth Time:\n Specifies whether the auth_time Claim in the ID Token is required.\n  If omitted, the default value is false.\n\n\n\n\n\n\nPersist Client Authorizations*:\n Specifies whether to persist user authorizations.\n\n\n\n\n\n\nInitiate Login URI:\n URI using the https scheme that a third party can use to initiate a login by the RP.\n\n\n\n\n\n\nRequest URIs:\n Array of request_uri values that are pre-registered by the RP for use at the OP.\n   The Server cache the contents of the files referenced by these URIs and not retrieve them at\n   the time they are used in a request.\n   If the contents of the request file could ever change, these URI values should include the base64url\n   encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment.\n   If the fragment value used for a URI changes, that signals the server that its cached value for that URI\n   with the old fragment value is no longer valid. \n\n\n\n\n\n\nLogout URIs:\n Redirect logout URLs supplied by the RP to which it can request that the End-User's\n  User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.\n\n\n\n\n\n\nLogout Session Required*:\n Specifies whether the RP requires that a sid (session ID) query parameter\n  be included to identify the RP session at the OP when the logout_uri is used.\n  If omitted, the default value is false.\n\n\n\n\n\n\nClient Secret Expires:\n Time at which the client will expire or 0 if it will not expire.\n\n\n\n\n\n\nButtons at the bottom\n\n\n\n\n\n\nAdd Login URI:\n This option can be used to add the login URL.\n\n\n\n\n\n\n\nAdd Scopes:\n This option can be used to add the required scopes in the Gluu Server.\n\n\n\n\n\n\n\nThe available scopes can be listed by hitting the \nSearch\n button, and\n  keeping the search phrase blank. Furthermore, from this the Gluu Server\n  administrator can select the required scopes.\n\n\n\n\n\n\nAdd Response Type:\n There are three types of responses in the Gluu\n  Server and they are Code, Token and ID Token. The Gluu Server\n  Administrator can select all of them for testing purposes.\n\n\n\n\n\n\n\nAdd Grant Type:\n There are 3 grant type available in this option \nauthorization_code, implicit, refresh_token\n\n\n\n\n\n\n\n\nAdd Contact:\n Use this option to add the email address for the Client contact\n\n\n\n\n\n\nAdd Default ACR value:\n Use this option to define the default ACR Value. This value is used to include multi-factor authentication in registered clients.\n\n\n\n\n\n\nAdd Request URI:\n Use this option to add the Request URI\n\n\n\n\n\n\nMulti-Factor Authentication for Clients\n\n\nThe \nacr_values\n parameter is used to specify the use of specific multi-factor authentication for each client. If a scenario is presented where different clients use different authentication mechanism, then the \nacr_value\n parameter is used to specify the choice. Out of the box, GLuu Server supports U2F, DUO, Basic, oxPush/SuperGluu, Google+ and internal LDAP authentication. While registering new clients, put the mode in \nAdd Default ACR value\n to chosen mechanism. The authentication mechanism must be enabled in the \nCustom Scripts\n section as well.\n\n\nSupported ACR Values in Client Registration: \"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"\n\n\nThe values appear in order of preference and the successful authentication is sent as the acr claim value in the issued ID Token. The table below explains the acr values. Please click on the description to access the specific how-to guide for the ACR declared authentication.\n\n\n\n\n\n\n\n\nACR Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nu2f\n\n\nFIDO U2F Device\n\n\n\n\n\n\nduo\n\n\nDuo soft-token authentication\n\n\n\n\n\n\nbasic\n\n\nUsername/Password authentication from LDAP Server\n\n\n\n\n\n\noxpush2\n\n\nMulti-factor authentication\n\n\n\n\n\n\ngplus\n\n\nGoogle+ authentication\n\n\n\n\n\n\ninternal\n\n\nUse Gluu Server LDAP to authenticate users\n\n\n\n\n\n\n\n\nAlgorithm\n\n\noxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.\n\n\nNote:\n It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.\n\n\nAvailable Signature Algorithms:\n none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.\n\n\nEncryption, Key Encryption Algorithms:\n RSA1_5, RSA-OAEP, A128KW, A256KW.\n\n\nBlock Encryption Algorithms:\n A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,\n\n\nCustom Client Registration\n\n\nUsing interception scripts you can customize client registration\nbehavior. For example, by default oxAuth allows new clients to access to\ndefault scopes only. With a custom client registration interception\nscript it is possible to allow access to more scopes. For instance, we\ncan use \nredirect_uri\n to determine if we need to allow access to\nadditional scopes or not.\n\n\nTo access the interface for custom scripts in oxTrust, navigate to\nConfiguration --> Custom Scripts --> Custom Client Registration.\n\n\nTake a look at our \nexample client registration\nscript\n\nfor further reference.\n\n\nSearch clients\n\n\n\n\nView client\n\n\n\n\nSession management\n\n\nLogout is a catch-22. There is no perfect answer to logout that\nsatisfies all the requirements of all the domains on the Internet. For\nexample, large OpenID Providers, like Google, need a totally stateless\nimplementation--Google cannot track sessions on the server side for\nevery browser on the Internet. But in smaller domains, server side\nlogout functionality can be a convenient solution to cleaning up\nresources.\n\n\nThe OpenID Connect \nSession\nManagement\n is\nstill marked as draft, and new mechanisms for logout are in the works.\nThe current specification requires JavaScript to detect that the session\nhas been ended in the browser. It works... unless the tab with the\nJavaScript happens to be closed when the logout event happens on another\ntab. Also, inserting JavaScript into every page is not feasible for some\napplications. A new proposal is under discussion where the OpenID\nConnect logout API would return \nIMG\n HTML tags to the browser with the\nlogout callbacks of the clients. This way, the browser could call the\nlogout uris (not the server).\n\n\nThe Gluu Server is very flexible, and supports both server side session\nmanagement, and stateless session management. For server side business\nlogout, the domain admin can use Custom Logout scripts. This can be\nuseful to clean up sessions in a legacy SSO system (i.e. SiteMinder), or\nperhaps in a portal.\n\n\nThe key for logout is to understand the limitations of logout, and to\ntest the use cases that are important to you, so you will not be\nsurprised by the behavior when you put your application into production.\n\n\nTesting with oxAuth RP\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nOr deploy \noxAuth-rp.war\n\n\n\n\nOpenID Connect Discovery\n\n\n\n\nEnter an identifier, for example: https://seed.gluu.org or acct:mike@seed.gluu.org\n\n\nClick submit.\n\n\n\n\n\n\nDynamic Client Registration\n\n\n\n\nClient Read\n\n\n\n\nAuthorization Endpoint\n\n\nRequest Authorization and receive the Authorization Code and ID Token\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Authorization Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize)\n\n\nSelect the Response Types: CODE and ID_TOKEN\n\n\nEnter the Client ID (eg: @!EDFB.879F.2DAE.D95A!0001!0442.B31E!0008!A2DA.C10F)\n\n\nSelect the desired scopes: OpenID is mandatory, profile, address,\n    email and phone are optional.\n\n\nEnter a Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam\n\n\nOptionally enter a state value.\n\n\nClick submit.\n\n\n\n\n\n\nRequest Access Token using the Authorization Code\n\n\n\n\nOnce redirected back to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Token Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)\n\n\nSelect the Grant Type: AUTHORIZATION_CODE\n\n\nEnter the Client ID.\n\n\nEnter the Client Secret.\n\n\nEnter the Code received from the previous request\n\n\nEnter the Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam\n\n\nEnter the scopes: OpenID profile address email phone.\n\n\nClick submit.\n\n\n\n\n\n\nRequest new Access Token using the Refresh Token\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Token Endpoint (https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)\n\n\nSelect the Grant Type: REFRESH_TOKEN\n\n\nEnter the Client ID.\n\n\nEnter the Client Secret.\n\n\nEnter the Refresh Token received in a previous request.\n\n\nClick submit.\n\n\n\n\n\n\nUserInfo Endpoint\n\n\n\n\nOpenID Connect Session Management\n\n\nEnd Session Endpoint\n\n\n\n\nCheck Session iFrame\n\n\n\n\noAuth 2 Grants\n\n\nThere are two additional flows that the Gluu Server supports for user\nand client authentication, which are not part of the OpenID Connect\nspecification. The flows are explained in the following page.\n\n\n\n\noAuth 2 Grants",
            "title": "OpenID Connect"
        },
        {
            "location": "/integrate/openid-connect/#table-of-contents",
            "text": "Table of Contents  Overview  Jargon (taxonomy)  Discovery  Scopes  Client Registration  Multi-Factor Authentication for Clients  Algorithm  Custom Client Registration  Search clients  View client    Session management  Testing with oxAuth RP  OpenID Connect Discovery  Dynamic Client Registration  Client Read    Authorization Endpoint  Request Authorization and receive the Authorization Code and ID Token  Request Access Token using the Authorization Code  Request new Access Token using the Refresh Token    UserInfo Endpoint  OpenID Connect Session Management  End Session Endpoint  Check Session iFrame        oAuth 2 Grants",
            "title": "Table of Contents"
        },
        {
            "location": "/integrate/openid-connect/#overview",
            "text": "OpenID Connect  (\"Connect\") is a standard\nprofile of OAuth2 which defines a protocol to enable a website or mobile\napplication to send a person to a domain for authentication and required\nattributes (e.g. email address, first name, last name, etc.). OpenID Connect\nalso provides some of the plumbing around authentication to automate how\nthis happens. If a person is visiting a website for the first time, the\nprocess that OpenID Connect defines is 100% bootstrapable by the\nwebsite. This is really critical for Internet scalability. To visit\nsomeone's website, or to send someone an email, you do not need to get\nthe system administrators involved. Connect provides the same type of\nscalable infrastructure for authentication and authorization, and promises to define a base level domain\nidentification.",
            "title": "Overview"
        },
        {
            "location": "/integrate/openid-connect/#jargon-taxonomy",
            "text": "If you are familiar with SAML, there are many parallels in OpenID\nConnect, but the jargon (or \"taxonomy\") is different. For example,\ninstead of attributes, we have \"user claims\". Instead of Service\nProvider (SP), we have \"client\". Instead of Identity Provider (IdP), it\nis an OpenID Provider (OP).",
            "title": "Jargon (taxonomy)"
        },
        {
            "location": "/integrate/openid-connect/#discovery",
            "text": "The first thing you want to know about any OAuth2 API is where are the\nendpoints (i.e. what are the uris where you call the APIs).\nOpenID Connect provides a very simple mechanism to accomplish this:  OpenID Connect Discovery .  In order for an OpenID Connect Relying Party to utilize OpenID Connect\nservices for an End-User, the RP needs to know where the OpenID Provider is.\nOpenID Connect uses WebFinger  WebFinger \nto locate the OpenID Provider for an End-User.  Once the OpenID Provider has been identified, the configuration information\nfor the OP is retrieved from a well-known location as a JSON document,\nincluding its OAuth 2.0 endpoint locations.  If you want to try a discovery request, you can make the following\nWebFinger request to discover the Issuer location:  GET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}  Using the Issuer location discovered, the OpenID Provider's configuration information can be retrieved.  The RP makes the following request to the Issuer https:// /.well-known/openid-configuration to obtain its\nConfiguration information:  GET /.well-known/openid-configuration HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"issuer\": \"https://idp.gluu.org\",\n    \"authorization_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n    \"token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/token\",\n    \"userinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/userinfo\",\n    \"clientinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/clientinfo\",\n    \"check_session_iframe\": \"https://idp.gluu.org/oxauth/opiframe\",\n    \"end_session_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/end_session\",\n    \"jwks_uri\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n    \"registration_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/register\",\n    \"validate_token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/validate\",\n    \"federation_metadata_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federationmetadata\",\n    \"federation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federation\",\n    \"id_generation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/id\",\n    \"introspection_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/introspection\",\n    \"scopes_supported\": [\n        \"clientinfo\",\n        \"email\",\n        \"openid\",\n        \"profile\",\n        \"address\",\n        \"uma_protection\",\n        \"user_name\",\n        \"uma_authorization\",\n        \"mobile_phone\",\n        \"phone\"\n    ],\n    \"response_types_supported\": [\n        \"code\",\n        \"code id_token\",\n        \"token\",\n        \"token id_token\",\n        \"code token\",\n        \"code token id_token\",\n        \"id_token\"\n    ],\n    \"grant_types_supported\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n    ],\n    \"acr_values_supported\": [\"\"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"],\n    \"auth_level_mapping\": {\"-1\": [[\"internal\"]]},\n    \"subject_types_supported\": [\n        \"public\",\n        \"pairwise\"\n    ],\n    \"userinfo_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"userinfo_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"userinfo_encryption_enc_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"id_token_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"request_object_signing_alg_values_supported\": [\n        \"none\",\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"request_object_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"request_object_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"token_endpoint_auth_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"display_values_supported\": [\n        \"page\",\n        \"popup\"\n    ],\n    \"claim_types_supported\": [\"normal\"],\n    \"claims_supported\": [\n        \"birthdate\",\n        \"country\",\n        \"name\",\n        \"email\",\n        \"email_verified\",\n        \"given_name\",\n        \"gender\",\n        \"inum\",\n        \"family_name\",\n        \"updated_at\",\n        \"locale\",\n        \"middle_name\",\n        \"nickname\",\n        \"phone_number_verified\",\n        \"picture\",\n        \"preferred_username\",\n        \"profile\",\n        \"zoneinfo\",\n        \"user_name\",\n        \"website\"\n    ],\n    \"service_documentation\": \"http://gluu.org/docs\",\n    \"claims_locales_supported\": [\"en\"],\n    \"ui_locales_supported\": [\n        \"en\", \"es\"\n    ],\n    \"scope_to_claims_mapping\": [\n        {\"clientinfo\": [\n            \"name\",\n            \"inum\"\n        ]},\n        {\"email\": [\n            \"email_verified\",\n            \"email\"\n        ]},\n        {\"openid\": [\"inum\"]},\n        {\"profile\": [\n            \"name\",\n            \"family_name\",\n            \"given_name\",\n            \"middle_name\",\n            \"nickname\",\n            \"preferred_username\",\n            \"profile\",\n            \"picture\",\n            \"website\",\n            \"gender\",\n            \"birthdate\",\n            \"zoneinfo\",\n            \"locale\",\n            \"updated_at\"\n        ]},\n        {\"address\": [\n            \"formatted\",\n            \"postal_code\",\n            \"street_address\",\n            \"locality\",\n            \"country\",\n            \"region\"\n        ]},\n        {\"uma_protection\": []},\n        {\"user_name\": [\"user_name\"]},\n        {\"uma_authorization\": []},\n        {\"mobile_phone\": [\"phone_mobile_number\"]},\n        {\"phone\": [\n            \"phone_number_verified\",\n            \"phone_number\"\n        ]}\n    ],\n    \"claims_parameter_supported\": true,\n    \"request_parameter_supported\": true,\n    \"request_uri_parameter_supported\": true,\n    \"require_request_uri_registration\": false,\n    \"op_policy_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:policy\",\n    \"op_tos_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:tos\",\n    \"http_logout_supported\": \"true\",\n    \"logout_session_supported\": \"true\"\n}  The following is an example using the  oxAuth-Client  lib:  String resource = \"acct:mike@idp.gluu.org\";\n\nOpenIdConnectDiscoveryClient openIdConnectDiscoveryClient = new OpenIdConnectDiscoveryClient(resource);\nOpenIdConnectDiscoveryResponse openIdConnectDiscoveryResponse = openIdConnectDiscoveryClient.exec();\n\n.....\n\nOpenIdConfigurationClient client = new OpenIdConfigurationClient(configurationEndpoint);\nOpenIdConfigurationResponse response = client.execOpenIdConfiguration();  See  org.xdi.oxauth.ws.rs.ConfigurationRestWebServiceHttpTest",
            "title": "Discovery"
        },
        {
            "location": "/integrate/openid-connect/#scopes",
            "text": "In SAML, the IdP releases attributes to the SP. OpenID Connect provides\nsimilar functionality, with more flexibility in case the person needs to\nself-approve the release of information from the IdP to the website (or\nmobile application). In OAuth2, scopes can be used for various purposes.\nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we\ncould have a scope called \"address\" that includes the street, city,\nstate, and country user claims. By default the Gluu Server defines six\nscopes.   The Gluu Server administrator can easily add more scopes in the GUI.\nClick  Add Scope  and you will be presented with the following screen:   You will have the ability to provide a Display Name, Description,\nwhether or not the scope is provided by default, and the claims that are\nincluded in the scope.  Default Scope needs some further explanation. When a client uses dynamic\nclient registration, the OpenID Connect specification says that the openid  scope should always be released, which contains an identifier\nfor that person, normally the username. If you want to release another\nscope automatically, set the Default Scope to  true  for that scope. You\ncan always explicitly release a scope to a certain client later on, but\nthis will require some manual intervention by the domain administrator.  To add more claims, simply click \"Add Claim\" and you will be presented\nwith the following screen:",
            "title": "Scopes"
        },
        {
            "location": "/integrate/openid-connect/#client-registration",
            "text": "A client in OAuth2 could be either a website or mobile application.\nOpenID Connect has an API for  Dynamic Client\nRegistration \nwhich efficiently pushes the task to the application developer. If you\ndo not want to write an application to register your client, there are a\nfew web pages around that can do the job for you. Gluu publishes the oxAuth-RP  and there is also another in  PHP\nRP .  If you cannot get the developer to help themselves, or if your domain\ndoesn't want to allow dynamic client registration, you can use the\noxTrust admin GUI to manually add trusted clients.  Available  Clients  can be seen by hitting the  Search  button\nleaving the search box empty.   A new client can be added by clicking the  Add Client  link.   Clicking on the  Add Client  link allows the Gluu Server administrator\nto add a new client. The search box can be used to look up previously\nadded clients as well. The screenshot below shows the interface to add a\nnew client.     Client Name:  This contains the recognizable and unique display name\n  of the client. The name of the Client to be presented to the End-User.    Client Secret:  This is the Data Encryption Standard scheme used by\n  Confidential Clients to authenticate to the token endpoint. The value for\n  the secret can be inserted manually, but it is highly recommended to use\n  the Dynamic Client Registration Endpoint. The Gluu oxAuth provides a\n  random, generated Client Secret in the Dynamic Client Registration\n  procedure.    Application Type:  There are two types of applications, Web and\n  Native. The default, if omitted, is web when using the Dynamic\n  Client Registration Endpoint. The different configuration for the\n   different application types are given below.    Web:  The Dynamic Client Registration is the default for web. In\nthis type the redirect_uri for implicit grant type must be a real\nhostname with HTTPS. This type is not approved any localhost or HTTP.\nThe web application uses the authorization code flow for clients which\ncan maintain a client secret between the uris and the authorization\nserver.    Native:  Custom uri for Native type application have to follow HTTP\nwith localhost. This is suitable for a mobile app which cannot maintain\nthe client secret between itself and the authorization server.      Pre Authorization:  The Gluu Server disables this option by default,\n  but it is possible to allow pre-authorized Client Applications according to the\n  Organization Policy by the Gluu Server administrator.    Logo URI:  The URL of the logo for the client application.\n  If present, the server will display this image to the End-User during approval.    Client URI:  The URL of the home page of the client.    Policy URI:  URL that the Relying Party Client provides to the End-User to read about\n  the how the profile data will be used. The value of this field must point\n  to a valid web page. The OpenID Provider will display this URL to the End-User if it is given.    Terms of Service URI:  URL that the Relying Party Client provides to the End-User to\n  read about the Relying Party's terms of service. The value of this field must point to\n  a valid web page. The OpenID Provider will display this URL to the End-User if it is given.    JWKS URI:  The URL for the Client's JSON Web Key Set document.\n  If the Client signs requests to the Server, it contains the signing key(s) the Server uses to\n  validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s),\n  which are used by the Server to encrypt responses to the Client.\n  When both signing and encryption keys are made available, a use (Key Use) parameter value is\n  required for all keys in the referenced JWK Set to indicate each key's intended usage.\n  Although some algorithms allow the same key to be used for both signatures and encryption,\n  doing so is NOT RECOMMENDED, as it is less secure.    JWKS:  Client's JSON Web Key Set document, passed by value.\n  The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the\n  JWK Set is passed by value, rather than by reference.\n  This parameter is intended only to be used by Clients that, for some reason, are unable to use\n  the jwks_uri parameter, for instance, by native applications that might not have a location to\n  host the contents of the JWK Set.\n  If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it\n  does not enable key rotation (which jwks_uri does).\n  The jwks_uri and jwks parameters MUST NOT be used together.    Sector Identifier URI:  URL using the https scheme to be used in calculating Pseudonymous\n  Identifiers by the OP.\n  The URL references a file with a single JSON array of redirect_uri values.\n  Providers that use pairwise sub (subject) values should utilize the sector_identifier_uri\n  value provided in the Subject Identifier calculation for pairwise identifiers.    Subject Type:  The subject type requested for responses to this Client.\n  The subject_types_supported Discovery parameter contains a list of the\n  supported subject_type values for this server. Valid types include pairwise and public.    JWS alg Algorithm for signing the ID Token:  JWS alg algorithm for signing the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWE alg Algorithm for encrypting the ID Token:  JWE alg algorithm for encrypting the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting the ID Token:  JWE enc algorithm for encrypting the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWS alg Algorithm for signing the UserInfo Responses:  JWS alg algorithm for signing UserInfo Responses.\n  If this is specified, the response will be JWT serialized, and signed using JWS.\n  The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object\n  using the application/json content-type.\n  See  Algorithms section  for options.    JWS alg Algorithm for encrypting the UserInfo Responses:   JWE alg algorithm for encrypting UserInfo Responses.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting the UserInfo Responses:  JWE enc algorithm for encrypting UserInfo Responses. \n  See  Algorithms section  for options.    JWS alg Algorithm for signing Request Objects:  JWS alg algorithm used for signing Request Objects sent to the OP.\n  This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is\n  passed by reference (using the request_uri parameter).\n  The default, if omitted, is that any algorithm supported by the OP and the RP can be used.\n  The value none can be used.\n  See  Algorithms section  for options.    JWE alg Algorithm for encrypting Request Objects:  JWE alg algorithm the RP is declaring that it use for\n  encrypting Request Objects sent to the OP.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting Request Objects:  JWE enc algorithm the RP is declaring that it may use for\n  encrypting Request Objects sent to the OP.\n  See  Algorithms section  for options.    Authentication method for the Token Endpoint:  Requested Client Authentication method for the Token Endpoint.\n  The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none.\n  If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.    JWS alg Algorithm for Authentication method to Token Endpoint:  JWS alg algorithm used for signing the JWT\n  used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt\n  authentication methods. The value none cannot be used.\n  The default, if omitted, is that any algorithm supported by the OP and the RP can be used.\n  See  Algorithms section  for options.    Default Maximum Authentication Age:  Specifies that the End-User must be actively authenticated if the End-User was\n  authenticated longer ago than the specified number of seconds.\n  If omitted, no default Maximum Authentication Age is specified.    Require Auth Time:  Specifies whether the auth_time Claim in the ID Token is required.\n  If omitted, the default value is false.    Persist Client Authorizations*:  Specifies whether to persist user authorizations.    Initiate Login URI:  URI using the https scheme that a third party can use to initiate a login by the RP.    Request URIs:  Array of request_uri values that are pre-registered by the RP for use at the OP.\n   The Server cache the contents of the files referenced by these URIs and not retrieve them at\n   the time they are used in a request.\n   If the contents of the request file could ever change, these URI values should include the base64url\n   encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment.\n   If the fragment value used for a URI changes, that signals the server that its cached value for that URI\n   with the old fragment value is no longer valid.     Logout URIs:  Redirect logout URLs supplied by the RP to which it can request that the End-User's\n  User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.    Logout Session Required*:  Specifies whether the RP requires that a sid (session ID) query parameter\n  be included to identify the RP session at the OP when the logout_uri is used.\n  If omitted, the default value is false.    Client Secret Expires:  Time at which the client will expire or 0 if it will not expire.    Buttons at the bottom    Add Login URI:  This option can be used to add the login URL.    Add Scopes:  This option can be used to add the required scopes in the Gluu Server.    The available scopes can be listed by hitting the  Search  button, and\n  keeping the search phrase blank. Furthermore, from this the Gluu Server\n  administrator can select the required scopes.    Add Response Type:  There are three types of responses in the Gluu\n  Server and they are Code, Token and ID Token. The Gluu Server\n  Administrator can select all of them for testing purposes.    Add Grant Type:  There are 3 grant type available in this option  authorization_code, implicit, refresh_token     Add Contact:  Use this option to add the email address for the Client contact    Add Default ACR value:  Use this option to define the default ACR Value. This value is used to include multi-factor authentication in registered clients.    Add Request URI:  Use this option to add the Request URI    Multi-Factor Authentication for Clients  The  acr_values  parameter is used to specify the use of specific multi-factor authentication for each client. If a scenario is presented where different clients use different authentication mechanism, then the  acr_value  parameter is used to specify the choice. Out of the box, GLuu Server supports U2F, DUO, Basic, oxPush/SuperGluu, Google+ and internal LDAP authentication. While registering new clients, put the mode in  Add Default ACR value  to chosen mechanism. The authentication mechanism must be enabled in the  Custom Scripts  section as well.  Supported ACR Values in Client Registration: \"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"  The values appear in order of preference and the successful authentication is sent as the acr claim value in the issued ID Token. The table below explains the acr values. Please click on the description to access the specific how-to guide for the ACR declared authentication.     ACR Value  Description      u2f  FIDO U2F Device    duo  Duo soft-token authentication    basic  Username/Password authentication from LDAP Server    oxpush2  Multi-factor authentication    gplus  Google+ authentication    internal  Use Gluu Server LDAP to authenticate users     Algorithm  oxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.  Note:  It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.  Available Signature Algorithms:  none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.  Encryption, Key Encryption Algorithms:  RSA1_5, RSA-OAEP, A128KW, A256KW.  Block Encryption Algorithms:  A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,  Custom Client Registration  Using interception scripts you can customize client registration\nbehavior. For example, by default oxAuth allows new clients to access to\ndefault scopes only. With a custom client registration interception\nscript it is possible to allow access to more scopes. For instance, we\ncan use  redirect_uri  to determine if we need to allow access to\nadditional scopes or not.  To access the interface for custom scripts in oxTrust, navigate to\nConfiguration --> Custom Scripts --> Custom Client Registration.  Take a look at our  example client registration\nscript \nfor further reference.  Search clients   View client",
            "title": "Client Registration"
        },
        {
            "location": "/integrate/openid-connect/#session-management",
            "text": "Logout is a catch-22. There is no perfect answer to logout that\nsatisfies all the requirements of all the domains on the Internet. For\nexample, large OpenID Providers, like Google, need a totally stateless\nimplementation--Google cannot track sessions on the server side for\nevery browser on the Internet. But in smaller domains, server side\nlogout functionality can be a convenient solution to cleaning up\nresources.  The OpenID Connect  Session\nManagement  is\nstill marked as draft, and new mechanisms for logout are in the works.\nThe current specification requires JavaScript to detect that the session\nhas been ended in the browser. It works... unless the tab with the\nJavaScript happens to be closed when the logout event happens on another\ntab. Also, inserting JavaScript into every page is not feasible for some\napplications. A new proposal is under discussion where the OpenID\nConnect logout API would return  IMG  HTML tags to the browser with the\nlogout callbacks of the clients. This way, the browser could call the\nlogout uris (not the server).  The Gluu Server is very flexible, and supports both server side session\nmanagement, and stateless session management. For server side business\nlogout, the domain admin can use Custom Logout scripts. This can be\nuseful to clean up sessions in a legacy SSO system (i.e. SiteMinder), or\nperhaps in a portal.  The key for logout is to understand the limitations of logout, and to\ntest the use cases that are important to you, so you will not be\nsurprised by the behavior when you put your application into production.",
            "title": "Session management"
        },
        {
            "location": "/integrate/openid-connect/#testing-with-oxauth-rp",
            "text": "Go to https://seed.gluu.org/oxauth-rp  Or deploy  oxAuth-rp.war   OpenID Connect Discovery   Enter an identifier, for example: https://seed.gluu.org or acct:mike@seed.gluu.org  Click submit.    Dynamic Client Registration   Client Read   Authorization Endpoint  Request Authorization and receive the Authorization Code and ID Token   Go to https://seed.gluu.org/oxauth-rp  Enter the Authorization Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize)  Select the Response Types: CODE and ID_TOKEN  Enter the Client ID (eg: @!EDFB.879F.2DAE.D95A!0001!0442.B31E!0008!A2DA.C10F)  Select the desired scopes: OpenID is mandatory, profile, address,\n    email and phone are optional.  Enter a Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam  Optionally enter a state value.  Click submit.    Request Access Token using the Authorization Code   Once redirected back to https://seed.gluu.org/oxauth-rp  Enter the Token Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)  Select the Grant Type: AUTHORIZATION_CODE  Enter the Client ID.  Enter the Client Secret.  Enter the Code received from the previous request  Enter the Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam  Enter the scopes: OpenID profile address email phone.  Click submit.    Request new Access Token using the Refresh Token   Go to https://seed.gluu.org/oxauth-rp  Enter the Token Endpoint (https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)  Select the Grant Type: REFRESH_TOKEN  Enter the Client ID.  Enter the Client Secret.  Enter the Refresh Token received in a previous request.  Click submit.    UserInfo Endpoint   OpenID Connect Session Management  End Session Endpoint   Check Session iFrame",
            "title": "Testing with oxAuth RP"
        },
        {
            "location": "/integrate/openid-connect/#oauth-2-grants",
            "text": "There are two additional flows that the Gluu Server supports for user\nand client authentication, which are not part of the OpenID Connect\nspecification. The flows are explained in the following page.   oAuth 2 Grants",
            "title": "oAuth 2 Grants"
        },
        {
            "location": "/integrate/uma/",
            "text": "Enterprise UMA\n\n\nUMA in Action\n\n\nUMA Authorization Workflow\n\n\nDetailed Authorization Overview\n\n\nUMA Authorization Token Workflow\n\n\nUMA Authorization Complete Sequence\n\n\n\n\n\n\nDiscovery\n\n\nResource Registration\n\n\nRegister resource via oxTrust\n\n\n\n\n\n\nUMA Scopes\n\n\nDefine UMA Scopes via oxTrust\n\n\nImplementation specificity\n\n\nExternal sample ldif\n\n\nInternal sample ldif\n\n\n\n\n\n\n\n\n\n\nUMA Policies\n\n\nDefine Policies\n\n\nAlgorithm\n\n\n\n\n\n\nRequesting party trust elevation\n\n\nUMA Resource Server Java Library\n\n\nUsage\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nEnterprise UMA\n\n\nThe Gluu Server implements UMA in a way that enables the protection\nof any web resource. Through the oxTrust interface, the server admin can\nwrite custom \nauthorization interception\nscripts\n\nwhich may contain logic to grant (or forbid) access. All terminology\nused by this page is borrowed from UMA and Connect specs.\n\n\nUMA in Action\n\n\nThe diagrams below detail how the various UMA actors interact.\n\n\nSome helpful definitions:\n- \nResource Owner (RO)\n: An OAuth resource owner that is the \"user\" in\n  User-Managed Access. This is typically an end-user (a natural person)\n  but it can also be a corporation or other legal person. \n\n- \nResource Server (RS)\n: Where the resources are held.  \n\n- \nAuthorization Server (AS)\n: A server that governs access based on resource owner policies.   \n\n- \nRequesting Party (RP)\n: An end-user, or a corporation or other legal\n  person, that uses a client to seek access to a protected resource. The\n  requesting party may or may not be the same party as the resource owner.  \n\n- \nClient\n: A web or native app that is used to access a digital\n  resource.   \n\n- \nProtection API Token (PAT)\n: An entity seeking protection API access\n  MUST have the scope \"uma_protection\". An access token with at least\n  this scope is called a protection API token (PAT) and an entity that\n  can acquire an access token with this scope is by definition a resource\n  server.   \n\n- \nRequesting Party Token (RPT)\n: the token that a client presents to a\n  resource server when trying to access a protected resource.   \n\n- \nAuthorization API Token (AAT)\n: An entity seeking authorization API\n  access MUST have the scope \"uma_authorization\". An access token with\n  at least this scope is called an authorization API token (AAT) and an\n  entity that can acquire an access token with this scope is by \n  definition a client.      \n\n\nUMA Authorization Workflow\n\n\n\n\nDetailed Authorization Overview\n\n\n\n\nUMA Authorization Token Workflow\n\n\n\n\nUMA Authorization Complete Sequence\n\n\n\n\nDiscovery\n\n\nThe Gluu Server exposes an endpoint for discovering information about\nUMA Provider configuration. A resource server or client can perform an\nHTTP GET on \nhttps://domain.com/.well-known/uma-configuration\n to\nretrieve a JSON object indicating the UMA Provider configuration.\n\n\nGluu Server response for UMA configuration MAY contain standard\nproperties (defined by UMA specification) as well as custom properties\n(extension that is out of scope of this document). Gluu Server\nguarantees property name uniqueness within response.\n\n\nThe following is an example of a GET request to the UMA configuration\ndiscovery endpoint:\n\n\n{\n  \"version\": \"1.0\",\n  \"issuer\": \"https://gluuserver.org\",\n  \"pat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"aat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"rpt_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"pat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"aat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"claim_profiles_supported\": [\n    \"openid\"\n  ],\n  \"dynamic_client_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\",\n  \"token_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\",\n  \"user_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n  \"introspection_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/status\",\n  \"resource_set_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\",\n  \"permission_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\",\n  \"rpt_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\",\n  \"authorization_request_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\",\n  \"scope_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\"\n}\n\n\n\n\nThe JSON object returned includes the following configuration\ninformation:\n\n\nversion\n: the supported UMA core protocol version.\n\n\nissuer\n: the uri of the issuing authorization server.\n\n\npat_profiles_supported\n: the supported OAuth token types used for\nissuing Protection API Tokens (PATs).\n\n\naat_profiles_supported\n: the supported OAuth token types used for\nissuing Authorization API Tokens (AATs).\n\n\nrpt_profiles_supported\n: the supported Requesting Party Token (RPT)\nprofiles.\n\n\npat_grant_types_supported\n: the supported OAuth grant types used for\nissuing PATs.\n\n\naat_grant_types_supported\n: the supported OAuth grant types used for\nissuing AATs.\n\n\ntoken_endpoint\n: the uri to request a PAT or AAT.\n\n\nauthorization_endpoint\n: the uri to request authorization for issuing a\nPAT or AAT.\n\n\nintrospection_endpoint\n: the uri to introspect an RPT.\n\n\nresource_set_registration_endpoint\n: the uri for a resource server to\nregister a resource set.\n\n\npermission_registration_endpoint\n: the uri for a resource server to\nregister a requested permission.\n\n\nrpt_endpoint\n: the uri for the client to request authorization data.\n\n\ndynamic_client_endpoint\n: the uri for registering a dynamic client.\n\n\nResource Registration\n\n\nTo let the Gluu Server know which resources are protected by UMA they\nmust be registered. Resources are described by the following properties:\n\n\n\n\nname: name of resource\n\n\nscopes: scopes that are available for this resource\n\n\ntype: type of resource (it can be string, uri or what ever, basically\n  it is up to Resource Server what type it should be).\n\n\nicon_uri: uri to the icon.\n\n\n\n\nThese are standard properties however a resource description MAY contain\ncustom properties.\n\n\nRegister resource via oxTrust\n\n\n\n\n\n\nUMA Scopes\n\n\nUMA Scopes are bound to resource sets and are used by policies to check\nwhether the specified user has access to the resource. An UMA Scope is\ndescribed in JSON and has the following properties:\n\n\n\n\nname: name of scope (e.g. View photo, Edit photo)\n\n\nicon_uri: optional property to specify an icon for the photo\n\n\n\n\nAn example of a typical JSON document of scope can be seen here:\n\n\n{\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}\n\n\n\n\nThe scope JSON MAY contain custom properties which are out of scope of\nthis document.\n\n\nDefine UMA Scopes via oxTrust\n\n\n\n\n\n\nImplementation specificity\n\n\nThe following types of scopes exist:\n\n\n\n\ninternal: hosted on oxAuth (must provide a scope description).\n\n\nexternal: hosted on other servers.\n\n\nexternal_auto: a scope hosted on another server but which is\n  automatically added during resource set registration or update.\n\n\n\n\nNote:\n there is no uri for an internal scope because it is\nconfigurable and depends on oxAuth hosting.\n\n\nUMA url = uma_scopes_endpoint + \"/\" + oxId;\n\n\nhttp://gluu.org/uma/scopes/view = http://gluu.org/uma/scopes + \"/\" + view\n\n\nA server has to provide a scope description as JSON document. The\nfollowing uri is in use: http://gluu.org/uma/scopes/view\n\n\nNote:\n The scope endpoint has to be present in UMA configuration to\nmake it discoverable.\n\n\nExternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view\n\n\n\n\nInternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png\n\n\n\n\nUMA Policies\n\n\nUMA Policies protect UMA Resources. The protection of resources are made\nvia scopes. Gluu Server evaluates all policies (identified by scopes) in\norder to grant access.\n\n\nThe UMA Policy main properties are:\n\n\n\n\nscopes: policy protects resources by scopes.\n\n\nauthorization script: script that is evaluated in order to grant or\n  deny access (script basically returns true or false to the server).\n\n\nname: it is best to provide an easily understandable name to the\n  policy so that it is clear what the policy protects.\n\n\n\n\nDefine Policies\n\n\nWithin the oxTrust interface the Gluu Server admin can define UMA\npolicies (pictured below). To achieve this, navigate to Configuration >\nManage Custom Scripts > UMA Authorization policies.\n\n\nYou can find more information on crafting UMA policies as well as an\nexample script\n\nhere\n.\n\n\n\n\nAlgorithm\n\n\nThe algorithm follows theses rules:\n\n\n\n\nPolicy protects resources based on scopes. If a scope is protected by\n  a policy then during RPT authorization such a policy script has to\n  return true in order to authorize access to resource, otherwise\n  authorization is denied.\n\n\nScope can be protected by multiple policies. If one scope is protected\n  by multiple policies then all policies have to return true to\n  authorize access. If at least one policy returned false then the\n  authorization is denied.\n\n\n\n\n \n\n\nRequesting party trust elevation\n\n\nThis section defines the OX claim profile for UMA. Following is a\nsummary:\n\n\n\n\nIdentifying uri: http://gluu.org/uma/profiles/uma-claim-gluu-1.0\n\n\nProfile author and contact information: Michael Schwartz and Yuriy Zabrovarnyy (info@gluu.org)\n\n\nUpdates or obsoletes: None; this profile is new.\n\n\nSyntax and semantics of claim data: As defined below.\n\n\nClaims gathering method: As defined below.\n\n\nError states: \"need_reauthentication\" in case AAT is not \"strong\" enough.\n\n\nSecurity and privacy considerations: None additional.\n\n\nBinding obligations: None additional.\n\n\n\n\nIf an authorization server supports the OX claim profile, it MUST supply\nthe \"ox\" value for one of its \"claim_profiles_supported\" values in its\nconfiguration data.\n\n\nTo conform to this option, the authorization server MUST do the following:\n\n\n\n\nsend \"need_reauthentication\" error in case AAT does not correspond\n    to authentication level and (or) mode of authorization policy.\n    Together with error authorization server MUST provide:\n\n\ndomain_auth_level - REQUIRED. authentication level required to\n    satisfy authorization policy.\n\n\ndomain_auth_mode - REQUIRED. authentication mode required to\n    satisfy authorization policy.\n\n\nauthentication_uri - OPTIONAL. authorization server\n    authentication uri for re-authentication with required\n    authentication level and mode\n\n\n\n\n\n\n\n\nFor example:\n\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n{\n  \"status\": \"error\",\n  \"error\": \"need_reauthentication\",\n  \"domain_auth_level\":20,\n  \"domain_auth_mode\":\"duo\",\n  \"required_acr_level\":2,\n  \"required_acr_uri\":\"http://example.com/global_acr\",\n  \"authentication_uri\":\"http://seed.gluu.org/oxauth?auth_level=20&auth_mode=duo&client_id=...\"\n}\n\n\n\n\nUMA Resource Server Java Library\n\n\nUMA RS Java Library\n helps to easily protect Java based project with UMA in declarative way.\n\n\nSample declaration\n\n\n{\"resources\":[\n    {\n        \"path\":\"/photo\",\n        \"conditions\":[\n            {\n                \"httpMethods\":[\"GET\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/view\"\n                ]\n            },\n            {\n                \"httpMethods\":[\"PUT\", \"POST\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/all\",\n                    \"http://photoz.example.com/dev/actions/add\"\n                ],\n                \"ticketScopes\":[\n                    \"http://photoz.example.com/dev/actions/add\"\n                ]\n            }\n        ]\n    },\n    {\n        \"path\":\"/document\",\n        \"conditions\":[\n            {\n                \"httpMethods\":[\"GET\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/view\"\n                ]\n            }\n        ]\n    }\n]\n}\n\n\n\n\nticketScopes\n are used for UMA ticket registration. If it is skipped then ALL scopes are registered for ticket.\n\n\nUsage\n\n\nConfiguration configuration = ConfigurationLoader.loadFromJson(inputStream(CONFIGURATION_FILE_NAME));\nCollection<RsResource> values = RsProtector.instance(inputStream(PROTECTION_CONFIGURATION_FILE_NAME)).getResourceMap().values();\n\nServiceProvider serviceProvider = new ServiceProvider(configuration);\nPatProvider patProvider = new PatProvider(serviceProvider);\nResourceRegistrar resourceRegistrar = new ResourceRegistrar(patProvider);\n\nresourceRegistrar.register(values);\n\n\n\n\nReferences\n\n\n\n\nUMA 1.0.1 Specification\n\n\nKantara Enterprise UMA Case Study\n \n\n\nUMA Specifications\n\n\nUMA Requesting Party Sample implementation\n\n\nUMA Resource Server Sample implementation\n\n\nUMA Demo Video\n\n\nUMA Demo Local Configuration (How to)\n\n\nUMA Requesting Party Sample Live\n\n\nUMA Resource Server Sample Live\n\n\nGluu Server",
            "title": "UMA"
        },
        {
            "location": "/integrate/uma/#enterprise-uma",
            "text": "The Gluu Server implements UMA in a way that enables the protection\nof any web resource. Through the oxTrust interface, the server admin can\nwrite custom  authorization interception\nscripts \nwhich may contain logic to grant (or forbid) access. All terminology\nused by this page is borrowed from UMA and Connect specs.",
            "title": "Enterprise UMA"
        },
        {
            "location": "/integrate/uma/#uma-in-action",
            "text": "The diagrams below detail how the various UMA actors interact.  Some helpful definitions:\n-  Resource Owner (RO) : An OAuth resource owner that is the \"user\" in\n  User-Managed Access. This is typically an end-user (a natural person)\n  but it can also be a corporation or other legal person.  \n-  Resource Server (RS) : Where the resources are held.   \n-  Authorization Server (AS) : A server that governs access based on resource owner policies.    \n-  Requesting Party (RP) : An end-user, or a corporation or other legal\n  person, that uses a client to seek access to a protected resource. The\n  requesting party may or may not be the same party as the resource owner.   \n-  Client : A web or native app that is used to access a digital\n  resource.    \n-  Protection API Token (PAT) : An entity seeking protection API access\n  MUST have the scope \"uma_protection\". An access token with at least\n  this scope is called a protection API token (PAT) and an entity that\n  can acquire an access token with this scope is by definition a resource\n  server.    \n-  Requesting Party Token (RPT) : the token that a client presents to a\n  resource server when trying to access a protected resource.    \n-  Authorization API Token (AAT) : An entity seeking authorization API\n  access MUST have the scope \"uma_authorization\". An access token with\n  at least this scope is called an authorization API token (AAT) and an\n  entity that can acquire an access token with this scope is by \n  definition a client.",
            "title": "UMA in Action"
        },
        {
            "location": "/integrate/uma/#uma-authorization-workflow",
            "text": "",
            "title": "UMA Authorization Workflow"
        },
        {
            "location": "/integrate/uma/#detailed-authorization-overview",
            "text": "",
            "title": "Detailed Authorization Overview"
        },
        {
            "location": "/integrate/uma/#uma-authorization-token-workflow",
            "text": "",
            "title": "UMA Authorization Token Workflow"
        },
        {
            "location": "/integrate/uma/#uma-authorization-complete-sequence",
            "text": "",
            "title": "UMA Authorization Complete Sequence"
        },
        {
            "location": "/integrate/uma/#discovery",
            "text": "The Gluu Server exposes an endpoint for discovering information about\nUMA Provider configuration. A resource server or client can perform an\nHTTP GET on  https://domain.com/.well-known/uma-configuration  to\nretrieve a JSON object indicating the UMA Provider configuration.  Gluu Server response for UMA configuration MAY contain standard\nproperties (defined by UMA specification) as well as custom properties\n(extension that is out of scope of this document). Gluu Server\nguarantees property name uniqueness within response.  The following is an example of a GET request to the UMA configuration\ndiscovery endpoint:  {\n  \"version\": \"1.0\",\n  \"issuer\": \"https://gluuserver.org\",\n  \"pat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"aat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"rpt_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"pat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"aat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"claim_profiles_supported\": [\n    \"openid\"\n  ],\n  \"dynamic_client_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\",\n  \"token_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\",\n  \"user_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n  \"introspection_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/status\",\n  \"resource_set_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\",\n  \"permission_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\",\n  \"rpt_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\",\n  \"authorization_request_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\",\n  \"scope_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\"\n}  The JSON object returned includes the following configuration\ninformation:  version : the supported UMA core protocol version.  issuer : the uri of the issuing authorization server.  pat_profiles_supported : the supported OAuth token types used for\nissuing Protection API Tokens (PATs).  aat_profiles_supported : the supported OAuth token types used for\nissuing Authorization API Tokens (AATs).  rpt_profiles_supported : the supported Requesting Party Token (RPT)\nprofiles.  pat_grant_types_supported : the supported OAuth grant types used for\nissuing PATs.  aat_grant_types_supported : the supported OAuth grant types used for\nissuing AATs.  token_endpoint : the uri to request a PAT or AAT.  authorization_endpoint : the uri to request authorization for issuing a\nPAT or AAT.  introspection_endpoint : the uri to introspect an RPT.  resource_set_registration_endpoint : the uri for a resource server to\nregister a resource set.  permission_registration_endpoint : the uri for a resource server to\nregister a requested permission.  rpt_endpoint : the uri for the client to request authorization data.  dynamic_client_endpoint : the uri for registering a dynamic client.",
            "title": "Discovery"
        },
        {
            "location": "/integrate/uma/#resource-registration",
            "text": "To let the Gluu Server know which resources are protected by UMA they\nmust be registered. Resources are described by the following properties:   name: name of resource  scopes: scopes that are available for this resource  type: type of resource (it can be string, uri or what ever, basically\n  it is up to Resource Server what type it should be).  icon_uri: uri to the icon.   These are standard properties however a resource description MAY contain\ncustom properties.",
            "title": "Resource Registration"
        },
        {
            "location": "/integrate/uma/#register-resource-via-oxtrust",
            "text": "",
            "title": "Register resource via oxTrust"
        },
        {
            "location": "/integrate/uma/#uma-scopes",
            "text": "UMA Scopes are bound to resource sets and are used by policies to check\nwhether the specified user has access to the resource. An UMA Scope is\ndescribed in JSON and has the following properties:   name: name of scope (e.g. View photo, Edit photo)  icon_uri: optional property to specify an icon for the photo   An example of a typical JSON document of scope can be seen here:  {\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}  The scope JSON MAY contain custom properties which are out of scope of\nthis document.",
            "title": "UMA Scopes"
        },
        {
            "location": "/integrate/uma/#define-uma-scopes-via-oxtrust",
            "text": "",
            "title": "Define UMA Scopes via oxTrust"
        },
        {
            "location": "/integrate/uma/#implementation-specificity",
            "text": "The following types of scopes exist:   internal: hosted on oxAuth (must provide a scope description).  external: hosted on other servers.  external_auto: a scope hosted on another server but which is\n  automatically added during resource set registration or update.   Note:  there is no uri for an internal scope because it is\nconfigurable and depends on oxAuth hosting.  UMA url = uma_scopes_endpoint + \"/\" + oxId;  http://gluu.org/uma/scopes/view = http://gluu.org/uma/scopes + \"/\" + view  A server has to provide a scope description as JSON document. The\nfollowing uri is in use: http://gluu.org/uma/scopes/view  Note:  The scope endpoint has to be present in UMA configuration to\nmake it discoverable.  External sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view  Internal sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png",
            "title": "Implementation specificity"
        },
        {
            "location": "/integrate/uma/#uma-policies",
            "text": "UMA Policies protect UMA Resources. The protection of resources are made\nvia scopes. Gluu Server evaluates all policies (identified by scopes) in\norder to grant access.  The UMA Policy main properties are:   scopes: policy protects resources by scopes.  authorization script: script that is evaluated in order to grant or\n  deny access (script basically returns true or false to the server).  name: it is best to provide an easily understandable name to the\n  policy so that it is clear what the policy protects.",
            "title": "UMA Policies"
        },
        {
            "location": "/integrate/uma/#define-policies",
            "text": "Within the oxTrust interface the Gluu Server admin can define UMA\npolicies (pictured below). To achieve this, navigate to Configuration >\nManage Custom Scripts > UMA Authorization policies.  You can find more information on crafting UMA policies as well as an\nexample script here .",
            "title": "Define Policies"
        },
        {
            "location": "/integrate/uma/#algorithm",
            "text": "The algorithm follows theses rules:   Policy protects resources based on scopes. If a scope is protected by\n  a policy then during RPT authorization such a policy script has to\n  return true in order to authorize access to resource, otherwise\n  authorization is denied.  Scope can be protected by multiple policies. If one scope is protected\n  by multiple policies then all policies have to return true to\n  authorize access. If at least one policy returned false then the\n  authorization is denied.",
            "title": "Algorithm"
        },
        {
            "location": "/integrate/uma/#requesting-party-trust-elevation",
            "text": "This section defines the OX claim profile for UMA. Following is a\nsummary:   Identifying uri: http://gluu.org/uma/profiles/uma-claim-gluu-1.0  Profile author and contact information: Michael Schwartz and Yuriy Zabrovarnyy (info@gluu.org)  Updates or obsoletes: None; this profile is new.  Syntax and semantics of claim data: As defined below.  Claims gathering method: As defined below.  Error states: \"need_reauthentication\" in case AAT is not \"strong\" enough.  Security and privacy considerations: None additional.  Binding obligations: None additional.   If an authorization server supports the OX claim profile, it MUST supply\nthe \"ox\" value for one of its \"claim_profiles_supported\" values in its\nconfiguration data.  To conform to this option, the authorization server MUST do the following:   send \"need_reauthentication\" error in case AAT does not correspond\n    to authentication level and (or) mode of authorization policy.\n    Together with error authorization server MUST provide:  domain_auth_level - REQUIRED. authentication level required to\n    satisfy authorization policy.  domain_auth_mode - REQUIRED. authentication mode required to\n    satisfy authorization policy.  authentication_uri - OPTIONAL. authorization server\n    authentication uri for re-authentication with required\n    authentication level and mode     For example:  HTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n{\n  \"status\": \"error\",\n  \"error\": \"need_reauthentication\",\n  \"domain_auth_level\":20,\n  \"domain_auth_mode\":\"duo\",\n  \"required_acr_level\":2,\n  \"required_acr_uri\":\"http://example.com/global_acr\",\n  \"authentication_uri\":\"http://seed.gluu.org/oxauth?auth_level=20&auth_mode=duo&client_id=...\"\n}",
            "title": "Requesting party trust elevation"
        },
        {
            "location": "/integrate/uma/#uma-resource-server-java-library",
            "text": "UMA RS Java Library  helps to easily protect Java based project with UMA in declarative way.  Sample declaration  {\"resources\":[\n    {\n        \"path\":\"/photo\",\n        \"conditions\":[\n            {\n                \"httpMethods\":[\"GET\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/view\"\n                ]\n            },\n            {\n                \"httpMethods\":[\"PUT\", \"POST\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/all\",\n                    \"http://photoz.example.com/dev/actions/add\"\n                ],\n                \"ticketScopes\":[\n                    \"http://photoz.example.com/dev/actions/add\"\n                ]\n            }\n        ]\n    },\n    {\n        \"path\":\"/document\",\n        \"conditions\":[\n            {\n                \"httpMethods\":[\"GET\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/view\"\n                ]\n            }\n        ]\n    }\n]\n}  ticketScopes  are used for UMA ticket registration. If it is skipped then ALL scopes are registered for ticket.  Usage  Configuration configuration = ConfigurationLoader.loadFromJson(inputStream(CONFIGURATION_FILE_NAME));\nCollection<RsResource> values = RsProtector.instance(inputStream(PROTECTION_CONFIGURATION_FILE_NAME)).getResourceMap().values();\n\nServiceProvider serviceProvider = new ServiceProvider(configuration);\nPatProvider patProvider = new PatProvider(serviceProvider);\nResourceRegistrar resourceRegistrar = new ResourceRegistrar(patProvider);\n\nresourceRegistrar.register(values);",
            "title": "UMA Resource Server Java Library"
        },
        {
            "location": "/integrate/uma/#references",
            "text": "UMA 1.0.1 Specification  Kantara Enterprise UMA Case Study    UMA Specifications  UMA Requesting Party Sample implementation  UMA Resource Server Sample implementation  UMA Demo Video  UMA Demo Local Configuration (How to)  UMA Requesting Party Sample Live  UMA Resource Server Sample Live  Gluu Server",
            "title": "References"
        },
        {
            "location": "/oxtrust/users/",
            "text": "Table of Contents\n \n\n\n\n\nUser Management\n\n\nCache Refresh\n\n\nSelf Registration\n\n\nLocal User Management\n\n\nPeople\n\n\nGroups\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\nUser Management\n\n\nTo keep the Gluu Server up-to-date with the latest user claims, your\norganization can either \"push\" or \"pull\" identity data. In the \"pull\"\nmode, otherwise known as LDAP Synchronization or Cache Refresh, the Gluu\nServer can use an existing LDAP identity source like Microsoft Active\nDirectory as the authoritative source of identity information. If you\n\"push\" identities to the Gluu Server, you can use the JSON/REST SCIM\nAPI. Local user management can also be performed inside oxTrust. Each\nmethod is detailed below.\n\n\nCache Refresh\n\n\nCache Refresh was built by Gluu to pull user information from a backend\nActive Directory/LDAP Server. Cache refresh dynamically synchronizes\nuser information from the backend data source to a local LDAP server in\norder to maximize performance. Cache refresh is documented in our\n\nconfiguration section\n.\n\n\nSelf Registration\n\n\nSelf-Registration is done by users on a self-service basis. Since\noxTrust user registration cannot add users to a backend LDAP or Active\nDirectory server, self-registration will only be effective if GluuLDAP\nis used for authentication of users.\n\n\nBY default a a limited number of attribute is present in default\nself-registration form. If more attributes are needed they can be added\nin Registration Management of Organization Configuration. Learn more\nabout Registration Management\n\nhere\n.\n\n\nLocal User Management\n\n\nIn oxTrust, you can add, edit and manage people, groups and user\nattributes and claims to ensure the proper information is released about\nthe right people.\n\n\nPeople\n\n\nTo manage people, navigate to User > Manage People, as shown in the\nscreenshot below.\n\n\n\n\nFrom this interface you can add users and search for specific users.\nBecause the user database can potentially be very large, a value is\nrequired in the search field. In other words, you can not click search\nwith a blank entry to populate all users. If you need to see all users,\nthis would be best performed manually within the Gluu OpenDJ server.\nUpon performing a user search, a list will be populated with all users\nthat match the search, as shown in the screenshot below.\n\n\n\n\nTo edit a user, simply click on any of the hyperlinks associated with\nthat user and you will be taken to a user management interface where you\ncan modify that specific attributes relating to that user as displayed\nbelow.\n\n\n\n\nImport People\n\n\nThis feature allows the Gluu Server Administrator to bulk import users.\nThe user \nxls\n file can be added using the \nAdd\n button.\n\n\n\n\nValidation checking for the added \nxls\n file can be done using the\n\nValidate\n button. If the file is not formatted properly, the server\nwill reject the same with an error as shown below in the screenshot.\n\n\n\n\nGroups\n\n\nOut of the box, the Gluu Server includes one group: Gluu Server manager\ngroup, named: \u201cgluuManager\u201d. Groups can be added and populated as\nneeded. By using the \nManage Groups\n feature, the Gluu Server\nAdministrator can add, delete or modify any group or user within a\ngroup. The list of available groups can be viewed by hitting the\n\nSearch\n button with a blank search box.\n\n\n\nThe Gluu Server Administrator can modify information such as Display\nName, Group Owner, Visibility type etc. The Server Administrator can\nalso add or delete users within existing groups. The group information\nis represented as shown below.\n\n\n\nIf any member of the Organization is required to be added in any\nspecific group, this can be achieved be clicking on the Add Member\nbutton. The flow is \nAdd Member --> Search the name/email of the user\n--> Select the user --> Click OK --> Update.\n\n\n\n\nAttributes\n\n\nAn \u201cActive\u201d attribute list can be seen from the Configuration >\nAttributes section. By default, only active attributes are shown. To see\ninactive attributes, click the \"Show All Attributes\" link above the\ntable. To edit an attribute simply click on the Display Name. Learn more\nabout Attributes management \nhere\n.",
            "title": "Users"
        },
        {
            "location": "/oxtrust/users/#user-management",
            "text": "To keep the Gluu Server up-to-date with the latest user claims, your\norganization can either \"push\" or \"pull\" identity data. In the \"pull\"\nmode, otherwise known as LDAP Synchronization or Cache Refresh, the Gluu\nServer can use an existing LDAP identity source like Microsoft Active\nDirectory as the authoritative source of identity information. If you\n\"push\" identities to the Gluu Server, you can use the JSON/REST SCIM\nAPI. Local user management can also be performed inside oxTrust. Each\nmethod is detailed below.",
            "title": "User Management"
        },
        {
            "location": "/oxtrust/users/#cache-refresh",
            "text": "Cache Refresh was built by Gluu to pull user information from a backend\nActive Directory/LDAP Server. Cache refresh dynamically synchronizes\nuser information from the backend data source to a local LDAP server in\norder to maximize performance. Cache refresh is documented in our configuration section .",
            "title": "Cache Refresh"
        },
        {
            "location": "/oxtrust/users/#self-registration",
            "text": "Self-Registration is done by users on a self-service basis. Since\noxTrust user registration cannot add users to a backend LDAP or Active\nDirectory server, self-registration will only be effective if GluuLDAP\nis used for authentication of users.  BY default a a limited number of attribute is present in default\nself-registration form. If more attributes are needed they can be added\nin Registration Management of Organization Configuration. Learn more\nabout Registration Management here .",
            "title": "Self Registration"
        },
        {
            "location": "/oxtrust/users/#local-user-management",
            "text": "In oxTrust, you can add, edit and manage people, groups and user\nattributes and claims to ensure the proper information is released about\nthe right people.",
            "title": "Local User Management"
        },
        {
            "location": "/oxtrust/users/#people",
            "text": "To manage people, navigate to User > Manage People, as shown in the\nscreenshot below.   From this interface you can add users and search for specific users.\nBecause the user database can potentially be very large, a value is\nrequired in the search field. In other words, you can not click search\nwith a blank entry to populate all users. If you need to see all users,\nthis would be best performed manually within the Gluu OpenDJ server.\nUpon performing a user search, a list will be populated with all users\nthat match the search, as shown in the screenshot below.   To edit a user, simply click on any of the hyperlinks associated with\nthat user and you will be taken to a user management interface where you\ncan modify that specific attributes relating to that user as displayed\nbelow.   Import People  This feature allows the Gluu Server Administrator to bulk import users.\nThe user  xls  file can be added using the  Add  button.   Validation checking for the added  xls  file can be done using the Validate  button. If the file is not formatted properly, the server\nwill reject the same with an error as shown below in the screenshot.",
            "title": "People"
        },
        {
            "location": "/oxtrust/users/#groups",
            "text": "Out of the box, the Gluu Server includes one group: Gluu Server manager\ngroup, named: \u201cgluuManager\u201d. Groups can be added and populated as\nneeded. By using the  Manage Groups  feature, the Gluu Server\nAdministrator can add, delete or modify any group or user within a\ngroup. The list of available groups can be viewed by hitting the Search  button with a blank search box.  The Gluu Server Administrator can modify information such as Display\nName, Group Owner, Visibility type etc. The Server Administrator can\nalso add or delete users within existing groups. The group information\nis represented as shown below.  If any member of the Organization is required to be added in any\nspecific group, this can be achieved be clicking on the Add Member\nbutton. The flow is  Add Member --> Search the name/email of the user\n--> Select the user --> Click OK --> Update.",
            "title": "Groups"
        },
        {
            "location": "/oxtrust/users/#attributes",
            "text": "An \u201cActive\u201d attribute list can be seen from the Configuration >\nAttributes section. By default, only active attributes are shown. To see\ninactive attributes, click the \"Show All Attributes\" link above the\ntable. To edit an attribute simply click on the Display Name. Learn more\nabout Attributes management  here .",
            "title": "Attributes"
        },
        {
            "location": "/oxtrust/personal/",
            "text": "Personal\n\n\nThe Personal section of the oxTrust application, shown below, provides a\nuser with some basic details about their account within the Gluu Server.\nCurrently all information is static, but we plan on developing it out so\nthe user can perform basic self-service profile management.",
            "title": "Personal"
        },
        {
            "location": "/oxtrust/personal/#personal",
            "text": "The Personal section of the oxTrust application, shown below, provides a\nuser with some basic details about their account within the Gluu Server.\nCurrently all information is static, but we plan on developing it out so\nthe user can perform basic self-service profile management.",
            "title": "Personal"
        },
        {
            "location": "/cache-refresh/",
            "text": "Overview\n\n\nVideo Tutorial\n\n\nThings To Remember\n\n\nThings To Know\n\n\nConfiguring Cache Refresh From oxTrust\n\n\nCustomer Backend Key and Attributes\n\n\nSource Backend LDAP Servers\n\n\n\n\n\n\nCache Refresh Whitepages\n\n\n\n\n\n\nOverview\n\n\nCache Refresh is the process of connecting an existing backend LDAP server, like Microsoft Active Directory, with the Gluu Server's local LDAP server. Synching people and attributes from a backend server into the Gluu Server speeds up authentication transactions. It is possible to perform attribute transformations, changing the name of attributes, or even using an interception script to change the values. Transformations are stored in the Gluu LDAP service. \n\n\nVideo Tutorial\n\n\nFor a guided video overview of configuring Cache Refresh, please watch the following three videos:  \n\n- \nPart 1: What is 'Cache Refresh' and How Does it Work?\n   \n\n- \nPart 2: Configuring Cache Refresh in the Gluu Server\n  \n\n- \nPart 3: Managing Authentication After You've Setup Cache Refresh\n    \n\n\nThings To Remember\n\n\nThe Gluu Server supports two LDAP modes: (1) authentication and (2)\nidentity mapping. Only sometimes it is the same LDAP server. To\nsynchronize user accounts from an external LDAP directory server, you\ncan use the built-in oxTrust features for \u201dCache Refresh\u201d, which support\nmapping identities from n number of source directory servers.\n\n\nAfter configuring Cache Refresh, you should give it some time to run,\nand populate the LDAP server. Here are some tips before you get started:\n\n\n\n\n\n\nEnable 'Keep External Person' during CR setup. This will allow your\n  default user 'admin' to log into Gluu Server after initial Cache \n  Refresh iteration. If you do not enable 'Keep External Person', your \n  'admin' user including all other test users will be gone after first \n  Cache Refresh iteration.\n\n\n\n\n\n\nMake sure you are using LDAP authentication, not VDS. You will only\n  need VDS setting if you are using the Radiant Logic Virtual Directory\n  Server.\n\n\n\n\n\n\nCheck the snapshots folder to see if files are being created.\n\n\n\n\n\n\nUse the oxTrust admin to browse users.\n\n\n\n\n\n\nUse the command \nldapsearch\n to check to see if results are starting\n  to come in. The following command will search for the total number of\n  users in the Gluu LDAP:\n\n\n\n\n\n\n# /opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w 'pass_of_ldap_ -b 'ou=people,o=DA....,o=gluu' dn | grep \"dn\\:\" | wc -l\n\n\n\n\n\n\nTry to login with one of these users. We assume that you have also\n  setup your Gluu Server to use the correct LDAP server for\n  authentication.\n\n\n\n\nThings To Know\n\n\nThe deployer needs to know various values of his own backend AD to\nconfigure this part. For example, host & port, bindDN user information,\nbindDN password, Objectclasses, attributes whose information will be\npulled etc.\n\n\nIn addition, the deployer also needs to know generic information of his\nGluu Server's LDAP. By default, the deployer can use 'localhost:1636',\n'cn=directory manager', 'password what he chose during installation',\n'ou=people,o=site' as server information, bindDN, bindDN password and\nbaseDN respectively.\n\n\nAfter collecting this information, the deployer can move forward with\nthe setup of the Cache Refresh engine.\n\n\nConfiguring Cache Refresh From oxTrust\n\n\nFor a successful Cache Refresh setup, please complete the data fields in\nboth the 'Cache Refresh', 'Customer Backend Key/Attributes', and 'Source\nBackend LDAP Servers' sections. It is not necessary enter data in the\n'Inum LDAP Server' tab.\n\n\n\n\n\n\n\n\nRefresh Method:\n The Gluu Server allows the server administrator to\n  apply two types of Cache Refresh mechanisms--(1) VDS Method, and (2) \n  Copy Method.\n\n\n\n\n\n\nVDS Method:\n Use this if the backend is a database such as \nmysql\n.\n\n\n\n\n\n\n\nCopy Method:\n It is strongly recommended to use this method if the backend data source is any kind of Active Directory or LDAP Server.\n\n\n\n\n\n\n\nSource attribute to destination attribute mapping:\n The left entry field defines \n  the attributes from the backend data source. The right entry field \n  defines where it should be rendered/placed as it is delivered to the Gluu Server.\n\n\n\n\n\n\n\nPooling Interval (Minutes):\n It is recommended to be\n  kept higher than 15 minutes.\n\n\n\n\n\n\nServer IP Address:\n Enter the IP address of the Gluu Server in this field. The IP with which the Gluu Server was setup, should be used here.\n\n\n\n\n\n\nSnapshot Folder:\n Every cycle of the Gluu Server Cache Refresh cycle\n  saves both an overall snapshot and a problem-list record on a specified\n  location. This is where the Gluu Server administrator can specify the\n  location.\n\n\n\n\n\n\nSnapshot Count:\n It is recommended\n  to be keep the value to 20 snapshots.\n\n\n\n\n\n\nKeep external persons:\n Check this box to retain the \nadmin\n user.\n\n\n\n\n\n\nCustomer Backend Key and Attributes\n\n\n\n\n\n\n\n\nKey Attribute:\n This is the unique key attribute of backend Active\n  Directory/LDAP Server such as \nSAMAccountname\n for any Active Directory.\n\n\n\n\n\n\nObject Class:\n This contains the object classes of the backend Active\n  Directory/LDAP which have permission to talk to the Gluu Server Cache\n  Refresh such as person, organizationalPerson, user etc.\n\n\n\n\n\n\nSource Attribute:\n This contains the list of attributes which will be\n  pulled and read by the Gluu Server.\n\n\n\n\n\n\nCustom LDAP Filter:\n If there is any custom search required, this\n  filtering mechanism can be used such as \nsn=*\n. The value of this field\n  ensures that every user must contain an attribute named SN.\n\n\n\n\n\n\nSource Backend LDAP Servers\n\n\n\n\nThis section allows the Gluu Server to connect to the backend Active\nDirectory/LDAP server of your organization.\n\n\n\n\n\n\nName:\n Please input \nsource\n as the value.\n\n\n\n\n\n\nUse Anonymous Bind:\n Some customers do now allow username/password\n  connections to their backend server. Enable this option if this applies\n  to your organization.\n\n\n\n\n\n\nBind DN:\n This contains the username of the backend\n  server. You need to use full DN here. As for example,\n  \ncn=gluu,dc=company,dc=org\n.\n\n\n\n\n\n\nUse SSL:\n Use this feature if the backend server allows SSL connectivity.\n\n\n\n\n\n\nMax Connections:\n This value defines the maximum number of\n  connections that are allowed to read the backend Active Directory/LDAP\n  server. It is recommended to keep the value 2 or 3.\n\n\n\n\n\n\nServer:\n This contains the backend Active Directory/LDAP server\n  hostname with port, i.e. \nbackend.organization.com:389\n. If your\n  organization has a failover server, click \nAdd Server\n to add more\n  hostnames with the according port.\n\n\n\n\n\n\nBase DN:\n This contains the location of the Active Directory/LDAP\n  tree of the backend data source.\n\n\n\n\n\n\nEnabled:\n This check-box is to save and push the changes.\n\n\n\n\n\n\nChange Bind Password:\n This can be used for a new password or to\n  change any existing password.\n\n\n\n\n\n\nIf any organization has multiple Active Directory/LDAP server, click on\n\nAdd source LDAP server\n and add the additional server information.\nPlease remember that a \nfailover server\n is not a new server.\n\n\nCache Refresh Whitepages\n\n\nThe following file is prepared by a Gluu Engineer to make Cache refresh mechanism \neasy to understand. Please download and read it if this page is not clear.\n\n\n\n\nCache Refresh Whitepages",
            "title": "Sync LDAP/AD"
        },
        {
            "location": "/cache-refresh/#overview",
            "text": "Cache Refresh is the process of connecting an existing backend LDAP server, like Microsoft Active Directory, with the Gluu Server's local LDAP server. Synching people and attributes from a backend server into the Gluu Server speeds up authentication transactions. It is possible to perform attribute transformations, changing the name of attributes, or even using an interception script to change the values. Transformations are stored in the Gluu LDAP service.",
            "title": "Overview"
        },
        {
            "location": "/cache-refresh/#video-tutorial",
            "text": "For a guided video overview of configuring Cache Refresh, please watch the following three videos:   \n-  Part 1: What is 'Cache Refresh' and How Does it Work?     \n-  Part 2: Configuring Cache Refresh in the Gluu Server    \n-  Part 3: Managing Authentication After You've Setup Cache Refresh",
            "title": "Video Tutorial"
        },
        {
            "location": "/cache-refresh/#things-to-remember",
            "text": "The Gluu Server supports two LDAP modes: (1) authentication and (2)\nidentity mapping. Only sometimes it is the same LDAP server. To\nsynchronize user accounts from an external LDAP directory server, you\ncan use the built-in oxTrust features for \u201dCache Refresh\u201d, which support\nmapping identities from n number of source directory servers.  After configuring Cache Refresh, you should give it some time to run,\nand populate the LDAP server. Here are some tips before you get started:    Enable 'Keep External Person' during CR setup. This will allow your\n  default user 'admin' to log into Gluu Server after initial Cache \n  Refresh iteration. If you do not enable 'Keep External Person', your \n  'admin' user including all other test users will be gone after first \n  Cache Refresh iteration.    Make sure you are using LDAP authentication, not VDS. You will only\n  need VDS setting if you are using the Radiant Logic Virtual Directory\n  Server.    Check the snapshots folder to see if files are being created.    Use the oxTrust admin to browse users.    Use the command  ldapsearch  to check to see if results are starting\n  to come in. The following command will search for the total number of\n  users in the Gluu LDAP:    # /opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w 'pass_of_ldap_ -b 'ou=people,o=DA....,o=gluu' dn | grep \"dn\\:\" | wc -l   Try to login with one of these users. We assume that you have also\n  setup your Gluu Server to use the correct LDAP server for\n  authentication.",
            "title": "Things To Remember"
        },
        {
            "location": "/cache-refresh/#things-to-know",
            "text": "The deployer needs to know various values of his own backend AD to\nconfigure this part. For example, host & port, bindDN user information,\nbindDN password, Objectclasses, attributes whose information will be\npulled etc.  In addition, the deployer also needs to know generic information of his\nGluu Server's LDAP. By default, the deployer can use 'localhost:1636',\n'cn=directory manager', 'password what he chose during installation',\n'ou=people,o=site' as server information, bindDN, bindDN password and\nbaseDN respectively.  After collecting this information, the deployer can move forward with\nthe setup of the Cache Refresh engine.",
            "title": "Things To Know"
        },
        {
            "location": "/cache-refresh/#configuring-cache-refresh-from-oxtrust",
            "text": "For a successful Cache Refresh setup, please complete the data fields in\nboth the 'Cache Refresh', 'Customer Backend Key/Attributes', and 'Source\nBackend LDAP Servers' sections. It is not necessary enter data in the\n'Inum LDAP Server' tab.     Refresh Method:  The Gluu Server allows the server administrator to\n  apply two types of Cache Refresh mechanisms--(1) VDS Method, and (2) \n  Copy Method.    VDS Method:  Use this if the backend is a database such as  mysql .    Copy Method:  It is strongly recommended to use this method if the backend data source is any kind of Active Directory or LDAP Server.    Source attribute to destination attribute mapping:  The left entry field defines \n  the attributes from the backend data source. The right entry field \n  defines where it should be rendered/placed as it is delivered to the Gluu Server.    Pooling Interval (Minutes):  It is recommended to be\n  kept higher than 15 minutes.    Server IP Address:  Enter the IP address of the Gluu Server in this field. The IP with which the Gluu Server was setup, should be used here.    Snapshot Folder:  Every cycle of the Gluu Server Cache Refresh cycle\n  saves both an overall snapshot and a problem-list record on a specified\n  location. This is where the Gluu Server administrator can specify the\n  location.    Snapshot Count:  It is recommended\n  to be keep the value to 20 snapshots.    Keep external persons:  Check this box to retain the  admin  user.",
            "title": "Configuring Cache Refresh From oxTrust"
        },
        {
            "location": "/cache-refresh/#customer-backend-key-and-attributes",
            "text": "Key Attribute:  This is the unique key attribute of backend Active\n  Directory/LDAP Server such as  SAMAccountname  for any Active Directory.    Object Class:  This contains the object classes of the backend Active\n  Directory/LDAP which have permission to talk to the Gluu Server Cache\n  Refresh such as person, organizationalPerson, user etc.    Source Attribute:  This contains the list of attributes which will be\n  pulled and read by the Gluu Server.    Custom LDAP Filter:  If there is any custom search required, this\n  filtering mechanism can be used such as  sn=* . The value of this field\n  ensures that every user must contain an attribute named SN.",
            "title": "Customer Backend Key and Attributes"
        },
        {
            "location": "/cache-refresh/#source-backend-ldap-servers",
            "text": "This section allows the Gluu Server to connect to the backend Active\nDirectory/LDAP server of your organization.    Name:  Please input  source  as the value.    Use Anonymous Bind:  Some customers do now allow username/password\n  connections to their backend server. Enable this option if this applies\n  to your organization.    Bind DN:  This contains the username of the backend\n  server. You need to use full DN here. As for example,\n   cn=gluu,dc=company,dc=org .    Use SSL:  Use this feature if the backend server allows SSL connectivity.    Max Connections:  This value defines the maximum number of\n  connections that are allowed to read the backend Active Directory/LDAP\n  server. It is recommended to keep the value 2 or 3.    Server:  This contains the backend Active Directory/LDAP server\n  hostname with port, i.e.  backend.organization.com:389 . If your\n  organization has a failover server, click  Add Server  to add more\n  hostnames with the according port.    Base DN:  This contains the location of the Active Directory/LDAP\n  tree of the backend data source.    Enabled:  This check-box is to save and push the changes.    Change Bind Password:  This can be used for a new password or to\n  change any existing password.    If any organization has multiple Active Directory/LDAP server, click on Add source LDAP server  and add the additional server information.\nPlease remember that a  failover server  is not a new server.",
            "title": "Source Backend LDAP Servers"
        },
        {
            "location": "/cache-refresh/#cache-refresh-whitepages",
            "text": "The following file is prepared by a Gluu Engineer to make Cache refresh mechanism \neasy to understand. Please download and read it if this page is not clear.   Cache Refresh Whitepages",
            "title": "Cache Refresh Whitepages"
        },
        {
            "location": "/user-management/xlsfile/",
            "text": "Import People from file\n\n\nFile Scructure\n\n\n\n\n\n\nImport People from file\n\n\n\n\nGluu Server allows the administrator to add users from files. This can be accessed from the \nImport People\n button from the \nUsers\n menu.\n\n\n\n\n\n\nClick on the \nAdd\n button to select the file from which the users will be imported. This feature has been tested with a \nxls\n file.\n\n\n\n\n\n\n\n\nThe file needs to be validated before it can be imported. Click on the \nValidate\n button.\n\n\n\n\n\n\n\n\nClick on the \nImport\n button to complete the import of users.\n\n\n\n\nFile Scructure\n\n\nThe file needs to contain the following fields from which the user data will be pulled. Please remember to use the exact spelling as shown here.\n\n\n\n\n\n\nUsername\n\n\n\n\n\n\nFirst Name\n\n\n\n\n\n\nLast Name\n\n\n\n\n\n\nEmail",
            "title": "Import XLS File"
        },
        {
            "location": "/user-management/xlsfile/#import-people-from-file",
            "text": "Gluu Server allows the administrator to add users from files. This can be accessed from the  Import People  button from the  Users  menu.    Click on the  Add  button to select the file from which the users will be imported. This feature has been tested with a  xls  file.     The file needs to be validated before it can be imported. Click on the  Validate  button.     Click on the  Import  button to complete the import of users.",
            "title": "Import People from file"
        },
        {
            "location": "/user-management/xlsfile/#file-scructure",
            "text": "The file needs to contain the following fields from which the user data will be pulled. Please remember to use the exact spelling as shown here.    Username    First Name    Last Name    Email",
            "title": "File Scructure"
        },
        {
            "location": "/cache-refresh/register/",
            "text": "Register User\n\n\nPreparing Gluu Server\n\n\nUser Registration\n\n\n\n\n\n\n\n\n\n\nRegister User\n\n\nGluu Server offers a user registry service for the new users or if the organization lacks\nany LDAP/AD. The registry service is already a part of the Gluu CE Installation but it is \ndisabled by default. The custom-script feature of the Gluu Server is used to prepare the \n\nUser Registration\n.\n\n\n\n\nNote: When possible, we recommend handling user registration in your app locally, then pushing the information to the Gluu Server via \nSCIM 2.0\n. This will give you much more control and flexibility in defining the exact registration process you want users to go through.\n\n\n\n\nPreparing Gluu Server\n\n\nThe user registry requires enabling from the \ncustom scripts\n section\nof the Admin Panel. In brief, the admin has to click on the \nconfiguration\n menu \nand navigate to \nManage Custom Scripts\n.\n\n\n\n\nThe tabs near the top of the page can be used to navigate to different custom scripts. We are concerned about \nthe \nUser Registration\n tab, it is placed third from the left.\n\n\n\n\nThe next step is to enable the user and set the value to \ntrue\n so that the user can login as soon as \nthe registration is complete. So, set the \nenable_user\n property to \ntrue\n.\n\n\n\n\nThe Script can be easily enabled by clicking on the checkbox at the bottom of the page.\n\n\n\n\nUser Registration\n\n\nThe users can register through the user registration link usually available at \n<hostname>/identity/register\n.",
            "title": "Register Users"
        },
        {
            "location": "/cache-refresh/register/#register-user",
            "text": "Gluu Server offers a user registry service for the new users or if the organization lacks\nany LDAP/AD. The registry service is already a part of the Gluu CE Installation but it is \ndisabled by default. The custom-script feature of the Gluu Server is used to prepare the  User Registration .   Note: When possible, we recommend handling user registration in your app locally, then pushing the information to the Gluu Server via  SCIM 2.0 . This will give you much more control and flexibility in defining the exact registration process you want users to go through.",
            "title": "Register User"
        },
        {
            "location": "/cache-refresh/register/#preparing-gluu-server",
            "text": "The user registry requires enabling from the  custom scripts  section\nof the Admin Panel. In brief, the admin has to click on the  configuration  menu \nand navigate to  Manage Custom Scripts .   The tabs near the top of the page can be used to navigate to different custom scripts. We are concerned about \nthe  User Registration  tab, it is placed third from the left.   The next step is to enable the user and set the value to  true  so that the user can login as soon as \nthe registration is complete. So, set the  enable_user  property to  true .   The Script can be easily enabled by clicking on the checkbox at the bottom of the page.",
            "title": "Preparing Gluu Server"
        },
        {
            "location": "/cache-refresh/register/#user-registration",
            "text": "The users can register through the user registration link usually available at  <hostname>/identity/register .",
            "title": "User Registration"
        },
        {
            "location": "/cache-refresh/reset-password/",
            "text": "Reset User Password\n\n\nGluu Server Community Edition comes with a password reset feature, but it is disabled by default.\nThis feature is available for those setups which use Gluu Server's internal LDAP as the user data source.\nAny organization using their own backend LDAP/AD server will require advanced configuration using scritps and\nthe password reset feature.\n\n\nThis document shows how to setup password reset feature.\n\n\n\n\n\n\nEnable \nSelf-Service Password Reset\n from oxTrust \nOrganization Configuration\n menu\n\n\n\n\n\n\n\n\n\nConfigure SMTP Server from oxTrust \nOrganization Configuration\n menu\n\n\n\n\n\n\n\n\n\nNow the password reset link will be available at \nhttps://<hostname>/identity/person/passwordReminder.htm\n\n\n\n\n\n\n\n\nEnter the email address and Gluu Server will send the passsword reset link via email.\n\n\n\n\n\n\n\nThe email link will allow the user to set a new password.",
            "title": "Reset User Password"
        },
        {
            "location": "/cache-refresh/reset-password/#reset-user-password",
            "text": "Gluu Server Community Edition comes with a password reset feature, but it is disabled by default.\nThis feature is available for those setups which use Gluu Server's internal LDAP as the user data source.\nAny organization using their own backend LDAP/AD server will require advanced configuration using scritps and\nthe password reset feature.  This document shows how to setup password reset feature.    Enable  Self-Service Password Reset  from oxTrust  Organization Configuration  menu     Configure SMTP Server from oxTrust  Organization Configuration  menu     Now the password reset link will be available at  https://<hostname>/identity/person/passwordReminder.htm     Enter the email address and Gluu Server will send the passsword reset link via email.    The email link will allow the user to set a new password.",
            "title": "Reset User Password"
        },
        {
            "location": "/user-management/scim/",
            "text": "SCIM 2.0 User Add/Delete\n\n\nAdd User\n\n\nRequired Parameters\n\n\nJSON String\n\n\nUser Object\n\n\n\n\n\n\nDelete User\n\n\nRequired Parameter\n\n\n\n\n\n\nUser Extensions\n\n\n\n\n\n\n\n\n\n\nSCIM 2.0 User Add/Delete\n\n\nThis section outlines how to add/remove user from Gluu Server CE using \nSCIM-Client\n.\n\n\nAdd User\n\n\nThere are two methods to add users:\n\n\n\n\nJSON Sting\n\n\nUser Object\n\n\n\n\nRequired Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuserName\n\n\nThe intended username for the end-user\n\n\n\n\n\n\ngivenName\n\n\nThe first name of the end-user\n\n\n\n\n\n\nfamilyName\n\n\nThe last name of the end-user\n\n\n\n\n\n\ndisplayName\n\n\nThe formatted first name followed by last name\n\n\n\n\n\n\ngroups\n\n\nOptional parameter if the user is added to any specific group\n\n\n\n\n\n\n\n\nJSON String\n\n\nThe user is added using a JSON object string using the required parameters; however it is possible to add more parameters. The following is an example of a JSON string used to add a user.\n\n\n        Scim2Client client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        String createJson = {\"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\"externalId\":\"12345\",\"userName\":\"newUser\",\"name\":{\"givenName\":\"json\",\"familyName\":\"json\",\"middleName\":\"N/A\",\"honorificPrefix\":\"\",\"honorificSuffix\":\"\"},\"displayName\":\"json json\",\"nickName\":\"json\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"json@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"json2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynytest_user\",\"type\":\"Skype\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Test Group\",\"value\":\"@!9B22.5F33.7D8D.B890!0001!880B.F95A!0003!60B7\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"cert-12345\"}]}\n        ScimResponse response = client.createPersonString(createJson, MediaType.APPLICATION_JSON);\n\n\n\n\nUser Object\n\n\nThe following code snippet uses the User object.\n\n\n        User user = new User();\n\n        Name name = new Name();\n        name.setGivenName(\"Given Name\");\n        name.setMiddleName(\"Middle Name\");\n        name.setFamilyName(\"Family Name\");\n        user.setName(name);\n\n        user.setActive(true);\n\n        user.setUserName(\"newUser_\" +  + new Date().getTime());\n        user.setPassword(\"secret\");\n        user.setDisplayName(\"Display Name\");\n        user.setNickName(\"Nickname\");\n        user.setProfileUrl(\"\");\n        user.setLocale(\"en\");\n        user.setPreferredLanguage(\"US_en\");\n\n        List<Email> emails = new ArrayList<Email>();\n        Email email = new Email();\n        email.setPrimary(true);\n        email.setValue(\"a@b.com\");\n        email.setDisplay(\"a@b.com\");\n        email.setType(Email.Type.WORK);\n        email.setReference(\"\");\n        emails.add(email);\n        user.setEmails(emails);\n\n        List<PhoneNumber> phoneNumbers = new ArrayList<PhoneNumber>();\n        PhoneNumber phoneNumber = new PhoneNumber();\n        phoneNumber.setPrimary(true);\n        phoneNumber.setValue(\"123-456-7890\");\n        phoneNumber.setDisplay(\"123-456-7890\");\n        phoneNumber.setType(PhoneNumber.Type.WORK);\n        phoneNumber.setReference(\"\");\n        phoneNumbers.add(phoneNumber);\n        user.setPhoneNumbers(phoneNumbers);\n\n        List<Address> addresses = new ArrayList<Address>();\n        Address address = new Address();\n        address.setPrimary(true);\n        address.setValue(\"test\");\n        address.setDisplay(\"My Address\");\n        address.setType(Address.Type.WORK);\n        address.setReference(\"\");\n        address.setStreetAddress(\"My Street\");\n        address.setLocality(\"My Locality\");\n        address.setPostalCode(\"12345\");\n        address.setRegion(\"My Region\");\n        address.setCountry(\"My Country\");\n        address.setFormatted(\"My Formatted Address\");\n        addresses.add(address);\n        user.setAddresses(addresses);\n\n        ScimResponse response = client.createUser(user, new String[]{});\n        System.out.println(\"response body = \" + response.getResponseBodyString());\n\n        assertEquals(response.getStatusCode(), 201, \"Could not add user, status != 201\");\n\n        User userCreated = Util.toUser(response, client.getUserExtensionSchema());\n        String id = userCreated.getId();\n\n\n\n\nDelete User\n\n\nTo delete a user only the id (the LDAP \ninum\n) is needed.\n\n\n        ScimResponse response = client.deletePerson(id);\n        assertEquals(response.getStatusCode(), 200, \"User could not be deleted, status != 200\");\n\n\n\n\nRequired Parameter\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nThe LDAP \ninum\n of the user to be deleted\n\n\n\n\n\n\n\n\nUser Extensions\n\n\nSCIM 2.0 User Extensions implementation in Gluu server is very simple. Just set the custom attribute's \nSCIM Attribute\n parameter to \ntrue\n in oxTrust GUI and it will be recognized as a User extension. It is a must to create new custom attributes to be used as User extensions for a cleaner implementation.\n\n\n\n\nYou can verify the User extensions via the \nSchema\n endpoint:\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Schemas/urn:ietf:params:scim:schemas:extension:gluu:2.0:User\n\n\n\n\nNow for the actual code, you can refer to the unit tests in SCIM-Client:\n\n\n\n\nUserExtensionsObjectTest\n\n\nUserExtensionsJsonTest",
            "title": "SCIM 2.0 Add/Delete User"
        },
        {
            "location": "/user-management/scim/#scim-20-user-adddelete",
            "text": "This section outlines how to add/remove user from Gluu Server CE using  SCIM-Client .",
            "title": "SCIM 2.0 User Add/Delete"
        },
        {
            "location": "/user-management/scim/#add-user",
            "text": "There are two methods to add users:   JSON Sting  User Object   Required Parameters     Parameter  Description      userName  The intended username for the end-user    givenName  The first name of the end-user    familyName  The last name of the end-user    displayName  The formatted first name followed by last name    groups  Optional parameter if the user is added to any specific group     JSON String  The user is added using a JSON object string using the required parameters; however it is possible to add more parameters. The following is an example of a JSON string used to add a user.          Scim2Client client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        String createJson = {\"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\"externalId\":\"12345\",\"userName\":\"newUser\",\"name\":{\"givenName\":\"json\",\"familyName\":\"json\",\"middleName\":\"N/A\",\"honorificPrefix\":\"\",\"honorificSuffix\":\"\"},\"displayName\":\"json json\",\"nickName\":\"json\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"json@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"json2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynytest_user\",\"type\":\"Skype\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Test Group\",\"value\":\"@!9B22.5F33.7D8D.B890!0001!880B.F95A!0003!60B7\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"cert-12345\"}]}\n        ScimResponse response = client.createPersonString(createJson, MediaType.APPLICATION_JSON);  User Object  The following code snippet uses the User object.          User user = new User();\n\n        Name name = new Name();\n        name.setGivenName(\"Given Name\");\n        name.setMiddleName(\"Middle Name\");\n        name.setFamilyName(\"Family Name\");\n        user.setName(name);\n\n        user.setActive(true);\n\n        user.setUserName(\"newUser_\" +  + new Date().getTime());\n        user.setPassword(\"secret\");\n        user.setDisplayName(\"Display Name\");\n        user.setNickName(\"Nickname\");\n        user.setProfileUrl(\"\");\n        user.setLocale(\"en\");\n        user.setPreferredLanguage(\"US_en\");\n\n        List<Email> emails = new ArrayList<Email>();\n        Email email = new Email();\n        email.setPrimary(true);\n        email.setValue(\"a@b.com\");\n        email.setDisplay(\"a@b.com\");\n        email.setType(Email.Type.WORK);\n        email.setReference(\"\");\n        emails.add(email);\n        user.setEmails(emails);\n\n        List<PhoneNumber> phoneNumbers = new ArrayList<PhoneNumber>();\n        PhoneNumber phoneNumber = new PhoneNumber();\n        phoneNumber.setPrimary(true);\n        phoneNumber.setValue(\"123-456-7890\");\n        phoneNumber.setDisplay(\"123-456-7890\");\n        phoneNumber.setType(PhoneNumber.Type.WORK);\n        phoneNumber.setReference(\"\");\n        phoneNumbers.add(phoneNumber);\n        user.setPhoneNumbers(phoneNumbers);\n\n        List<Address> addresses = new ArrayList<Address>();\n        Address address = new Address();\n        address.setPrimary(true);\n        address.setValue(\"test\");\n        address.setDisplay(\"My Address\");\n        address.setType(Address.Type.WORK);\n        address.setReference(\"\");\n        address.setStreetAddress(\"My Street\");\n        address.setLocality(\"My Locality\");\n        address.setPostalCode(\"12345\");\n        address.setRegion(\"My Region\");\n        address.setCountry(\"My Country\");\n        address.setFormatted(\"My Formatted Address\");\n        addresses.add(address);\n        user.setAddresses(addresses);\n\n        ScimResponse response = client.createUser(user, new String[]{});\n        System.out.println(\"response body = \" + response.getResponseBodyString());\n\n        assertEquals(response.getStatusCode(), 201, \"Could not add user, status != 201\");\n\n        User userCreated = Util.toUser(response, client.getUserExtensionSchema());\n        String id = userCreated.getId();",
            "title": "Add User"
        },
        {
            "location": "/user-management/scim/#delete-user",
            "text": "To delete a user only the id (the LDAP  inum ) is needed.          ScimResponse response = client.deletePerson(id);\n        assertEquals(response.getStatusCode(), 200, \"User could not be deleted, status != 200\");  Required Parameter     Parameter  Description      id  The LDAP  inum  of the user to be deleted",
            "title": "Delete User"
        },
        {
            "location": "/user-management/scim/#user-extensions",
            "text": "SCIM 2.0 User Extensions implementation in Gluu server is very simple. Just set the custom attribute's  SCIM Attribute  parameter to  true  in oxTrust GUI and it will be recognized as a User extension. It is a must to create new custom attributes to be used as User extensions for a cleaner implementation.   You can verify the User extensions via the  Schema  endpoint:  <domain root>/identity/seam/resource/restv1/scim/v2/Schemas/urn:ietf:params:scim:schemas:extension:gluu:2.0:User   Now for the actual code, you can refer to the unit tests in SCIM-Client:   UserExtensionsObjectTest  UserExtensionsJsonTest",
            "title": "User Extensions"
        },
        {
            "location": "/multi-factor/intro/",
            "text": "Authentication in the Gluu Server\n\n\nUsing the  Gluu Server, you can define the business logic for complex multi-step authentication workflows, providing SSO for people using smart cards, tokens, mobile or biometric authentication mechanisms. You don't have to chose one multi-factor authentication technology. You can have multiple authentication mechanisms active at the same time--Web or mobile clients can request a certain authentication type by using standard OpenID Connect request parameters.\n\n\nA number of multi-factor authentication scripts are shipped in the Gluu Server by default, including support for FIDO U2F tokens, Gluu's free mobile two-factor application \nSuper Gluu\n, certificate authentication, and Duo Security. \n\n\nGluu leverages its interception script infrastructure for multi-factor authentication--\ncustom jython interception scripts\n can call third party authentication services via API's or vendor libraries. Sophisticated authentication logic can implement adaptive authentication. For example, you can add extra authentication steps based on contextual information, such as fraud scores, location, or browser profiling. You can also customize the look and feel of a web authentication: html, css, images and javascript can be externalized and managed by your organization. \n\n\nAnother feature of Gluu Server authentication is that you can define \"Levels\", enabling you to define the relative strength of several authentication workflows.",
            "title": "Intro"
        },
        {
            "location": "/multi-factor/intro/#authentication-in-the-gluu-server",
            "text": "Using the  Gluu Server, you can define the business logic for complex multi-step authentication workflows, providing SSO for people using smart cards, tokens, mobile or biometric authentication mechanisms. You don't have to chose one multi-factor authentication technology. You can have multiple authentication mechanisms active at the same time--Web or mobile clients can request a certain authentication type by using standard OpenID Connect request parameters.  A number of multi-factor authentication scripts are shipped in the Gluu Server by default, including support for FIDO U2F tokens, Gluu's free mobile two-factor application  Super Gluu , certificate authentication, and Duo Security.   Gluu leverages its interception script infrastructure for multi-factor authentication-- custom jython interception scripts  can call third party authentication services via API's or vendor libraries. Sophisticated authentication logic can implement adaptive authentication. For example, you can add extra authentication steps based on contextual information, such as fraud scores, location, or browser profiling. You can also customize the look and feel of a web authentication: html, css, images and javascript can be externalized and managed by your organization.   Another feature of Gluu Server authentication is that you can define \"Levels\", enabling you to define the relative strength of several authentication workflows.",
            "title": "Authentication in the Gluu Server"
        },
        {
            "location": "/multi-factor/duo/",
            "text": "Duo Security\n\n\nThis is the person authentication module for oxAuth enabling \nDuo\n for \nuser authentication.\n\n\nOverview\n\n\nThere are a few properties in the \nDUO\n Authentication Script.\n\n\n\n\n\n\n\n\nProperty\n\n\nStatus\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nduo_creds_file\n\n\nMandatory\n\n\nPath to ikey, skey, akey\n\n\n/etc/certs/duo_creds.json\n\n\n\n\n\n\nduo_host\n\n\nMandatory\n\n\nURL of the DUO API Server\n\n\napi-random.duosecurity.com\n\n\n\n\n\n\naudit_attribute\n\n\nOptional\n\n\nAttribute to determine user group\n\n\nmemberOf\n\n\n\n\n\n\nduo_group\n\n\nOptional\n\n\nAttribute to enable DUO for specific user\n\n\nmemberOf\n\n\n\n\n\n\naudit_group\n\n\nOptional\n\n\nNotify administrator via email upon user login\n\n\nmemberOf\n\n\n\n\n\n\naudit_group_email\n\n\nOptional\n\n\nAdministrator email\n\n\nadmin@organization.com\n\n\n\n\n\n\n\n\nInstallation\n\n\nThe following steps prepare the Gluu Server for \nDUO\n integration.\n\n\nConfigure DUO Account\n\n\n\n\n\n\nSign up for a Duo account.\n\n\n\n\n\n\nLog in to the Duo Admin Panel and navigate to Applications.\n\n\n\n\n\n\nClick Protect an Application and locate Web SDK in the applications list. Click Protect this Application to get your integration key, secret key, and API hostname.\n\n\n\n\n\n\nGenerate an \nakey\n value for your instance. \nClick here to know more \n\n\n\n\n\n\nFor additional info on Duo's Web SDK check \nthis atricle\n \n\n\nConfigure CE Chroot\n\n\n\n\nPrepare the DUO credential file \n/etc/certs/duo_creds.json\n with \nikey, akey & skey\n\n\n\n\nConfigure oxTrust\n\n\nFollow the steps below to configure the \nDUO\n module in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\n\nScroll down to \nDUO\n authentication script\n\n\n\n\n\n\n\nChange the value to \nduo_host\n to your API\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\n\nChange the default authentication method to \nDUO",
            "title": "DUO"
        },
        {
            "location": "/multi-factor/duo/#duo-security",
            "text": "This is the person authentication module for oxAuth enabling  Duo  for \nuser authentication.",
            "title": "Duo Security"
        },
        {
            "location": "/multi-factor/duo/#overview",
            "text": "There are a few properties in the  DUO  Authentication Script.     Property  Status  Description  Example      duo_creds_file  Mandatory  Path to ikey, skey, akey  /etc/certs/duo_creds.json    duo_host  Mandatory  URL of the DUO API Server  api-random.duosecurity.com    audit_attribute  Optional  Attribute to determine user group  memberOf    duo_group  Optional  Attribute to enable DUO for specific user  memberOf    audit_group  Optional  Notify administrator via email upon user login  memberOf    audit_group_email  Optional  Administrator email  admin@organization.com",
            "title": "Overview"
        },
        {
            "location": "/multi-factor/duo/#installation",
            "text": "The following steps prepare the Gluu Server for  DUO  integration.  Configure DUO Account    Sign up for a Duo account.    Log in to the Duo Admin Panel and navigate to Applications.    Click Protect an Application and locate Web SDK in the applications list. Click Protect this Application to get your integration key, secret key, and API hostname.    Generate an  akey  value for your instance.  Click here to know more     For additional info on Duo's Web SDK check  this atricle    Configure CE Chroot   Prepare the DUO credential file  /etc/certs/duo_creds.json  with  ikey, akey & skey   Configure oxTrust  Follow the steps below to configure the  DUO  module in the oxTrust Admin GUI.    Go to Manage Custom Scripts     Scroll down to  DUO  authentication script    Change the value to  duo_host  to your API    Enable the script by ticking the check box     Change the default authentication method to  DUO",
            "title": "Installation"
        },
        {
            "location": "/multi-factor/u2f/",
            "text": "U2F\n\n\nThis script enables multi-factor authentication with any FIDO U2F device. Learn more about the U2F standard \nhere\n. For a list of U2F compliant devices for sale, \ncheck Amazon\n. \n\n\nSome well known U2F device manufacturers include:\n\n- \nYubico\n \n\n- \nHyperFIDO\n \n\n- \nFeitian Technologies\n    \n\n\nOverview\n\n\nThe script has the following properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nu2f_server_uri\n\n\nURL of the u2f server\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\nu2f_server_metadata_uri\n\n\nURL of the u2f server metadata\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\n\n\nInstallation\n\n\nConfigure oxTrust\n\n\nFollow the steps below to configure the [DUO][duo] module in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\nClick on the Person Authentication tab\n\n\n\n\n\n\n\nSelect the \nU2F script\n\n\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\nClick Update \n\n\n\n\n\n\n\nChange the Default authentication method to U2F",
            "title": "U2F"
        },
        {
            "location": "/multi-factor/u2f/#u2f",
            "text": "This script enables multi-factor authentication with any FIDO U2F device. Learn more about the U2F standard  here . For a list of U2F compliant devices for sale,  check Amazon .   Some well known U2F device manufacturers include: \n-  Yubico   \n-  HyperFIDO   \n-  Feitian Technologies",
            "title": "U2F"
        },
        {
            "location": "/multi-factor/u2f/#overview",
            "text": "The script has the following properties     Property  Description  Example      u2f_server_uri  URL of the u2f server  https://idp.gluu.info    u2f_server_metadata_uri  URL of the u2f server metadata  https://idp.gluu.info",
            "title": "Overview"
        },
        {
            "location": "/multi-factor/u2f/#installation",
            "text": "Configure oxTrust  Follow the steps below to configure the [DUO][duo] module in the oxTrust Admin GUI.    Go to Manage Custom Scripts    Click on the Person Authentication tab    Select the  U2F script     Enable the script by ticking the check box    Click Update     Change the Default authentication method to U2F",
            "title": "Installation"
        },
        {
            "location": "/multi-factor/oxpush2/",
            "text": "oxPush2\n\n\nThis script enables use of the free open source \noxPush2 multi-factor authentication\n mechanism.\n\n\nOverview\n\n\nThe script has the following properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\napplication_id\n\n\nURL of the identity server\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\nauthentication_mode\n\n\nDetermine factor of authentication\n\n\ntwo_step\n\n\n\n\n\n\ncredentials_file\n\n\nJSON file for oxPush2\n\n\n/etc/certs/oxpush2_creds.json\n\n\n\n\n\n\n\n\nInstallation\n\n\nConfigure oxTrust\n\n\nFollow the steps below to configure the oxPush2 module in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manager Custom Scripts\n\n\n\n\n\n\n\nClick on the Person Authentication tab\n\n\n\n\n\n\n\nSelect the \noxPush2 script\n\n\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\nClick Update \n\n\n\n\n\n\n\nChange the oxTrust  authentication method to oxPush2",
            "title": "oxPush2"
        },
        {
            "location": "/multi-factor/oxpush2/#oxpush2",
            "text": "This script enables use of the free open source  oxPush2 multi-factor authentication  mechanism.",
            "title": "oxPush2"
        },
        {
            "location": "/multi-factor/oxpush2/#overview",
            "text": "The script has the following properties     Property  Description  Example      application_id  URL of the identity server  https://idp.gluu.info    authentication_mode  Determine factor of authentication  two_step    credentials_file  JSON file for oxPush2  /etc/certs/oxpush2_creds.json",
            "title": "Overview"
        },
        {
            "location": "/multi-factor/oxpush2/#installation",
            "text": "Configure oxTrust  Follow the steps below to configure the oxPush2 module in the oxTrust Admin GUI.    Go to Manager Custom Scripts    Click on the Person Authentication tab    Select the  oxPush2 script     Enable the script by ticking the check box    Click Update     Change the oxTrust  authentication method to oxPush2",
            "title": "Installation"
        },
        {
            "location": "/multi-factor/wikid/",
            "text": "Wikid Authentication\n\n\nThis is the person authentication module for \nWikid Authentication\n.\n\n\nOverview\n\n\nThe module has the following mandatory properties\n\n\n\n\n\n\n\n\nPeoperty\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nwikid_server_host\n\n\nIP address of WIKID server\n\n\n192.168.1.1\n\n\n\n\n\n\nwikid_server_port\n\n\nTCP port for WIKID serve\n\n\n[8388][default 8388]\n\n\n\n\n\n\nwikid_cert_path\n\n\nPath to the PKCS12 certificate file\n\n\n/etc/certs/wikid.p12\n\n\n\n\n\n\nwikid_cert_pass\n\n\nPassphrase for  PKCS12 file\n\n\npassphrase\n\n\n\n\n\n\nwikid_ca_store_path\n\n\n[CA][ca] for WAS server certificate\n\n\n/etc/certs/CACertStore.dat\n\n\n\n\n\n\nwikid_ca_store_pass\n\n\nPassphrase to secure the CA store file\n\n\npassphrase\n\n\n\n\n\n\nwikid_server_code\n\n\nServer domain 12 digit code\n\n\n135711131719\n\n\n\n\n\n\n\n\nInstallation\n\n\nConfigure CE Chroot\n\n\nThe following libraries must be present in the \n$TOMCAT_HOME/endorsed\n folder.\n\n\n\n\nhttps://www.wikidsystems.com/webdemo/wClient-3.5.0.jar\n\n\nhttp://central.maven.org/maven2/org/jdom/jdom/1.1.3/jdom-1.1.3.jar\n\n\nhttp://central.maven.org/maven2/log4j/log4j/1.2.17/log4j-1.2.17.jar\n\n\nhttp://central.maven.org/maven2/com/thoughtworks/xstream/xstream/1.4.8/xstream-1.4.8.jar\n\n\n\n\nFor more informatiaon about the wClient Library, please see \nthis page\n\n\nToken Client\n\n\nWikid Authentication requires \ntoken client\n. Please install and configure it for \nfirst time use. The \ndemo\n explains how to do that.\n\n\nConfigure oxTrust\n\n\nFollow the steps below to configure the Wikid module in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\nClick on the add custom script button\n\n\n\n\n\n\n\nFill up the form and add the \nWikid Authentication Script\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\nClick Update\n\n\n\n\n\n\n\nChange the Default Authentication method to Wikid",
            "title": "Wikid"
        },
        {
            "location": "/multi-factor/wikid/#wikid-authentication",
            "text": "This is the person authentication module for  Wikid Authentication .",
            "title": "Wikid Authentication"
        },
        {
            "location": "/multi-factor/wikid/#overview",
            "text": "The module has the following mandatory properties     Peoperty  Description  Example      wikid_server_host  IP address of WIKID server  192.168.1.1    wikid_server_port  TCP port for WIKID serve  [8388][default 8388]    wikid_cert_path  Path to the PKCS12 certificate file  /etc/certs/wikid.p12    wikid_cert_pass  Passphrase for  PKCS12 file  passphrase    wikid_ca_store_path  [CA][ca] for WAS server certificate  /etc/certs/CACertStore.dat    wikid_ca_store_pass  Passphrase to secure the CA store file  passphrase    wikid_server_code  Server domain 12 digit code  135711131719",
            "title": "Overview"
        },
        {
            "location": "/multi-factor/wikid/#installation",
            "text": "Configure CE Chroot  The following libraries must be present in the  $TOMCAT_HOME/endorsed  folder.   https://www.wikidsystems.com/webdemo/wClient-3.5.0.jar  http://central.maven.org/maven2/org/jdom/jdom/1.1.3/jdom-1.1.3.jar  http://central.maven.org/maven2/log4j/log4j/1.2.17/log4j-1.2.17.jar  http://central.maven.org/maven2/com/thoughtworks/xstream/xstream/1.4.8/xstream-1.4.8.jar   For more informatiaon about the wClient Library, please see  this page  Token Client  Wikid Authentication requires  token client . Please install and configure it for \nfirst time use. The  demo  explains how to do that.  Configure oxTrust  Follow the steps below to configure the Wikid module in the oxTrust Admin GUI.    Go to Manage Custom Scripts    Click on the add custom script button    Fill up the form and add the  Wikid Authentication Script    Enable the script by ticking the check box    Click Update    Change the Default Authentication method to Wikid",
            "title": "Installation"
        },
        {
            "location": "/multi-factor/cert/",
            "text": "Certificate Authentication\n\n\nGluu Server CE offers a person authentication module enabling Certificate Authentication.\n\n\nOverview\n\n\nThe image below contains the design diagram for this module.\n\n\n\n\nThe script has a few properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nAllowed Values\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nchain_cert_file_path\n\n\nmandatory property pointing to certificate chains in [pem][pem] format\n\n\nfile path\n\n\n/etc/certs/chain_cert.pem\n\n\n\n\n\n\nmap_user_cert\n\n\nspecifies if the script should map new user to local account\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_generic_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_path_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_oscp_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_crl_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\ncrl_max_response_size\n\n\nspecifies the maximum allowed size of [CRL][crl] response\n\n\nInteger > 0\n\n\n2\n\n\n\n\n\n\n\n\nInstallation\n\n\nThe following steps prepare the GLuu Server for Certificate Authentication.\n\n\nConfigure oxTrust\n\n\nFollow the steps below to configure the certificate authentication in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\nClick on the add custom script button\n\n\n\n\n\n\n\nFill up the from and add the \nCertificate Authentication Script\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\nChange the default authentication method to Certificate/Cert.",
            "title": "Certificate"
        },
        {
            "location": "/multi-factor/cert/#certificate-authentication",
            "text": "Gluu Server CE offers a person authentication module enabling Certificate Authentication.",
            "title": "Certificate Authentication"
        },
        {
            "location": "/multi-factor/cert/#overview",
            "text": "The image below contains the design diagram for this module.   The script has a few properties:     Property  Description  Allowed Values  example      chain_cert_file_path  mandatory property pointing to certificate chains in [pem][pem] format  file path  /etc/certs/chain_cert.pem    map_user_cert  specifies if the script should map new user to local account  true/false  true    use_generic_validator  enable/disable specific certificate validation  true/false  false    use_path_validator  enable/disable specific certificate validation  true/false  true    use_oscp_validator  enable/disable specific certificate validation  true/false  false    use_crl_validator  enable/disable specific certificate validation  true/false  false    crl_max_response_size  specifies the maximum allowed size of [CRL][crl] response  Integer > 0  2",
            "title": "Overview"
        },
        {
            "location": "/multi-factor/cert/#installation",
            "text": "The following steps prepare the GLuu Server for Certificate Authentication.  Configure oxTrust  Follow the steps below to configure the certificate authentication in the oxTrust Admin GUI.    Go to Manage Custom Scripts    Click on the add custom script button    Fill up the from and add the  Certificate Authentication Script    Enable the script by ticking the check box    Change the default authentication method to Certificate/Cert.",
            "title": "Installation"
        },
        {
            "location": "/customize/social-login-google/",
            "text": "Configure Google\n\n\nIn order to call Google API's, you need to register as a developer and\ncreate client credentials. Here are some\n\ninstructions\n\nfor these steps.\n\n\nThe first thing you'll need to do is Create a Project on Google to obtain\nclient credentials. Click \"Create project\" and enter your desired\nproject name.\n\n\n\n\nThen click on your newly created project from the listing on the\ndashboard, and under the Credentials section, create a new \"OAuth2 2.0\nclient ID\". \n\n\n\n\nGoogle will ask you to configure your consent screen, to add your logo\nand other information displayed to the user to authorize Google to\nrelease information.\n\n\n\n\nFill out the form...\n\n\n\n\nNow you're ready to create the credentials. Enter \"Authorized JavaScript\norigins\". It should be the uri of your Gluu Server--for example\n\nhttps://idp.example.com\n.\n\n\n\n\nGoogle will display the client-id and the according secret ... ignore\nit. Instead, download the JSON file which you are going to upload into\nyour Gluu Server, next.\n\n\n\n\nMove this file to the location \n/opt/tomcat/conf/google.json\n. The JSON\nfile will look something like this example (no... these data are not\nvalid credentials!):\n\n\n{\n  \"web\": {\n    \"client_id\": \"7a64e55f-724d4e8c91823d5f1f18a0b2.apps.googleusercontent.com\",\n    \"auth_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/auth\",\n    \"token_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/token\",\n    \"auth_provider_x509_cert_url\": \"https:\\/\\/www.googleapis.com\\/oauth2\\/v1\\/certs\",\n    \"client_secret\": \"bb76a2c99be94e35b874\",\n    \"javascript_origins\": [\n      \"https:\\/\\/brookie.gluu.info\"\n    ]\n  }\n}\n\n\n\n\nThe last step is to enable Google+ API's:\n\n\n\n\nNavigate back to the Google API \nconsole\n\n\nSelect project and enter project name\n\n\nOpen new project \"API & auth -> API\" menu item in configuration navigation tree\n\n\nClick \"Google+ API\"\n\n\nClick \"Enable API\" button\n\n\n\n\nConfigure Gluu Server\n\n\nLogin to oxTrust, and navigate to \"Configure Custom Scripts\".\n\n\n\n\nAt the bottom of the page, click on the link to \"Add custom script\nconfiguration\".\n\n\n\n\nIn the main body of the \"Custom Script\" section, paste the \ncode from\ngithub\n.\n\n\nYou'll also need to add some custom properties:\n\n\n\n\ngplus_client_secrets_file\n: \n/opt/tomcat/conf/google.json\n\n\ngplus_deployment_type\n: enroll\n\n\ngplus_remote_attributes_list\n: email, given_name, family_name, and locale\n\n\n\n\ngplus_local_attributes_list\n: uid, mail, givenName, sn, cn, preferredLanguage\n\n\n\n\n\n\ngplus_client_secrets_file\n - It is a mandatory property that holds\n   the path to the application configuration file downloaded from Google\n   console for application. An example is \n/etc/certs/gplus_client_secrets.json\n.\n   These are the single steps needed to get it:\n    a) Log into: \nhttps://console.developers.google.com/project\n\n    b) Click \"Create project\" and enter project name\n    c) Open new project \"API & auth -> Credentials\" menu item in configuration navigation tree\n    d) Click \"Add credential\" with type \"OAuth 2.0 client ID\"\n    e) Select \"Web application\" application type\n    f) Enter \"Authorized JavaScript origins\". It should be CE server DNS\n       name, for example \nhttps://gluu.info\n.\n    g) Click \"Create\" and Click \"OK\" in next dialog\n    h) Click \"Download JSON\" in order to download\n       \ngplus_client_secrets.json\n file.\n    Also it is mandatory to enable Google+ API:\n    a) Log into \nhttps://console.developers.google.com/project\n\n    b) Select project and enter project name\n    c) Open new project \"API & auth -> API\" menu item in configuration navigation tree\n    d) Click \"Google+ API\"\n    e) Click \"Enable API\" button\n\n\n\n\n\n\ngplus_deployment_type\n - Specify the deployment mode. It is an\noptional property. If this property isn't specified the script tries to\nfind the user in the local LDAP by 'subject_identifier' claim specified\nin id_token. If this property has a 'map' value the script allows to map\n'subject_identifier' to the local user account. If this property has an\n'enroll' value the script adds a new user to the local LDAP with status\n'active'. In order to map the IDP attributes to the local attributes it\nuses properties from both gplus_remote_attributes_list and\ngplus_local_attributes_list. The allowed values are map and enroll.\n\n\n\n\n\n\ngplus_remote_attributes_list\n - Comma-separated list of attribute\nnames (user claims) that Google+ returns which map to local attributes\nin the \ngplus_local_attributes_list\n property. It is mandatory only if\n\ngplus_deployment_type\n is set to 'enroll'.\n\n\n\n\n\n\ngplus_local_attributes_list\n - Comma-separated list of Gluu Server\nLDAP attribute names that are mapped to Google user claims from the\n\ngplus_remote_attributes_list\n property. It is mandatory only if\n\ngplus_deployment_type\n is set to 'enroll'.\n\n\n\n\n\n\nextension_module\n - Optional property to specify the full path of\nan external module that implements two methods:\n\n\n\n\n\n\n    # This is called when the authentication script initializes\n    def init(conf_attr):\n        # Code here\n        return True/False\n\n    # This is called after authentication\n    def postLogin(conf_attr, user):\n        # Code here\n        return True    # or return False\n\n\n\n\n\n\ngplus_client_configuration_attribute\n - Optional property to\nspecify the client entry attribute name which can override\n\ngplus_client_secrets_file file\n content. It can be used in cases when\nall clients should use a separate \ngplus_client_secrets.json\n\nconfiguration.\n\n\n\n\nTesting\n\n\nOne simple way to test the configuration is to use oxTrust. In the\n\"Configure Authentication\" dropdown menu, select \"Google\" (or whatever\nyou entered as the \"Name\" of the custom authentication script--as the\ndefault authentication method.\n\n\n\n\nAfter you login and logout, you should be presented with a new login\nform that has the Google login button:\n\n\n\n\nAfter clicking the Google login button, you are presented for\nauthorization--Google needs to make sure its ok to release attributes to\nthe Gluu Server:\n\n\n\n\nIf the script doesn't work, and you locked yourself out of oxTrust,\ndon't worry! You can create an LDIF file, for example \nrevert.ldif\n, to\nset back the default authentication method, like this:\n\n\ndn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal\n\n\n\n\noxAuthenticationMode corresponds to the 'Name' of the customer\nauthentication script in oxTrust. Use \ninternal\n to revert to the\ndefault LDAP authentication. You'll have to change the \ninum\n with the\n\ninum\n of your installation. You can find it using ldapsearch like this:\n\n\n/opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" inum\n\n\n\n\n~/.pw\n is a file with your Directory Manager password. If you don't\nremember it, try to find it using \ngrep\n: \n\n\ngrep ldapPass= /install/community-edition-setup/setup.properties.last\n\n\n\n\nOnce your LDIF looks ok, then use \nldapmodify\n to revert back to\npassword authentication:\n\n\n/opt/opendj/bin/ldapmodify -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -f revert.ldif\n\n\n\n\nIf things go wrong, it can leave the sessions in your browser in a bad\nstate. If things get really weird, remove the cookies in your browser\nfor the hostname of your Gluu Server.",
            "title": "Google Authentication"
        },
        {
            "location": "/customize/social-login-google/#configure-google",
            "text": "In order to call Google API's, you need to register as a developer and\ncreate client credentials. Here are some instructions \nfor these steps.  The first thing you'll need to do is Create a Project on Google to obtain\nclient credentials. Click \"Create project\" and enter your desired\nproject name.   Then click on your newly created project from the listing on the\ndashboard, and under the Credentials section, create a new \"OAuth2 2.0\nclient ID\".    Google will ask you to configure your consent screen, to add your logo\nand other information displayed to the user to authorize Google to\nrelease information.   Fill out the form...   Now you're ready to create the credentials. Enter \"Authorized JavaScript\norigins\". It should be the uri of your Gluu Server--for example https://idp.example.com .   Google will display the client-id and the according secret ... ignore\nit. Instead, download the JSON file which you are going to upload into\nyour Gluu Server, next.   Move this file to the location  /opt/tomcat/conf/google.json . The JSON\nfile will look something like this example (no... these data are not\nvalid credentials!):  {\n  \"web\": {\n    \"client_id\": \"7a64e55f-724d4e8c91823d5f1f18a0b2.apps.googleusercontent.com\",\n    \"auth_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/auth\",\n    \"token_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/token\",\n    \"auth_provider_x509_cert_url\": \"https:\\/\\/www.googleapis.com\\/oauth2\\/v1\\/certs\",\n    \"client_secret\": \"bb76a2c99be94e35b874\",\n    \"javascript_origins\": [\n      \"https:\\/\\/brookie.gluu.info\"\n    ]\n  }\n}  The last step is to enable Google+ API's:   Navigate back to the Google API  console  Select project and enter project name  Open new project \"API & auth -> API\" menu item in configuration navigation tree  Click \"Google+ API\"  Click \"Enable API\" button",
            "title": "Configure Google"
        },
        {
            "location": "/customize/social-login-google/#configure-gluu-server",
            "text": "Login to oxTrust, and navigate to \"Configure Custom Scripts\".   At the bottom of the page, click on the link to \"Add custom script\nconfiguration\".   In the main body of the \"Custom Script\" section, paste the  code from\ngithub .  You'll also need to add some custom properties:   gplus_client_secrets_file :  /opt/tomcat/conf/google.json  gplus_deployment_type : enroll  gplus_remote_attributes_list : email, given_name, family_name, and locale   gplus_local_attributes_list : uid, mail, givenName, sn, cn, preferredLanguage    gplus_client_secrets_file  - It is a mandatory property that holds\n   the path to the application configuration file downloaded from Google\n   console for application. An example is  /etc/certs/gplus_client_secrets.json .\n   These are the single steps needed to get it:\n    a) Log into:  https://console.developers.google.com/project \n    b) Click \"Create project\" and enter project name\n    c) Open new project \"API & auth -> Credentials\" menu item in configuration navigation tree\n    d) Click \"Add credential\" with type \"OAuth 2.0 client ID\"\n    e) Select \"Web application\" application type\n    f) Enter \"Authorized JavaScript origins\". It should be CE server DNS\n       name, for example  https://gluu.info .\n    g) Click \"Create\" and Click \"OK\" in next dialog\n    h) Click \"Download JSON\" in order to download\n        gplus_client_secrets.json  file.\n    Also it is mandatory to enable Google+ API:\n    a) Log into  https://console.developers.google.com/project \n    b) Select project and enter project name\n    c) Open new project \"API & auth -> API\" menu item in configuration navigation tree\n    d) Click \"Google+ API\"\n    e) Click \"Enable API\" button    gplus_deployment_type  - Specify the deployment mode. It is an\noptional property. If this property isn't specified the script tries to\nfind the user in the local LDAP by 'subject_identifier' claim specified\nin id_token. If this property has a 'map' value the script allows to map\n'subject_identifier' to the local user account. If this property has an\n'enroll' value the script adds a new user to the local LDAP with status\n'active'. In order to map the IDP attributes to the local attributes it\nuses properties from both gplus_remote_attributes_list and\ngplus_local_attributes_list. The allowed values are map and enroll.    gplus_remote_attributes_list  - Comma-separated list of attribute\nnames (user claims) that Google+ returns which map to local attributes\nin the  gplus_local_attributes_list  property. It is mandatory only if gplus_deployment_type  is set to 'enroll'.    gplus_local_attributes_list  - Comma-separated list of Gluu Server\nLDAP attribute names that are mapped to Google user claims from the gplus_remote_attributes_list  property. It is mandatory only if gplus_deployment_type  is set to 'enroll'.    extension_module  - Optional property to specify the full path of\nan external module that implements two methods:        # This is called when the authentication script initializes\n    def init(conf_attr):\n        # Code here\n        return True/False\n\n    # This is called after authentication\n    def postLogin(conf_attr, user):\n        # Code here\n        return True    # or return False   gplus_client_configuration_attribute  - Optional property to\nspecify the client entry attribute name which can override gplus_client_secrets_file file  content. It can be used in cases when\nall clients should use a separate  gplus_client_secrets.json \nconfiguration.",
            "title": "Configure Gluu Server"
        },
        {
            "location": "/customize/social-login-google/#testing",
            "text": "One simple way to test the configuration is to use oxTrust. In the\n\"Configure Authentication\" dropdown menu, select \"Google\" (or whatever\nyou entered as the \"Name\" of the custom authentication script--as the\ndefault authentication method.   After you login and logout, you should be presented with a new login\nform that has the Google login button:   After clicking the Google login button, you are presented for\nauthorization--Google needs to make sure its ok to release attributes to\nthe Gluu Server:   If the script doesn't work, and you locked yourself out of oxTrust,\ndon't worry! You can create an LDIF file, for example  revert.ldif , to\nset back the default authentication method, like this:  dn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal  oxAuthenticationMode corresponds to the 'Name' of the customer\nauthentication script in oxTrust. Use  internal  to revert to the\ndefault LDAP authentication. You'll have to change the  inum  with the inum  of your installation. You can find it using ldapsearch like this:  /opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" inum  ~/.pw  is a file with your Directory Manager password. If you don't\nremember it, try to find it using  grep :   grep ldapPass= /install/community-edition-setup/setup.properties.last  Once your LDIF looks ok, then use  ldapmodify  to revert back to\npassword authentication:  /opt/opendj/bin/ldapmodify -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -f revert.ldif  If things go wrong, it can leave the sessions in your browser in a bad\nstate. If things get really weird, remove the cookies in your browser\nfor the hostname of your Gluu Server.",
            "title": "Testing"
        },
        {
            "location": "/faq/general/",
            "text": "How do I change hostname and/or IP address and/or listening port of my Gluu Server?\n\n\nHow do I set my port to something other than 443?\n\n\nHow do I customize the IDP to ask for Email instead of Username for login?\n\n\nHow do I add additional roles to oxTrust (Gluu's web UI) and/or change permissions set for existing ones?\n\n\nHow do I properly reboot my Gluu Server?\n\n\nHow do I perform matinenace on my Gluu Server?\n\n\n\n\n\n\nHow do I change hostname and/or IP address and/or listening port of my Gluu Server?\n\n\nThere is no easy way to change any of those once your instance is already deployed. At very least it would require to modify a lot of settings stored in LDAP configuration entries, in Apache/Tomcat configuration, and perhaps in custom authentication scripts' sources too (if you plan to use one). If you need to change an IP address, we recommend doing a fresh install on a new VM.\n\n\nAside from using static public ip address, you could opt to use some static ip address from private range of your internal network, and to employ some sort of reverse proxy, or load balancer, or simple port forwarding on another internet-facing device that will forward connections to your instance in that network. When it's set up this way you can freely change your public ip address on this internet-facing intermediary device (just will need to make sure your DNS records will be updated accordingly each time).\n\n\nHow do I set my port to something other than 443?\n\n\nPorts other then 443 are not really supported. Port 443 is the Apache Web Server. But you'd have to update all the metadata too, like the config data in \nhttps://hostname/.well-known/openid-configuration\n and also the SAML metadata. And even then you still might face bugs.\n\n\nRecommendation: use a virtual ethernet interface and a different IP address on your server rather than trying to update the port to a different port.\n\n\nHow do I customize the IDP to ask for Email instead of Username for login?\n\n\nIn oxTrust navigate to the Manage Authentication tab within the Configuration section. By default the Primary Key and Local Key are set to \nuid\n. Set those values to \nmail\n and now your Gluu Server will expect email as the identifier instead of username.\n\n\n\n\nNow you will want to update your IDP login page to display \nEmail Address\n as the requested identifier. In order to do that you need to modify the \nlogin.xhtml\n file, which is located in \n/opt/tomcat/webapps/oxauth/\n. Insert \nEmail Address\n as the value for \noutputLabel\n; this snippet is under the \ndialog\n class. See the screenshot below. \n\n\n\n\nHow do I add additional roles to oxTrust (Gluu's web UI) and/or change permissions set for existing ones?\n\n\nTo accomplish something like that, you would need to implement new dynamic rules in Jboss Seam, and then implement those rules in the UI, as current \"manager\" and \"user\" roles are defined within \nsecurity.drl\n and hard-coded in OxTrust. During login, it checks for the manager group's membership, and adds the role to the web context. If you'll still opt to change this framework, we won't be able to provide you any help regarding this currently.\n\n\noxTrust was designed to be a tool for administrators. There are some basic user features, but we don't really encourage usage of oxTrust as a user facing application.\n\n\nA better approach might be to write a standalone application that calls the SCIM API's or even the LDAP API's with just the data that you want to expose, then make that new application an \nOpenid Connect\n Relying Party (so authentication of users attempting to use it could be handled by your Gluu instance).\n\n\nHow do I properly reboot my Gluu Server?\n\n\nFollow these instructions to properly reboot your Gluu Server:\n\n\n\n\nStop Gluu Server container first:  \n\n   a) For CentOS 6.x / RHEL6.x / Ubuntu 14.04: \nservice gluu-server-2.x.x stop\n      \n\n   b) For CentOS 7.x / RHEL7.x: \n/sbin/gluu-server-2.x.x stop\n       \n\n\nReboot the server    \n\n\nAfter return, check if Gluu Server container started or not:   \n\n   a) For CentOS 6.x / RHEL6.x / Ubuntu 14.04: \ngluu-server-2.x.x status\n  \n\n   b) For CentOS 7.x / RHEL7.x: \n/sbin/gluu-server-2.x.x status\n     \n\n\nIf the Gluu Server didn't start, start it:   \n\n   a) For CentOS 6.x / RHEL6.x / Ubuntu 14.04: \nservice gluu-server-2.x.x start\n   \n\n   b) For CentOS 7.x / RHEL7.x: \n/sbin/gluu-server-2.x.x start\n           \n\n\nWait 10 mins while the server is prepared.\u00a0Check the login from your web browser.     \n\n\n\n\nHow do I perform matinenace on my Gluu Server?\n\n\nSometimes it's required to push system updates (not an OS upgrade) in your Gluu Server VM. Here are a few steps to get you started:\n\n   - Backup your whole VM. \n\n   - Login to your Gluu Server VM.   \n\n   - Become root.   \n\n   - Login to the Gluu Server container using the following command: \nservice gluu-server-x.x.x login\n (for RHEL/CentOS 7 users:     \n/sbin/gluu-server-x.x.x login\n)  \n\n   - Push updates inside the container using the following command: \nyum update\n (for RPM based systems) or \napt-get update\n (for DEB based systems).  \n\n   - Exit the container.  \n\n   - Stop Gluu-Server container using the following command: \nservice gluu-server-x.x.x stop\n (for RHEL/CentOS 7users:     \n/sbin/gluu-server-x.x.x stop\n). \n\n   - Perform \nyum update\n or \napt-get update\n in the host system. \n\n   - Do a soft reboot. \n\n   - After the VM returns from a succesful reboot, check the system status:  \n\n     - See if your Gluu Server container started by running the following command: \nservice gluu-server-x.x.x status\n.  \n\n     - Login to the container.   \n\n     - See if there is any issue in the \nwrapper.log\n file or in the \nidp-process.log\n file (if you are using SAML).  \n\n     - Wait for 10 minutes.  \n\n     - Check Gluu Server Web UI.",
            "title": "General"
        },
        {
            "location": "/faq/general/#how-do-i-change-hostname-andor-ip-address-andor-listening-port-of-my-gluu-server",
            "text": "There is no easy way to change any of those once your instance is already deployed. At very least it would require to modify a lot of settings stored in LDAP configuration entries, in Apache/Tomcat configuration, and perhaps in custom authentication scripts' sources too (if you plan to use one). If you need to change an IP address, we recommend doing a fresh install on a new VM.  Aside from using static public ip address, you could opt to use some static ip address from private range of your internal network, and to employ some sort of reverse proxy, or load balancer, or simple port forwarding on another internet-facing device that will forward connections to your instance in that network. When it's set up this way you can freely change your public ip address on this internet-facing intermediary device (just will need to make sure your DNS records will be updated accordingly each time).",
            "title": "How do I change hostname and/or IP address and/or listening port of my Gluu Server?"
        },
        {
            "location": "/faq/general/#how-do-i-set-my-port-to-something-other-than-443",
            "text": "Ports other then 443 are not really supported. Port 443 is the Apache Web Server. But you'd have to update all the metadata too, like the config data in  https://hostname/.well-known/openid-configuration  and also the SAML metadata. And even then you still might face bugs.  Recommendation: use a virtual ethernet interface and a different IP address on your server rather than trying to update the port to a different port.",
            "title": "How do I set my port to something other than 443?"
        },
        {
            "location": "/faq/general/#how-do-i-customize-the-idp-to-ask-for-email-instead-of-username-for-login",
            "text": "In oxTrust navigate to the Manage Authentication tab within the Configuration section. By default the Primary Key and Local Key are set to  uid . Set those values to  mail  and now your Gluu Server will expect email as the identifier instead of username.   Now you will want to update your IDP login page to display  Email Address  as the requested identifier. In order to do that you need to modify the  login.xhtml  file, which is located in  /opt/tomcat/webapps/oxauth/ . Insert  Email Address  as the value for  outputLabel ; this snippet is under the  dialog  class. See the screenshot below.",
            "title": "How do I customize the IDP to ask for Email instead of Username for login?"
        },
        {
            "location": "/faq/general/#how-do-i-add-additional-roles-to-oxtrust-gluus-web-ui-andor-change-permissions-set-for-existing-ones",
            "text": "To accomplish something like that, you would need to implement new dynamic rules in Jboss Seam, and then implement those rules in the UI, as current \"manager\" and \"user\" roles are defined within  security.drl  and hard-coded in OxTrust. During login, it checks for the manager group's membership, and adds the role to the web context. If you'll still opt to change this framework, we won't be able to provide you any help regarding this currently.  oxTrust was designed to be a tool for administrators. There are some basic user features, but we don't really encourage usage of oxTrust as a user facing application.  A better approach might be to write a standalone application that calls the SCIM API's or even the LDAP API's with just the data that you want to expose, then make that new application an  Openid Connect  Relying Party (so authentication of users attempting to use it could be handled by your Gluu instance).",
            "title": "How do I add additional roles to oxTrust (Gluu's web UI) and/or change permissions set for existing ones?"
        },
        {
            "location": "/faq/general/#how-do-i-properly-reboot-my-gluu-server",
            "text": "Follow these instructions to properly reboot your Gluu Server:   Stop Gluu Server container first:   \n   a) For CentOS 6.x / RHEL6.x / Ubuntu 14.04:  service gluu-server-2.x.x stop        \n   b) For CentOS 7.x / RHEL7.x:  /sbin/gluu-server-2.x.x stop          Reboot the server      After return, check if Gluu Server container started or not:    \n   a) For CentOS 6.x / RHEL6.x / Ubuntu 14.04:  gluu-server-2.x.x status    \n   b) For CentOS 7.x / RHEL7.x:  /sbin/gluu-server-2.x.x status        If the Gluu Server didn't start, start it:    \n   a) For CentOS 6.x / RHEL6.x / Ubuntu 14.04:  service gluu-server-2.x.x start     \n   b) For CentOS 7.x / RHEL7.x:  /sbin/gluu-server-2.x.x start              Wait 10 mins while the server is prepared.\u00a0Check the login from your web browser.",
            "title": "How do I properly reboot my Gluu Server?"
        },
        {
            "location": "/faq/general/#how-do-i-perform-matinenace-on-my-gluu-server",
            "text": "Sometimes it's required to push system updates (not an OS upgrade) in your Gluu Server VM. Here are a few steps to get you started: \n   - Backup your whole VM.  \n   - Login to your Gluu Server VM.    \n   - Become root.    \n   - Login to the Gluu Server container using the following command:  service gluu-server-x.x.x login  (for RHEL/CentOS 7 users:      /sbin/gluu-server-x.x.x login )   \n   - Push updates inside the container using the following command:  yum update  (for RPM based systems) or  apt-get update  (for DEB based systems).   \n   - Exit the container.   \n   - Stop Gluu-Server container using the following command:  service gluu-server-x.x.x stop  (for RHEL/CentOS 7users:      /sbin/gluu-server-x.x.x stop ).  \n   - Perform  yum update  or  apt-get update  in the host system.  \n   - Do a soft reboot.  \n   - After the VM returns from a succesful reboot, check the system status:   \n     - See if your Gluu Server container started by running the following command:  service gluu-server-x.x.x status .   \n     - Login to the container.    \n     - See if there is any issue in the  wrapper.log  file or in the  idp-process.log  file (if you are using SAML).   \n     - Wait for 10 minutes.   \n     - Check Gluu Server Web UI.",
            "title": "How do I perform matinenace on my Gluu Server?"
        },
        {
            "location": "/faq/troubleshooting/",
            "text": "Logs\n\n\nConnectivity Issues?\n\n\nDNS names not resolving!\n\n\n\n\n\n\nLocked Out?\n\n\nForgot the admin password!\n\n\nAdd admin for Gluu server\n\n\nRevert Authentication Method\n\n\nNo admin access after Cache Refresh?\n\n\n\n\n\n\nLock users?\n\n\nLock Account using Custom Scripts\n\n\n\n\n\n\n\n\n\n\nLogs\n\n\nWhen it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--your \nserver logs\n are the best place to gather relevant information.\n\n\nConnectivity Issues?\n\n\nDNS names not resolving!\n\n\nIt is possible that even after configuring everything there is a \nDNS\n resolve error in Gluu Server.\nThe reason is the \nDNS\n used inside the chroot container; the \ndns\n used by the container is the Google DNS servers \nand the \nDNS\n for the host OS is not used. Therefore to fix this issue:\n\n\n\n\nChange the DNS inside the container by editing the \n/etc/resolv.conf\n file and adding the DNS used by your organization\n\n\n\n\nLocked Out?\n\n\nForgot the admin password!\n\n\nOh no, its been a few days since you booted your test Gluu Server, and\nyou can't remember the admin password. No worries, the Gluu Server\nstores this information in the file\n\n/install/community-edition-setup/setup.properties.last\n under the\nproperty \nldapPass\n. Retrieve the data using this command:\n\n\n# grep ldapPass= /install/community-edition-setup/*.last\n\n\n\n\nOf course for a production installation, you should remove this file.\nYou wouldn't want to have your admin password sitting on the filesystem!\n\n\nAdd admin for Gluu server\n\n\nPlease follow these steps to restore your Gluu admin account (you will\nprobably need to substitute actual port, bind names and hostnames with\nones used by your installation):\n\n\n1) Login into Gluu's chroot environment with the command below:\n\n\n# service gluu-server login\n\n\n\n\n2) Run this command:\n\n\n#/opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu gluuGroupType=gluuManagerGroup 1.1\n\n\n\n\nand remember the displayed dn of the Gluu Manager Group for future use.\n\n\n3) Run this command:\n\n\n# /opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu ou=people 1.1\n\n\n\n\nand remember the displayed dn of the People ou for future use.\n\n\n4) While staying in the chrooted environment, create the file\n\n~/add_user.ldif\n using your favorite text editor, and copy the\nfollowing lines to it:\n\n\ndn: inum=tempadmin,ou=people,o=@!F9CC.D762.4778.1032!0001!2C72.BB87,o=gluu\nchangetype: add\nuid: tempadmin\nobjectClass: gluuPerson\nobjectClass: top\ngivenName: tempadmin\nsn: tempadmin\ninum: tempadmin\ngluuStatus: active\nuserPassword: 1q2w3e\n\n\n\n\nPlease note the string's segment marked with bold: you will have to\nsubstitute it with dn of your own People ou which you've acquired in\nstep 3).\n\n\n5) Run this command:\n\n\n# /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_user.ldif\n\n\n\n\nThis will create new user tempadmin with attributes provided via file\ncreated in step 4).\n\n\n6) Now create file \nadd_2_group.ldif\n in your home (\"~/\") directory and\ncopy the following lines to it:\n\n\ndn: inum=@!F9CC.D762.4778.1032!0001!2C72.BB87!0003!60B7,ou=groups,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\nchangetype: modify\nadd: member\nmember: inum=tempadmin,ou=people,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\n\n\n\n\nAgain, please note the strings' segment marked with bold: you will have\nto substitute contents of the \"dn:\" string with dn of your own Gluu\nManager Group which you've acquired in step 2), and for \"member:\" string\nyou will have to use the dn of tempadmin user (the one you already\nspecified in the 1st line of the file in step 4).\n\n\n7) Run this command:\n\n\n# /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_2_group.ldif\n\n\n\n\nThis will add tempadmin user to the IdP managers group and you can then\nlogin and assign another user to act as admin.\n\n\nRevert Authentication Method\n\n\nIt is not unlikely that you will lock yourself out of Gluu Server while testing the authentication script, if there is any problem in it. In such a case the following method can be used to revert back the older authentication method.\n\n\n\n\nRun the following command to collect the \ninum\n for the Gluu Server installation.\n\n\n\n\n/opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory \nmanager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" \noxAuthenticationMode\n\n\n\n\nCreate a \nLDIF\n file with the contents below:\n\n\n\n\ndn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal\n\n\n\n\nAs an example, we shall call this file \nchangeAuth.ldif\n.\n\n\nNote:\n Replace the \ninum\n from the example above with the \ninum\n of the Gluu Server from the \nldapsearch\n command.\n\n\n\n\nReplace the the authentication mode using \nldapmodify\n command.\n\n\n\n\n`/opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/changeAuth.ldif\n\n\nNo admin access after Cache Refresh?\n\n\nAdd the password for your admin account to \n~/.pw\n and then use the commands below to add yourself as an admin.\n\n\n# set this to your actual user name\nexport newgluuadmin='myusername'\n\n# this is the file that will hold the info to be imported\nexport ldiffile='addManagers.ldif'\n\n# run this and verify that the output is for your account\n/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.\n 3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nuid: myusername\ngivenName: John\nsn: Doe\ncn: John Doe\n\n\n\n\nNow you can run these commands to make the file above:\n\n\nhead -n1 /opt/opendj/ldif/groups.ldif > $ldiffile\necho 'changetype: modify' >> $ldiffile\necho 'add: member' >> $ldiffile\necho \"member: $(/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn |grep -A1 dn |cut -d ' ' -f 2- | sed 'N;s/\\n//')\" >> $ldiffile\n\n\n\n\nThe resulting ldif will look like this:\n\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0003!60B7,ou=groups,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nchangetype: modify\nadd: member\nmember: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\n\n\n\n\nOnce the ldif looks right, run this to grant your account admin rights in Gluu:\n\n\n/opt/opendj/bin/ldapmodify -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -f addManagers.ldif\n\n\n\n\nLog into the web interface and pick up where you left off :)\n\n\nLock users?\n\n\nLock Account using Custom Scripts\n\n\nThis section will help in locking a user account using custom scripts in solutions where it is\nmandatory to limit access trials to a specific number i.e. lock user account if the user fails to\nproduce correct password 3 times.\n\n\nGluu Server makes it easy by using a single attribute to enable/disable user. The \ngluuStatus\n attribute\nis used to enable/disable the user. This attribute holds the value \nacive/inactive\n and setting \ngluuStatus=inactive\n\nany user can be locked from Gluu Server.\n\n\nThe following snippet will help you find the user by UID and set the \ngluuStatus\n attribute to inactive.\n\n\nfrom org.xdi.oxauth.service import UserService\n...\n# Find user entry by UID\nuser_uid = credentials.getUser().getUserId()\nfind_user_by_uid = userService.getUser(user_uid)\n\n# Update user entry and persist it\nfind_user_by_uid.setAttribute(\"gluuStatus\", \"inactive\")\nuserService.updateUser(find_user_by_uid)\n\n\n\n\nThe users can be activated again by clicking on the update button in oxTrust.",
            "title": "Troubleshooting"
        },
        {
            "location": "/faq/troubleshooting/#logs",
            "text": "When it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--your  server logs  are the best place to gather relevant information.",
            "title": "Logs"
        },
        {
            "location": "/faq/troubleshooting/#connectivity-issues",
            "text": "",
            "title": "Connectivity Issues?"
        },
        {
            "location": "/faq/troubleshooting/#dns-names-not-resolving",
            "text": "It is possible that even after configuring everything there is a  DNS  resolve error in Gluu Server.\nThe reason is the  DNS  used inside the chroot container; the  dns  used by the container is the Google DNS servers \nand the  DNS  for the host OS is not used. Therefore to fix this issue:   Change the DNS inside the container by editing the  /etc/resolv.conf  file and adding the DNS used by your organization",
            "title": "DNS names not resolving!"
        },
        {
            "location": "/faq/troubleshooting/#locked-out",
            "text": "",
            "title": "Locked Out?"
        },
        {
            "location": "/faq/troubleshooting/#forgot-the-admin-password",
            "text": "Oh no, its been a few days since you booted your test Gluu Server, and\nyou can't remember the admin password. No worries, the Gluu Server\nstores this information in the file /install/community-edition-setup/setup.properties.last  under the\nproperty  ldapPass . Retrieve the data using this command:  # grep ldapPass= /install/community-edition-setup/*.last  Of course for a production installation, you should remove this file.\nYou wouldn't want to have your admin password sitting on the filesystem!",
            "title": "Forgot the admin password!"
        },
        {
            "location": "/faq/troubleshooting/#add-admin-for-gluu-server",
            "text": "Please follow these steps to restore your Gluu admin account (you will\nprobably need to substitute actual port, bind names and hostnames with\nones used by your installation):  1) Login into Gluu's chroot environment with the command below:  # service gluu-server login  2) Run this command:  #/opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu gluuGroupType=gluuManagerGroup 1.1  and remember the displayed dn of the Gluu Manager Group for future use.  3) Run this command:  # /opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu ou=people 1.1  and remember the displayed dn of the People ou for future use.  4) While staying in the chrooted environment, create the file ~/add_user.ldif  using your favorite text editor, and copy the\nfollowing lines to it:  dn: inum=tempadmin,ou=people,o=@!F9CC.D762.4778.1032!0001!2C72.BB87,o=gluu\nchangetype: add\nuid: tempadmin\nobjectClass: gluuPerson\nobjectClass: top\ngivenName: tempadmin\nsn: tempadmin\ninum: tempadmin\ngluuStatus: active\nuserPassword: 1q2w3e  Please note the string's segment marked with bold: you will have to\nsubstitute it with dn of your own People ou which you've acquired in\nstep 3).  5) Run this command:  # /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_user.ldif  This will create new user tempadmin with attributes provided via file\ncreated in step 4).  6) Now create file  add_2_group.ldif  in your home (\"~/\") directory and\ncopy the following lines to it:  dn: inum=@!F9CC.D762.4778.1032!0001!2C72.BB87!0003!60B7,ou=groups,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\nchangetype: modify\nadd: member\nmember: inum=tempadmin,ou=people,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu  Again, please note the strings' segment marked with bold: you will have\nto substitute contents of the \"dn:\" string with dn of your own Gluu\nManager Group which you've acquired in step 2), and for \"member:\" string\nyou will have to use the dn of tempadmin user (the one you already\nspecified in the 1st line of the file in step 4).  7) Run this command:  # /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_2_group.ldif  This will add tempadmin user to the IdP managers group and you can then\nlogin and assign another user to act as admin.",
            "title": "Add admin for Gluu server"
        },
        {
            "location": "/faq/troubleshooting/#revert-authentication-method",
            "text": "It is not unlikely that you will lock yourself out of Gluu Server while testing the authentication script, if there is any problem in it. In such a case the following method can be used to revert back the older authentication method.   Run the following command to collect the  inum  for the Gluu Server installation.   /opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory \nmanager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" \noxAuthenticationMode   Create a  LDIF  file with the contents below:   dn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal  As an example, we shall call this file  changeAuth.ldif .  Note:  Replace the  inum  from the example above with the  inum  of the Gluu Server from the  ldapsearch  command.   Replace the the authentication mode using  ldapmodify  command.   `/opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/changeAuth.ldif",
            "title": "Revert Authentication Method"
        },
        {
            "location": "/faq/troubleshooting/#no-admin-access-after-cache-refresh",
            "text": "Add the password for your admin account to  ~/.pw  and then use the commands below to add yourself as an admin.  # set this to your actual user name\nexport newgluuadmin='myusername'\n\n# this is the file that will hold the info to be imported\nexport ldiffile='addManagers.ldif'\n\n# run this and verify that the output is for your account\n/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.\n 3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nuid: myusername\ngivenName: John\nsn: Doe\ncn: John Doe  Now you can run these commands to make the file above:  head -n1 /opt/opendj/ldif/groups.ldif > $ldiffile\necho 'changetype: modify' >> $ldiffile\necho 'add: member' >> $ldiffile\necho \"member: $(/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn |grep -A1 dn |cut -d ' ' -f 2- | sed 'N;s/\\n//')\" >> $ldiffile  The resulting ldif will look like this:  dn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0003!60B7,ou=groups,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nchangetype: modify\nadd: member\nmember: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu  Once the ldif looks right, run this to grant your account admin rights in Gluu:  /opt/opendj/bin/ldapmodify -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -f addManagers.ldif  Log into the web interface and pick up where you left off :)",
            "title": "No admin access after Cache Refresh?"
        },
        {
            "location": "/faq/troubleshooting/#lock-users",
            "text": "",
            "title": "Lock users?"
        },
        {
            "location": "/faq/troubleshooting/#lock-account-using-custom-scripts",
            "text": "This section will help in locking a user account using custom scripts in solutions where it is\nmandatory to limit access trials to a specific number i.e. lock user account if the user fails to\nproduce correct password 3 times.  Gluu Server makes it easy by using a single attribute to enable/disable user. The  gluuStatus  attribute\nis used to enable/disable the user. This attribute holds the value  acive/inactive  and setting  gluuStatus=inactive \nany user can be locked from Gluu Server.  The following snippet will help you find the user by UID and set the  gluuStatus  attribute to inactive.  from org.xdi.oxauth.service import UserService\n...\n# Find user entry by UID\nuser_uid = credentials.getUser().getUserId()\nfind_user_by_uid = userService.getUser(user_uid)\n\n# Update user entry and persist it\nfind_user_by_uid.setAttribute(\"gluuStatus\", \"inactive\")\nuserService.updateUser(find_user_by_uid)  The users can be activated again by clicking on the update button in oxTrust.",
            "title": "Lock Account using Custom Scripts"
        },
        {
            "location": "/how-to/automate-schema/",
            "text": "Automating Schema for Custom Attribute\n\n\nGenerating Schema\n\n\n\n\n\n\n\n\n\n\nAutomating Schema for Custom Attribute\n\n\nThis how-to is created to guide through the process of automating a schema for a custom attribute.\nThe creation of a custom schema will automaticaly create the custom attribute and it can be populated \nfrom the backend easily through Cache Refresh mechanism without creating the custom attribute again in a \nnew installation.\n\n\nGenerating Schema\n\n\nThe schema for the custom attribute should be created as a \n.ldif\n file and added to the \n/opt/opendj/config/schema/\n folder.\nThe new schema shall be named \n102-custom.ldif\n as an example. \n\n\n\n\n\n\nIt is assumed that the attribute is already created and used by Gluu Server. If you have not created the custom attribute, please do so. The schema for dynamically created attributes are stored in the \n100-user.ldif\n file under \n/opt/opendj/config/schema\n folder by default. \n\n\n\n\n\n\nThe attribute metadata is stred inside the opendj LDAP tree under \nou-attributes, o=org-inum, o=gluu\n. Please find the ldif entries that corresponds to the custom schema and export them into one file.\n\n\n\n\n\n\nCreate a template using \n%(x)s\n where x is the name of the python key in a dictionary. For example: if there is one attribute, and a schema file is created named \n102-custom.ldif\n the contents would look like something below:\n\n\n\n\n\n\n    dn: inum=%(org_inum)s!0005!%(attr1_id)s,ou=attributes,o=%(org_inum)s,o=gluu\n    objectClass: gluuAttribute\n    objectClass: top\n    description: Specifies the person's affiliation\n    displayName: eduPersonScopedAffiliation\n    gluuAttributeEditType: admin\n    gluuAttributeName: eduPersonScopedAffiliation\n    gluuAttributeOrigin: eduPerson\n    gluuAttributeType: string\n    gluuAttributeViewType: admin\n    gluuStatus: inactive\n    inum: inum=%(org_inum)s!0005!%(attr1_id)s\n    urn: oid:1.3.6.1.4.1.5923.1.1.1.9\n\n\n\n\n\n\nA python script can be used to update the right organization ID for the \n.ldif\n file. For example:\n\n\n\n\n    #!/usr/bin/python\n\n    import uuid\n\n    f = open(\"102-custom.ldif.template\")\n    ldif = f.read()\n    f.close()\n\n    def getQuad():\n        return str(uuid.uuid4())[:4].upper()\n\n    d = {}\n    d[\"org_inum\"] = \"@!43A9.4B45.403D.3B0A!0001!0D87.EAF2\"\n    d[\"attr1_id\"] = \"%s.%s\" % (getQuad(), getQuad())\n\n    new_ldif = ldif % d\n    f = open(\"102-custom.ldif\", \"w\")\n    f.write(new_ldif)\n    f.close()\n\n\n\n\nNote:\n This guide is a introductory guide only, there might be some tweaks necessary custom solutions.\n\n\n\n\nNow you should be able to use the \n102-custom.ldif\n file to auto generate the custom attribute in future installations.",
            "title": "Automate Custom Schema"
        },
        {
            "location": "/how-to/automate-schema/#automating-schema-for-custom-attribute",
            "text": "This how-to is created to guide through the process of automating a schema for a custom attribute.\nThe creation of a custom schema will automaticaly create the custom attribute and it can be populated \nfrom the backend easily through Cache Refresh mechanism without creating the custom attribute again in a \nnew installation.",
            "title": "Automating Schema for Custom Attribute"
        },
        {
            "location": "/how-to/automate-schema/#generating-schema",
            "text": "The schema for the custom attribute should be created as a  .ldif  file and added to the  /opt/opendj/config/schema/  folder.\nThe new schema shall be named  102-custom.ldif  as an example.     It is assumed that the attribute is already created and used by Gluu Server. If you have not created the custom attribute, please do so. The schema for dynamically created attributes are stored in the  100-user.ldif  file under  /opt/opendj/config/schema  folder by default.     The attribute metadata is stred inside the opendj LDAP tree under  ou-attributes, o=org-inum, o=gluu . Please find the ldif entries that corresponds to the custom schema and export them into one file.    Create a template using  %(x)s  where x is the name of the python key in a dictionary. For example: if there is one attribute, and a schema file is created named  102-custom.ldif  the contents would look like something below:        dn: inum=%(org_inum)s!0005!%(attr1_id)s,ou=attributes,o=%(org_inum)s,o=gluu\n    objectClass: gluuAttribute\n    objectClass: top\n    description: Specifies the person's affiliation\n    displayName: eduPersonScopedAffiliation\n    gluuAttributeEditType: admin\n    gluuAttributeName: eduPersonScopedAffiliation\n    gluuAttributeOrigin: eduPerson\n    gluuAttributeType: string\n    gluuAttributeViewType: admin\n    gluuStatus: inactive\n    inum: inum=%(org_inum)s!0005!%(attr1_id)s\n    urn: oid:1.3.6.1.4.1.5923.1.1.1.9   A python script can be used to update the right organization ID for the  .ldif  file. For example:       #!/usr/bin/python\n\n    import uuid\n\n    f = open(\"102-custom.ldif.template\")\n    ldif = f.read()\n    f.close()\n\n    def getQuad():\n        return str(uuid.uuid4())[:4].upper()\n\n    d = {}\n    d[\"org_inum\"] = \"@!43A9.4B45.403D.3B0A!0001!0D87.EAF2\"\n    d[\"attr1_id\"] = \"%s.%s\" % (getQuad(), getQuad())\n\n    new_ldif = ldif % d\n    f = open(\"102-custom.ldif\", \"w\")\n    f.write(new_ldif)\n    f.close()  Note:  This guide is a introductory guide only, there might be some tweaks necessary custom solutions.   Now you should be able to use the  102-custom.ldif  file to auto generate the custom attribute in future installations.",
            "title": "Generating Schema"
        },
        {
            "location": "/integrate/scimuma-howto/",
            "text": "Overview\n\n\nInstallation\n\n\nConfiguration\n\n\nTesting SCIM UMA\n\n\nSCIM 2.0 Test Mode (v2.4.4+)\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\nOverview\n\n\nGluu Server supports only UMA protection for SCIM endpoints from version 2.4.0 onwards. \nA machine based authorization method is used to obtain the access tokens. SCIM/UMA is built\ninto the Gluu Server CE and does not require any special package or installation. Please checkout \n\nDeployment Guides\n for installation instructions.\n\n\nInstallation\n\n\n\n\nInstall Gluu Server CE following the \nDeployment Guides\n and \nremember to install \nAsimba\n while running the setup script.  The setup script prepares the \nconfiguration necessary for SCIM UMA RS endpoints and SCIM UMA RP client \nand \nthis template\n \nis used. \n\n\n\n\nNote:\n The JWKS for RS and RP clients are put into the \n./output/scim.ldif\n file ready for SCIM configuration.\nThe \nsetup.properties.file\n contains the RS and RP JWKS in Base64 format.\n\n\n\n\n\n\nUse the following command to extract OpenID SCIM RS and RP Client ID\n\ncat setup.properties.last | grep \"scim_rs_client_id\\|scim_rp_client_id\"\n\n\n\n\n\n\nThe UMA SCIM client requires JWKS, so the setup script extracts the JWKS from \nsetup.properties.last\n and puts it into the \n./output/scim-rp.jks\n file.\n\n\n\n\n\n\nNOTE:\n For versions before v2.4.4, the JWKS is put in the \n./output/scim-rp-openid-keys.json\n file instead.\n\n\nConfiguration\n\n\n\n\nEnable SCIM from Organization Configuration\n\n\n\n\n\n\n\n\noxTrust SCIM UMA configuration is automatically updated while running the \nsetup.py\n and the correct values are setup \nin the \noxtrust-config.json\n file.\n\n\n\n\n  \"umaIssuer\":\"https://%(hostname)s\",\n  \"umaClientId\":\"%(scim_rs_client_id)s\",\n  \"umaClientKeyId\":\"\",\n  \"umaResourceId\":\"1447184268430\",\n  \"umaScope\":\"https://%(hostname)s/oxauth/seam/resource/restv1/uma/scopes/scim_access\",\n  \"umaClientKeyStoreFile\":\"%(scim_rs_client_jks_fn)s\",\n  \"umaClientKeyStorePassword\":\"%(scim_rs_client_jks_pass_encoded)s\",\n\n\n\n\n\n\numaClientKeyId\n can be updated with the \nalias\n from \nscim-rp.jks\n file; if it is not updated, the first key from the file is used automatically.\n\n\n\n\nTesting SCIM UMA\n\n\nThe following is a sample code that can be run to test the configured SCIM UMA Gluu CE. It uses \nSCIM-Client\n, a Java library also developed by Gluu intended for client applications.\n\n\n\n\nIf you are using Maven, below is how to add SCIM-Client to your project:\n\n\n\n\n<repositories>\n  <repository>\n    <id>gluu</id>\n    <name>Gluu repository</name>\n    <url>http://ox.gluu.org/maven</url>\n  </repository>\n</repositories>\n...\n<dependency>\n  <groupId>gluu.scim.client</groupId>\n  <artifactId>SCIM-Client</artifactId>\n  <version>${scim.client.version}</version>\n</dependency>\n\n\n\n\n\n\n\n\nStarting with Release v2.4.2, an SCIM-Client must be used on a matching Gluu CE. For example, if you are running CE v2.4.4, you must also use SCIM-Client v2.4.4.\n\n\n\n\n\n\nAdd your domain's SSL certificate to the JRE's \ncacerts\n certificate key store where your client application will run. There are lots of articles around the Web on how to do this.\n\n\n\n\n\n\nSupply the UMA parameters and run the code. \nNOTE:\n If you have re-installed Gluu CE, please note that the UMA parameters / JWKS files are also regenerated. You must then rebuild your client code with \ntarget\n or \ntmp\n folders possibly cleared beforehand to avoid conflicts.\n\n\n\n\n\n\n\npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\nimport gluu.scim2.client.Scim2Client;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.xml.bind.JAXBException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.map.JsonMappingException;\n\npublic class TestScimClient {\n\n    private static void testScim1Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final ScimClient scimClient = ScimClient.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        ScimResponse response = scimClient.personSearch(\"uid\", \"admin\", MediaType.APPLICATION_JSON);\n        System.out.println(\"SCIM1 \" + response.getResponseBodyString());\n    }\n\n    private static void testScim2Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final Scim2Client scim2Client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        String filter = \"userName eq \\\"admin\\\"\";\n        ScimResponse response = scim2Client.searchUsers(filter, 1, 1, \"\", \"\", null);\n        System.out.println(\"SCIM2: \" + response.getResponseBodyString());\n    }\n\n    public static void main(String[] args) throws IOException, JAXBException {\n\n        final String domain = \"https://c67.gluu.info/identity/seam/resource/restv1\";\n        final String umaMetaDataUrl = \"https://c67.gluu.info/.well-known/uma-configuration\";\n        final String umaAatClientId = \"@!A410.188A.95DD.EA5A!0001!3A1E.BAA5!0008!5870.A795\";\n\n        final String umaAatClientJksPath = \"D:\\\\Development\\\\test_data\\\\scim\\\\scim-rp.jks\";\n        final String umaAatClientJksPassword = \"secret\";\n        final String umaAatClientKeyId = \"\";\n\n        testScim1Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        testScim2Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n    }\n}\n\n\n\n\n\nSCIM 2.0 Test Mode (v2.4.4+)\n\n\nStarting with CE v2.4.4, the \"test mode\" configuration will help developers test the SCIM 2.0 endpoints easier. Instead of UMA + SCIM-Client, in test mode a long-lived OAuth2 access token issued by the Gluu server is used to authorize with the SCIM 2.0 endpoints.\n\n\nTo enable test mode, do the following:\n\n\n\n\nLogin to the oxTrust GUI and go to \"Configuration\" -> \"JSON Configuration\" -> \"OxTrust Configuration\", then locate the property \nscimTestMode\n.\n\n\n\n\n\n\n\n\nSet it to \ntrue\n, then click the \"Save Configuration\" button. The Gluu server will then create a long-lived OAuth2 access token with a validity period of one year. Doing this will also switch the authentication scheme from UMA to OAuth2 Access Token.\n\n\nClick again \"JSON Configuration\" -> \"OxTrust Configuration\" in the left navigation pane. This will retrieve the access token and be displayed in the \nscimTestModeAccessToken\n property.\n\n\n\n\n\n\n\n\nIf the access token has expired, just repeat the previous steps to create a new one.\n\n\n\n\nThe access token can then be used as the query string parameter \naccess_token\n in accessing the SCIM 2.0 endpoints, for example:\n\n\n\n\nYou can verify the current authentication scheme of the SCIM 2.0 endpoints by browsing its \nServiceProviderConfig\n:\n\n\n\n\nTo exit test mode, just set \nscimTestMode\n back to \nfalse\n then click the \"Save Configuration\" button. This will switch the authentication scheme from OAuth2 Access Token to UMA. If you try using your access token again, you will now get the \n403 Unauthorized\n error:\n\n\n\n\nNotes\n\n\nUMA is protected with SCIM in Gluu Server Community Edition (CE). The usage of UMA requires HTTP GET and HTTP POST requests. Before testing, the Client making the requests must be added/registered in Gluu CE. The UMA configuration is available @ \nhttps://hostname/.well-known/uma-configuration\n. The request to authorization endpoint must accompanied with  application/json content type. \n\n\nThe example below shows the parameters used in a real-life use case  where the UMA RPT Token is authorized in oxAuth.\n\n\n    public RptAuthorizationResponse requestRptPermissionAuthorization(@HeaderParam(\"Authorization\") String authorization,\n            @HeaderParam(\"Host\") String amHost, RptAuthorizationRequest rptAuthorizationRequest);\n\n\n\n\nIf the default openID SCIM Client is not used, the \ninum\n must be added to the UMA Authorization Policy Custom Script.",
            "title": "Protect SCIM endpoints with UMA"
        },
        {
            "location": "/integrate/scimuma-howto/#overview",
            "text": "Gluu Server supports only UMA protection for SCIM endpoints from version 2.4.0 onwards. \nA machine based authorization method is used to obtain the access tokens. SCIM/UMA is built\ninto the Gluu Server CE and does not require any special package or installation. Please checkout  Deployment Guides  for installation instructions.",
            "title": "Overview"
        },
        {
            "location": "/integrate/scimuma-howto/#installation",
            "text": "Install Gluu Server CE following the  Deployment Guides  and \nremember to install  Asimba  while running the setup script.  The setup script prepares the \nconfiguration necessary for SCIM UMA RS endpoints and SCIM UMA RP client \nand  this template  \nis used.    Note:  The JWKS for RS and RP clients are put into the  ./output/scim.ldif  file ready for SCIM configuration.\nThe  setup.properties.file  contains the RS and RP JWKS in Base64 format.    Use the following command to extract OpenID SCIM RS and RP Client ID cat setup.properties.last | grep \"scim_rs_client_id\\|scim_rp_client_id\"    The UMA SCIM client requires JWKS, so the setup script extracts the JWKS from  setup.properties.last  and puts it into the  ./output/scim-rp.jks  file.    NOTE:  For versions before v2.4.4, the JWKS is put in the  ./output/scim-rp-openid-keys.json  file instead.",
            "title": "Installation"
        },
        {
            "location": "/integrate/scimuma-howto/#configuration",
            "text": "Enable SCIM from Organization Configuration     oxTrust SCIM UMA configuration is automatically updated while running the  setup.py  and the correct values are setup \nin the  oxtrust-config.json  file.     \"umaIssuer\":\"https://%(hostname)s\",\n  \"umaClientId\":\"%(scim_rs_client_id)s\",\n  \"umaClientKeyId\":\"\",\n  \"umaResourceId\":\"1447184268430\",\n  \"umaScope\":\"https://%(hostname)s/oxauth/seam/resource/restv1/uma/scopes/scim_access\",\n  \"umaClientKeyStoreFile\":\"%(scim_rs_client_jks_fn)s\",\n  \"umaClientKeyStorePassword\":\"%(scim_rs_client_jks_pass_encoded)s\",   umaClientKeyId  can be updated with the  alias  from  scim-rp.jks  file; if it is not updated, the first key from the file is used automatically.",
            "title": "Configuration"
        },
        {
            "location": "/integrate/scimuma-howto/#testing-scim-uma",
            "text": "The following is a sample code that can be run to test the configured SCIM UMA Gluu CE. It uses  SCIM-Client , a Java library also developed by Gluu intended for client applications.   If you are using Maven, below is how to add SCIM-Client to your project:   <repositories>\n  <repository>\n    <id>gluu</id>\n    <name>Gluu repository</name>\n    <url>http://ox.gluu.org/maven</url>\n  </repository>\n</repositories>\n...\n<dependency>\n  <groupId>gluu.scim.client</groupId>\n  <artifactId>SCIM-Client</artifactId>\n  <version>${scim.client.version}</version>\n</dependency>    Starting with Release v2.4.2, an SCIM-Client must be used on a matching Gluu CE. For example, if you are running CE v2.4.4, you must also use SCIM-Client v2.4.4.    Add your domain's SSL certificate to the JRE's  cacerts  certificate key store where your client application will run. There are lots of articles around the Web on how to do this.    Supply the UMA parameters and run the code.  NOTE:  If you have re-installed Gluu CE, please note that the UMA parameters / JWKS files are also regenerated. You must then rebuild your client code with  target  or  tmp  folders possibly cleared beforehand to avoid conflicts.    \npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\nimport gluu.scim2.client.Scim2Client;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.xml.bind.JAXBException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.map.JsonMappingException;\n\npublic class TestScimClient {\n\n    private static void testScim1Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final ScimClient scimClient = ScimClient.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        ScimResponse response = scimClient.personSearch(\"uid\", \"admin\", MediaType.APPLICATION_JSON);\n        System.out.println(\"SCIM1 \" + response.getResponseBodyString());\n    }\n\n    private static void testScim2Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final Scim2Client scim2Client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        String filter = \"userName eq \\\"admin\\\"\";\n        ScimResponse response = scim2Client.searchUsers(filter, 1, 1, \"\", \"\", null);\n        System.out.println(\"SCIM2: \" + response.getResponseBodyString());\n    }\n\n    public static void main(String[] args) throws IOException, JAXBException {\n\n        final String domain = \"https://c67.gluu.info/identity/seam/resource/restv1\";\n        final String umaMetaDataUrl = \"https://c67.gluu.info/.well-known/uma-configuration\";\n        final String umaAatClientId = \"@!A410.188A.95DD.EA5A!0001!3A1E.BAA5!0008!5870.A795\";\n\n        final String umaAatClientJksPath = \"D:\\\\Development\\\\test_data\\\\scim\\\\scim-rp.jks\";\n        final String umaAatClientJksPassword = \"secret\";\n        final String umaAatClientKeyId = \"\";\n\n        testScim1Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        testScim2Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n    }\n}",
            "title": "Testing SCIM UMA"
        },
        {
            "location": "/integrate/scimuma-howto/#scim-20-test-mode-v244",
            "text": "Starting with CE v2.4.4, the \"test mode\" configuration will help developers test the SCIM 2.0 endpoints easier. Instead of UMA + SCIM-Client, in test mode a long-lived OAuth2 access token issued by the Gluu server is used to authorize with the SCIM 2.0 endpoints.  To enable test mode, do the following:   Login to the oxTrust GUI and go to \"Configuration\" -> \"JSON Configuration\" -> \"OxTrust Configuration\", then locate the property  scimTestMode .     Set it to  true , then click the \"Save Configuration\" button. The Gluu server will then create a long-lived OAuth2 access token with a validity period of one year. Doing this will also switch the authentication scheme from UMA to OAuth2 Access Token.  Click again \"JSON Configuration\" -> \"OxTrust Configuration\" in the left navigation pane. This will retrieve the access token and be displayed in the  scimTestModeAccessToken  property.     If the access token has expired, just repeat the previous steps to create a new one.   The access token can then be used as the query string parameter  access_token  in accessing the SCIM 2.0 endpoints, for example:   You can verify the current authentication scheme of the SCIM 2.0 endpoints by browsing its  ServiceProviderConfig :   To exit test mode, just set  scimTestMode  back to  false  then click the \"Save Configuration\" button. This will switch the authentication scheme from OAuth2 Access Token to UMA. If you try using your access token again, you will now get the  403 Unauthorized  error:",
            "title": "SCIM 2.0 Test Mode (v2.4.4+)"
        },
        {
            "location": "/integrate/scimuma-howto/#notes",
            "text": "UMA is protected with SCIM in Gluu Server Community Edition (CE). The usage of UMA requires HTTP GET and HTTP POST requests. Before testing, the Client making the requests must be added/registered in Gluu CE. The UMA configuration is available @  https://hostname/.well-known/uma-configuration . The request to authorization endpoint must accompanied with  application/json content type.   The example below shows the parameters used in a real-life use case  where the UMA RPT Token is authorized in oxAuth.      public RptAuthorizationResponse requestRptPermissionAuthorization(@HeaderParam(\"Authorization\") String authorization,\n            @HeaderParam(\"Host\") String amHost, RptAuthorizationRequest rptAuthorizationRequest);  If the default openID SCIM Client is not used, the  inum  must be added to the UMA Authorization Policy Custom Script.",
            "title": "Notes"
        },
        {
            "location": "/user-management/lock-user/",
            "text": "Lock User in Gluu Server\n\n\nThis section deals with the locking of user after 4 failed login attempts. This feature requires using the interception script to achieve the goal. The login attempts are stored in a custom attribute which needs to be created first.\n\n\nCreate Custom Attribute\n\n\nThe custom attribute \noxCountInvalidLogin\n will track the unsuccessful login attempts by any user. Please create that attribute from the oxTrust Admin GUI.\n\n\n\n\n\n\nClick on the add user button under \nConfiguration\n\n\n\n\n\n\n\n\nPlease fill up the form as shown in the screenshot below\n\n\n\n\n\n\n\nClick the \nUpdate\n button and the custom attribute is added in the Gluu Server\n\n\n\n\n\n\nScript Installation\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\nClick on the Person Authenticaiton tab\n\n\n\n\n\n\n\nClick on the Add custon script configuration button\n\n\n\n\n\n\n\nFill up the form with the following information:\n\n\n\n\n\n\n\nName: LockAccount\n\n\n\n\n\n\nDescription: Basic Lock Account\n\n\n\n\n\n\nProgramming Language: Python\n\n\n\n\n\n\nLevel: 1\n\n\n\n\n\n\nLocation Type: Ldap\n\n\n\n\n\n\nUsage Type: Both methods\n\n\n\n\n\n\nCustom property(key/value)\n\n\n\n\n\n\ninvalid_login_count_attribute: oxCountInvalidLogin\n\n\n\n\n\n\nmaximum_invalid_login_attemps: 4\n\n\n\n\n\n\nScript: \nLock User Account Script\n\n\n\n\n\n\nEnable the script by ticking the check box \n\n\n\n\n\n\n\nClick Update \n\n\n\n\n\n\n\nChange Default Authentication Method to LockAccount",
            "title": "Lock User on Failed Attempt"
        },
        {
            "location": "/user-management/lock-user/#lock-user-in-gluu-server",
            "text": "This section deals with the locking of user after 4 failed login attempts. This feature requires using the interception script to achieve the goal. The login attempts are stored in a custom attribute which needs to be created first.",
            "title": "Lock User in Gluu Server"
        },
        {
            "location": "/user-management/lock-user/#create-custom-attribute",
            "text": "The custom attribute  oxCountInvalidLogin  will track the unsuccessful login attempts by any user. Please create that attribute from the oxTrust Admin GUI.    Click on the add user button under  Configuration     Please fill up the form as shown in the screenshot below    Click the  Update  button and the custom attribute is added in the Gluu Server",
            "title": "Create Custom Attribute"
        },
        {
            "location": "/user-management/lock-user/#script-installation",
            "text": "Go to Manage Custom Scripts    Click on the Person Authenticaiton tab    Click on the Add custon script configuration button    Fill up the form with the following information:    Name: LockAccount    Description: Basic Lock Account    Programming Language: Python    Level: 1    Location Type: Ldap    Usage Type: Both methods    Custom property(key/value)    invalid_login_count_attribute: oxCountInvalidLogin    maximum_invalid_login_attemps: 4    Script:  Lock User Account Script    Enable the script by ticking the check box     Click Update     Change Default Authentication Method to LockAccount",
            "title": "Script Installation"
        },
        {
            "location": "/how-to/uma-demo/",
            "text": "Configure UMA Demo\n\n\nUMA Discovery\n\n\nResource Server Configuration\n\n\nAdd Client\n\n\n\n\n\n\nRequesting Party Configuration\n\n\nRegister Client\n\n\n\n\n\n\n\n\n\n\nRestart Tomcat\n\n\n\n\n\n\nConfigure UMA Demo\n\n\nThis section will guide you through to configuring UMA demo in Gluu Server. The values will change accrding you your setup.\nThere are three things that needs to be ensured while configuring UMA:\n\n\n\n\n\n\nConfigurations are loaded from \n<TOMCAT_HOME>/conf\n directory\n\n\n\n\n\n\nDeploy Requesting Party (RP) to \n/opt/tomcat/webapps/rp\n folder in the Gluu Server \nchroot\n environment\n\n\n\n\n\n\nDeploy Resource Server (RS) to \n/opt/tomcat/webapps/rs\n folder in the Gluu Server \nchroot\n environment\n\n\n\n\n\n\nUMA Discovery\n\n\nThe UMA discovery URL or the UMA well known endpoint is located at \nhttps://<hostname.doman>/.well-known/uma-configuration\n.\nThis link for any IdP or UMA-enabled IdP will contain the UMA discovery information such as token endpoints and authorization endpoints.\n\n\nNote:\n It is possible to register the client using \nOpenID Connect Dynamic Client Registration\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\numaAatClientId\numaAatClientSecret\n\n\nClient Credentials for AAT\n\n\n\n\n\n\npat_client_id\n pat_client_secret\n\n\nClient Credentials for PAT\n\n\n\n\n\n\nrsPhoneWsUrl\n\n\nHard coded Resource Server endpoint\n\n\n\n\n\n\n\n\nResource Server Configuration\n\n\nPlease remember to populate the follwoing files\n\n\n\n\n\n\n\n\nFilename\n\n\nMandatory\n\n\nRequirements\n\n\n\n\n\n\n\n\n\n\nrs-protect.json\n\n\nYes\n\n\nPAT Client Credentials\n\n\n\n\n\n\nrs-protect-config.json\n\n\nNo\n\n\nPopulate if WS endpoints were changed\n\n\n\n\n\n\n\n\nAdd Client\n\n\n\n\nClick on the Clients Menu from oxTrust GUI\n\n\n\n\n\n\n\n\nClick on the Add Client button\n\n\n\n\n\n\n\n\nThe following screen will appear and you have to fill it up with the information given below\n\n\n\n\n\n\n\n\n\n\nName : oxUma Demo RS (or any other name you like)\n\n\n\n\n\n\nApplication type : web\n\n\n\n\n\n\nAuthentication method for the Token Endpoint: client_secret_basic\n\n\n\n\n\n\nRedirect Login URIs: \n<rs redirect uri>\n eg https://gluuserver.mylifedigital/rs/rs.html (in our demo it is https://kantara.gluu.org/rs/rs.html)\n\n\n\n\n\n\nScopes: openID and uma_protection (uma_protection indicates that it is PAT)\n\n\n\n\n\n\nResponse types: token code id_token\n\n\n\n\n\n\nPopulate the \nrs-protect.json\n file with the secret that was used in the form\n\n\n\n\n\n\nRequesting Party Configuration\n\n\nRegister Client\n\n\n\n\nClick on the Clients Menu from oxTrust GUI\n\n\n\n\n\n\n\n\nClick on the Add Client button\n\n\n\n\n\n\n\n\nThe following screen will appear and you have to fill it up with the information given below\n\n\n\n\n\n\n\n\n\n\nName : oxUma Demo RS (or any other name you like)\n\n\n\n\n\n\nApplication type : web\n\n\n\n\n\n\nAuthentication method for the Token Endpoint: client_secret_basic\n\n\n\n\n\n\nRedirect Login URIs: \n<rp redirect uri>\n eg https://gluuserver.mylifedigital/rp/rp.html (in our demo it is https://kantara.gluu.org/rs/rs.html)\n\n\n\n\n\n\nScopes: openID and uma_authorization (uma_authorization indicates that it is AAT) \n\n\n\n\n\n\nPopulate the \noxuma-rp-conf.json\n with the client ID and secret that was used in the form\n\n\n\n\n\n\nRestart Tomcat\n\n\nPlease remember to restart tomcat using the following command after the changes are made:\n\n\n# service tomcat restart",
            "title": "Configure UMA"
        },
        {
            "location": "/how-to/uma-demo/#configure-uma-demo",
            "text": "This section will guide you through to configuring UMA demo in Gluu Server. The values will change accrding you your setup.\nThere are three things that needs to be ensured while configuring UMA:    Configurations are loaded from  <TOMCAT_HOME>/conf  directory    Deploy Requesting Party (RP) to  /opt/tomcat/webapps/rp  folder in the Gluu Server  chroot  environment    Deploy Resource Server (RS) to  /opt/tomcat/webapps/rs  folder in the Gluu Server  chroot  environment",
            "title": "Configure UMA Demo"
        },
        {
            "location": "/how-to/uma-demo/#uma-discovery",
            "text": "The UMA discovery URL or the UMA well known endpoint is located at  https://<hostname.doman>/.well-known/uma-configuration .\nThis link for any IdP or UMA-enabled IdP will contain the UMA discovery information such as token endpoints and authorization endpoints.  Note:  It is possible to register the client using  OpenID Connect Dynamic Client Registration .     Parameter  Description      umaAatClientId umaAatClientSecret  Client Credentials for AAT    pat_client_id  pat_client_secret  Client Credentials for PAT    rsPhoneWsUrl  Hard coded Resource Server endpoint",
            "title": "UMA Discovery"
        },
        {
            "location": "/how-to/uma-demo/#resource-server-configuration",
            "text": "Please remember to populate the follwoing files     Filename  Mandatory  Requirements      rs-protect.json  Yes  PAT Client Credentials    rs-protect-config.json  No  Populate if WS endpoints were changed     Add Client   Click on the Clients Menu from oxTrust GUI     Click on the Add Client button     The following screen will appear and you have to fill it up with the information given below      Name : oxUma Demo RS (or any other name you like)    Application type : web    Authentication method for the Token Endpoint: client_secret_basic    Redirect Login URIs:  <rs redirect uri>  eg https://gluuserver.mylifedigital/rs/rs.html (in our demo it is https://kantara.gluu.org/rs/rs.html)    Scopes: openID and uma_protection (uma_protection indicates that it is PAT)    Response types: token code id_token    Populate the  rs-protect.json  file with the secret that was used in the form",
            "title": "Resource Server Configuration"
        },
        {
            "location": "/how-to/uma-demo/#requesting-party-configuration",
            "text": "Register Client   Click on the Clients Menu from oxTrust GUI     Click on the Add Client button     The following screen will appear and you have to fill it up with the information given below      Name : oxUma Demo RS (or any other name you like)    Application type : web    Authentication method for the Token Endpoint: client_secret_basic    Redirect Login URIs:  <rp redirect uri>  eg https://gluuserver.mylifedigital/rp/rp.html (in our demo it is https://kantara.gluu.org/rs/rs.html)    Scopes: openID and uma_authorization (uma_authorization indicates that it is AAT)     Populate the  oxuma-rp-conf.json  with the client ID and secret that was used in the form",
            "title": "Requesting Party Configuration"
        },
        {
            "location": "/how-to/uma-demo/#restart-tomcat",
            "text": "Please remember to restart tomcat using the following command after the changes are made:  # service tomcat restart",
            "title": "Restart Tomcat"
        },
        {
            "location": "/how-to/update-certificate/",
            "text": "Full procedures for manually updating certificates of a live Gluu CE instance.\n\n\nBefore you start changing anything\n\n\nDefault JVM Keystore\n\n\nApache Web Server Certificate Update Process\n\n\nHow to test\n\n\n\n\n\n\nUpdating certificate used by Shibboleth module (idp.war)\n\n\nHow to test\n\n\n\n\n\n\nUpdating certificate used by Asimba module (asimba.war)\n\n\nUpdating OpenDJ's certificate in the default java keystore\n\n\nHow to test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFull procedures for manually updating certificates of a live Gluu CE instance.\n\n\nThis page describes how to manually update SSL/TLS certificates used by different components of Gluu CE instance. Ubuntu-based container's environment will be used for all command examples, if not stated otherwise explicitly. Commands may differ slightly for other distro families.\n\n\nBefore you start changing anything\n\n\nBackup all your current certificates, keys and java key storages that may be affected:\n\n\n\n\nLog into your instance: \n# service gluu-server-2.4.3 login\n\n(if you use Gluu CE older than 2.4 you should update to current version)\n\n\nBackup everything under \n/etc/certs/\n directory, then also backup your container's default java key storage (\ncacerts\n file); it can be located under \n/etc/ssl/certs/java/\n for Ubuntu- and Debian-based container, and under \n/etc/pki/java/\n for CentOS- and RHEL-based containers. It also usually has symbolic link insalled for it, which is the same for both families: \n/usr/java/latest/lib/security/cacerts\n\n\n\n\nNote: In order to have the new cert used for anything in oxtrust, i.e. anything hitting \n/identity\n and \n/oxauth\n, you only need to follow the instructions for \nupdating the Apache web server\n.\n\n\nDefault JVM Keystore\n\n\nJava programs making SSL connections to an external server may use the default JVM truststore, \n/usr/java/latest/lib/security/cacerts\n, to establish trust for certificates they are presented with. During installation, \nsetup.py\n generates self-signed certificates for all components and adds them to the \ncacerts\n truststore.\n\n\nApache Web Server Certificate Update Process\n\n\nThis is a common task. Before you launch your production Gluu Server, you may want to install a certificate from a well known certification authority like Verisign or Godaddy. Also, Web SSL certificates usually expire each year. To import it into Gluu CE:\n\n\n\n\nLog into your instance: \n# service gluu-server-2.4.3 login\n\n    (if you use Gluu CE older than 2.4.x you should update to current version)\n\n\nCreate a file containing full set of all intermediary CA certificates and root certificates for the commercial CA which issued your Web SSL certificate. You can name the file whatever you want, but place it under \n/etc/certs\n. The file should contain intermediate certificate(s), followed by the root CA'a certificate. \n For more info see doc page about the \nSSLCertificateChainFile directive\n\n\nPut your new commercial certificate in PEM format in one file, and the private key you used to generate the CSR for this certificate in the other file under \n/etc/certs/\n; make sure your private key isn't password protected.\n\n\nVerify that user under which your Apache process runs has read permissions to all three files: certificate chain, server ssl certificate, key.\n\n\nUpdate \nSSLCertificateFile\n, \nSSLCertificateKeyFil\n and \nSSLCertificateChainFile\n directives in Gluu's Apcache configuration file so they point to the files you've added; in Ubuntu you can find the configuration in \n/etc/apache2/sites-enabled/https_gluu.conf\n. For Centos and RedHat, it is located in \n/etc/httpd/conf.d/https_gluu.conf\n.\n\n\n\n\nNow its time to update the default keystore of your JVM:\n\n\n\n\nCreate a copy of your commercial certificate encoded in DER format: \n# openssl x509 -in pem-formatted-cert.crt -outform der -out der-formatted-cert.der\n\n\nFind out the exact alias name of your current (self-signed) Apache certificate in the cacerts file: \n# keytool -list -v -keystore /usr/java/latest/lib/security/cacerts -storepass changeit | grep -i '_httpd'\n It should have an alias of sort \u201cyour-instance-hostname_httpd\u201d\n\n\nRemove your old certificate from the store: \n# keytool -delete -alias your-instance-hostname_httpd -keystore /usr/java/latest/lib/security/cacerts \\\n-storepass changeit\n\n\nImport the new one with the same alias: \n# keytool -import -alias your-instance-hostname_httpd --trustcacerts -file /etc/certs/der-formatted-cert.der \\\n-keystore /usr/java/latest/lib/security/cacerts -storepass changeit\n\n\nRestart Tomcat service: \n# /etc/init.d/tomcat restart\n\n\nRestart Apache service: \n# /etc/init.d/apache2 restart\n\n\n\n\nHow to test\n\n\nYou have next options:\n\n\n\n\nChecking how certificate chain is visualized and its healthiness is evaluated by your browser. For example, correctly configured certificate chain may look like this in Firefox: \n\n\nYou could use one of online validation tools, like the Qualys\u00ae SSL Labs' SSL Server Test\n\n\nUsing console tools, like connecting to the SSL/TLS enabled port your Gluu's Apache listens on (443 by default) with \n# openssl s_client -showcerts -connect <host>:<port>\n. It will display the whole certificate chain sent by the web server together with secure overlay's parameters which were negotiated during SSL/TLS handshake.\n\n\n\n\nUpdating certificate used by Shibboleth module (idp.war)\n\n\nShibboleth has it's own java keystore protected by a password that is unique to each instance. Due to this just copying previous Shibboleth keystore file is not the easiest way to proceed, as you would need to find all possible places in configuration files from which it's being referenced and update all settings in them mentioning that password. It's better to recreate this keystore using key pair imported from your previous instance and password which the new instance uses, with the same console commands \nsetup.py\n script employs. To properly install your previous Shibboleth certificate:\n\n\n\n\nLog into the your new instance: \n# service gluu-server-2.4.3 login\n (if you use Gluu CE older than 2.4.x you should update to current version)\n\n\nCopy your Shibboleth's secret key (in non-encrypted form) and certificate in PEM format into \n/etc/certs\n directory, overwriting corresponding files there. In Gluu CE 2.4.x these files are named \nshibIDP.key\n and \nshibIDP.crt\n, respectively.\n\n\nAcquire Shibboleth's keystore's password this instance uses. One option is to get it from the \nsetup.properties.last\n file: \n# cat /install/community-edition-setup/setup.properties.last | grep -i 'shibJksPass'\n\n\nMerge together certificate and key files into PKCS12 archive: \n# openssl pkcs12 -export -inkey /etc/certs/shibIDP.key -in /etc/certs/shibIDP.crt -out /etc/certs/shibIDP.pkcs12 \\\n-passout pass:YOUR_SHIB_KEYSTORE_PASS -name your-instance-hostname\n\n\nTransform your PKCS12 archive into new instance's Shibboleth's java keystore file (this command will overwrite your privous keystore in \n/etc/certs\n): \n# keytool -importkeystore -srckeystore /etc/certs/shibIDP.pkcs12 -srcstorepass YOUR_SHIB_KEYSTORE_PASS \\\n-srcstoretype PKCS12 -destkeystore /etc/certs/shibIDP.jks -deststoretype JKS -deststorepass YOUR_SHIB_KEYSTORE_PASS \\\n-keyalg RSA -noprompt\n\n\nVerify that user \u201ctomcat\u201d has read access to all 4 files mentioned (shibIDP.key, shibIDP.crt, shibIDP.pkcs12 and shibIDP.jks)\n\n\nCreate a copy of your Shibboleth certificate encoded in DER format: \n# openssl x509 -in /etc/certs/shibIDP.crt -outform der -out /etc/certs/shibIDP.der\n\n\nFind out the exact alias name of your current Shibboleth's certificate in the \ncacerts\n file: \n# keytool -list -v -keystore /usr/java/latest/lib/security/cacerts -storepass changeit | grep -i '_shibidp'\n. It should have an alias of sort \u201cyour-instance-hostname_shibidp\u201d\n\n\nRemove your old certificate from the store: \n# keytool -delete -alias your-instance-hostname_shibidp -keystore /usr/java/latest/lib/security/cacerts \\\n-storepass changeit\n\n\nImport the new one with the same alias: \n# keytool -import -alias your-instance-hostname_shibidp --trustcacerts -file /etc/certs/shibIDP.der \\\n-keystore /usr/java/latest/lib/security/cacerts -storepass changeit\n\n\nRestart Tomcat service: \n# /etc/init.d/tomcat restart\n\n\nRestart Apache service: \n# /etc/init.d/apache2 restart\n\n\n\n\nHow to test\n\n\nAfter Tomcat's restart Shibboleth's configuration generated from a set of Velocity templates should be updated to include your changes to it. One way to test they have been applied is to check the current certificate the module includes in its SAML metadata that is shown at url like \nhttps://your-instance-hostname/idp/shibboleth\n, or can be found in the file \n/opt/idp/metadata/YOUR-ORG-INUM-idp-metadata.xml\n - it should show the same certificate you tried to import following steps above. If it does not, try to wait until Tomcat has fully started and restart it one more time. Please also pay attention to any error messages appearing in \n/opt/idp/logs/idp-process.log\n during Tomcat's startup.\n\n\nUpdating certificate used by Asimba module (asimba.war)\n\n\nThis procedure is quite similar to updating Shibboleth's certificate: \n\n\n\n\nLog into your instance: \n# service gluu-server-2.4.3 login\n (if you use Gluu CE older than 2.4 you should update to current version)\n\n\nCopy your Asimba's secret key (in non-encrypted form) and certificate in PEM format into \n/etc/certs\n directory, overwriting corresponding files there. In Gluu CE 2.4.x these files are named \nasimba.key\n and \nasimba.crt\n, respectively.\n\n\nAcquire Shibboleth keystore's password this instance uses. One option is to get it from the \nsetup.properties.last\n file: \n# cat /install/community-edition-setup/setup.properties.last | grep -i 'asimbaJksPass'\n\n\nMerge together certificate and key files into PKCS12 archive: \n# openssl pkcs12 -export -inkey /etc/certs/asimba.key -in /etc/certs/asimba.crt -out /etc/certs/asimba.pkcs12 \\\n-passout pass:YOUR_ASIMBA_KEYSTORE_PASS -name your-instance-hostname\n\n\nTransform your PKCS12 archive into new instance's Asimba's java keystore file: \n# keytool -importkeystore -srckeystore /etc/certs/asimba.pkcs12 -srcstorepass YOUR_ASIMBA_KEYSTORE_PASS \\\n-srcstoretype PKCS12 -destkeystore /etc/certs/asimbaIDP.jks -deststoretype JKS -deststorepass YOUR_ASIMBA_KEYSTORE_PASS \\\n-keyalg RSA -noprompt\n\n\nVerify that user \u201ctomcat\u201d has read access to all 4 files mentioned (asimba.key, asimba.crt, asimba.pkcs12 and asimbaIDP.jks)\n\n\nCreate a copy of your Shibboleth certificate encoded in DER format: \n# openssl x509 -in /etc/certs/asimba.crt -outform der -out /etc/certs/asimba.der\n\n\nFind out the exact alias name of your current Shibboleth's certificate in the cacerts file: \n# keytool -list -v -keystore /usr/java/latest/lib/security/cacerts -storepass changeit | grep -i '_asimba'\n\nIt should have an alias of sort \u201cyour-instance-hostname_asimba\u201d\n\n\nRemove your old certificate from the store: \n# keytool -delete -alias your-instance-hostname_asimba -keystore /usr/java/latest/lib/security/cacerts \\\n-storepass changeit\n\n\nImport the new one with the same alias: \n# keytool -import -alias your-instance-hostname_asimba --trustcacerts -file /etc/certs/asimba.der \\\n-keystore /usr/java/latest/lib/security/cacerts -storepass changeit\n\n\nRestart Tomcat service: \n# /etc/init.d/tomcat restart\n\n\nRestart Apache service: \n# /etc/init.d/apache2 restart\n\n\n\n\nUpdating OpenDJ's certificate in the default java keystore\n\n\nAs was mentioned before, if some component of Gluu CE package needs to connect to OpenDJ via LDAPS, it must be able to verify the authenticity and credibility of certificate presented by it by referencing java default keystore. Sometimes you may need to import cacerts file from your previous instance, overwriting corresponding file of the new container. After that it will contain your OpenDJ's certificate from the previous instance which won't match the certificate used by OpenDJ in this one.\n\n\nOpenDJ has its own password-protected java keystore where it stores his key pair together with certificate. It can be found at this path: \n/opt/opendj/config/keystore\n. Your options are either to recreate this keystore using the key pair and certificate from your previous instance (not recommended; you should refer to OpenDJ's documentation for requirements to this keystore's composition if you choose to do so), or remove the certificate of previous OpenDJ's instance from default keystore, and add the current certificate to it. To achieve the later: \n\n\n\n\nLog into your instance: \n# service gluu-server-2.4.3 login\n (if you use Gluu CE older than 2.4 you should update to current version)\n\n\n\n\nIf you didn't preserve original certificates from the \n/etc/certs\n directory of the new container (you should do that) and OpenDJ certificate which is also placed there by setup scripts (it should be named \u201copendj.crt\u201d) got overwritten by the certificate transferred from the previous one, you still can export it from the OpenDJ's own keystore with command like that:\n\n\n\n\nAcquire password for your keystore: \n# cat /opt/opendj/config/keystore.pin\n\n\nFind out the exact alias name of your current OpenDJ certificate: \n# keytool -list -v -keystore /opt/opendj/config/keystore -storepass YOUR_OPENDJ_JKS_PIN\n It should have alias \u201cserver-cert\u201d and there should be no other entries in the keystore, but it may change in the future.\n\n\nFetch the certificate from the store: \n# keytool -export -alias alias_you_discovered -file /etc/certs/opendj-exported-cert.der \\\n-keystore /opt/opendj/config/keystore -storepass opendj_jks_pin\n Now you are ready to import it into default java keystore\n\n\n\n\n\n\n\n\nFind out the exact alias name of your current OpenDJ's certificate in the cacerts file: \n# keytool -list -v -keystore /usr/java/latest/lib/security/cacerts -storepass changeit | \\\ngrep -i '_opendj'\n It should have an alias of sort \u201cyour-instance-hostname_opendj\u201d\n\n\n\n\nRemove your old certificate from the store: \n# keytool -delete -alias your-instance-hostname_opendj -keystore /usr/java/latest/lib/security/cacerts \\\n-storepass changeit\n\n\nImport the new one with the same alias: \n# keytool -import -alias your-instance-hostname_opendj --trustcacerts -file /etc/certs/opendj-exported-cert.der \\\n-keystore /usr/java/latest/lib/security/cacerts -storepass changeit\n\n\nRestart Tomcat service: \n# /etc/init.d/tomcat restart\n\n\nRestart Apache service: \n# /etc/init.d/apache2 restart\n\n\n\n\nHow to test\n\n\nYou can verify that the certificate in cacerts file is the same as in the OpenDJ's keystore using the same \u201ckeytool -list\u201d commands as before. Failure when establishing SSL/TLS connection with OpenDJ will result in errors appearing in \n/opt/idp/logs/idp-process.log\n and \n/opt/tomcat/logs/wrapper.log\n during Tomcat's startup.",
            "title": "Update Gluu Server Certificates"
        },
        {
            "location": "/how-to/update-certificate/#full-procedures-for-manually-updating-certificates-of-a-live-gluu-ce-instance",
            "text": "This page describes how to manually update SSL/TLS certificates used by different components of Gluu CE instance. Ubuntu-based container's environment will be used for all command examples, if not stated otherwise explicitly. Commands may differ slightly for other distro families.",
            "title": "Full procedures for manually updating certificates of a live Gluu CE instance."
        },
        {
            "location": "/how-to/update-certificate/#before-you-start-changing-anything",
            "text": "Backup all your current certificates, keys and java key storages that may be affected:   Log into your instance:  # service gluu-server-2.4.3 login \n(if you use Gluu CE older than 2.4 you should update to current version)  Backup everything under  /etc/certs/  directory, then also backup your container's default java key storage ( cacerts  file); it can be located under  /etc/ssl/certs/java/  for Ubuntu- and Debian-based container, and under  /etc/pki/java/  for CentOS- and RHEL-based containers. It also usually has symbolic link insalled for it, which is the same for both families:  /usr/java/latest/lib/security/cacerts   Note: In order to have the new cert used for anything in oxtrust, i.e. anything hitting  /identity  and  /oxauth , you only need to follow the instructions for  updating the Apache web server .",
            "title": "Before you start changing anything"
        },
        {
            "location": "/how-to/update-certificate/#default-jvm-keystore",
            "text": "Java programs making SSL connections to an external server may use the default JVM truststore,  /usr/java/latest/lib/security/cacerts , to establish trust for certificates they are presented with. During installation,  setup.py  generates self-signed certificates for all components and adds them to the  cacerts  truststore.",
            "title": "Default JVM Keystore"
        },
        {
            "location": "/how-to/update-certificate/#apache-web-server-certificate-update-process",
            "text": "This is a common task. Before you launch your production Gluu Server, you may want to install a certificate from a well known certification authority like Verisign or Godaddy. Also, Web SSL certificates usually expire each year. To import it into Gluu CE:   Log into your instance:  # service gluu-server-2.4.3 login \n    (if you use Gluu CE older than 2.4.x you should update to current version)  Create a file containing full set of all intermediary CA certificates and root certificates for the commercial CA which issued your Web SSL certificate. You can name the file whatever you want, but place it under  /etc/certs . The file should contain intermediate certificate(s), followed by the root CA'a certificate.   For more info see doc page about the  SSLCertificateChainFile directive  Put your new commercial certificate in PEM format in one file, and the private key you used to generate the CSR for this certificate in the other file under  /etc/certs/ ; make sure your private key isn't password protected.  Verify that user under which your Apache process runs has read permissions to all three files: certificate chain, server ssl certificate, key.  Update  SSLCertificateFile ,  SSLCertificateKeyFil  and  SSLCertificateChainFile  directives in Gluu's Apcache configuration file so they point to the files you've added; in Ubuntu you can find the configuration in  /etc/apache2/sites-enabled/https_gluu.conf . For Centos and RedHat, it is located in  /etc/httpd/conf.d/https_gluu.conf .   Now its time to update the default keystore of your JVM:   Create a copy of your commercial certificate encoded in DER format:  # openssl x509 -in pem-formatted-cert.crt -outform der -out der-formatted-cert.der  Find out the exact alias name of your current (self-signed) Apache certificate in the cacerts file:  # keytool -list -v -keystore /usr/java/latest/lib/security/cacerts -storepass changeit | grep -i '_httpd'  It should have an alias of sort \u201cyour-instance-hostname_httpd\u201d  Remove your old certificate from the store:  # keytool -delete -alias your-instance-hostname_httpd -keystore /usr/java/latest/lib/security/cacerts \\\n-storepass changeit  Import the new one with the same alias:  # keytool -import -alias your-instance-hostname_httpd --trustcacerts -file /etc/certs/der-formatted-cert.der \\\n-keystore /usr/java/latest/lib/security/cacerts -storepass changeit  Restart Tomcat service:  # /etc/init.d/tomcat restart  Restart Apache service:  # /etc/init.d/apache2 restart   How to test  You have next options:   Checking how certificate chain is visualized and its healthiness is evaluated by your browser. For example, correctly configured certificate chain may look like this in Firefox:   You could use one of online validation tools, like the Qualys\u00ae SSL Labs' SSL Server Test  Using console tools, like connecting to the SSL/TLS enabled port your Gluu's Apache listens on (443 by default) with  # openssl s_client -showcerts -connect <host>:<port> . It will display the whole certificate chain sent by the web server together with secure overlay's parameters which were negotiated during SSL/TLS handshake.",
            "title": "Apache Web Server Certificate Update Process"
        },
        {
            "location": "/how-to/update-certificate/#updating-certificate-used-by-shibboleth-module-idpwar",
            "text": "Shibboleth has it's own java keystore protected by a password that is unique to each instance. Due to this just copying previous Shibboleth keystore file is not the easiest way to proceed, as you would need to find all possible places in configuration files from which it's being referenced and update all settings in them mentioning that password. It's better to recreate this keystore using key pair imported from your previous instance and password which the new instance uses, with the same console commands  setup.py  script employs. To properly install your previous Shibboleth certificate:   Log into the your new instance:  # service gluu-server-2.4.3 login  (if you use Gluu CE older than 2.4.x you should update to current version)  Copy your Shibboleth's secret key (in non-encrypted form) and certificate in PEM format into  /etc/certs  directory, overwriting corresponding files there. In Gluu CE 2.4.x these files are named  shibIDP.key  and  shibIDP.crt , respectively.  Acquire Shibboleth's keystore's password this instance uses. One option is to get it from the  setup.properties.last  file:  # cat /install/community-edition-setup/setup.properties.last | grep -i 'shibJksPass'  Merge together certificate and key files into PKCS12 archive:  # openssl pkcs12 -export -inkey /etc/certs/shibIDP.key -in /etc/certs/shibIDP.crt -out /etc/certs/shibIDP.pkcs12 \\\n-passout pass:YOUR_SHIB_KEYSTORE_PASS -name your-instance-hostname  Transform your PKCS12 archive into new instance's Shibboleth's java keystore file (this command will overwrite your privous keystore in  /etc/certs ):  # keytool -importkeystore -srckeystore /etc/certs/shibIDP.pkcs12 -srcstorepass YOUR_SHIB_KEYSTORE_PASS \\\n-srcstoretype PKCS12 -destkeystore /etc/certs/shibIDP.jks -deststoretype JKS -deststorepass YOUR_SHIB_KEYSTORE_PASS \\\n-keyalg RSA -noprompt  Verify that user \u201ctomcat\u201d has read access to all 4 files mentioned (shibIDP.key, shibIDP.crt, shibIDP.pkcs12 and shibIDP.jks)  Create a copy of your Shibboleth certificate encoded in DER format:  # openssl x509 -in /etc/certs/shibIDP.crt -outform der -out /etc/certs/shibIDP.der  Find out the exact alias name of your current Shibboleth's certificate in the  cacerts  file:  # keytool -list -v -keystore /usr/java/latest/lib/security/cacerts -storepass changeit | grep -i '_shibidp' . It should have an alias of sort \u201cyour-instance-hostname_shibidp\u201d  Remove your old certificate from the store:  # keytool -delete -alias your-instance-hostname_shibidp -keystore /usr/java/latest/lib/security/cacerts \\\n-storepass changeit  Import the new one with the same alias:  # keytool -import -alias your-instance-hostname_shibidp --trustcacerts -file /etc/certs/shibIDP.der \\\n-keystore /usr/java/latest/lib/security/cacerts -storepass changeit  Restart Tomcat service:  # /etc/init.d/tomcat restart  Restart Apache service:  # /etc/init.d/apache2 restart   How to test  After Tomcat's restart Shibboleth's configuration generated from a set of Velocity templates should be updated to include your changes to it. One way to test they have been applied is to check the current certificate the module includes in its SAML metadata that is shown at url like  https://your-instance-hostname/idp/shibboleth , or can be found in the file  /opt/idp/metadata/YOUR-ORG-INUM-idp-metadata.xml  - it should show the same certificate you tried to import following steps above. If it does not, try to wait until Tomcat has fully started and restart it one more time. Please also pay attention to any error messages appearing in  /opt/idp/logs/idp-process.log  during Tomcat's startup.",
            "title": "Updating certificate used by Shibboleth module (idp.war)"
        },
        {
            "location": "/how-to/update-certificate/#updating-certificate-used-by-asimba-module-asimbawar",
            "text": "This procedure is quite similar to updating Shibboleth's certificate:    Log into your instance:  # service gluu-server-2.4.3 login  (if you use Gluu CE older than 2.4 you should update to current version)  Copy your Asimba's secret key (in non-encrypted form) and certificate in PEM format into  /etc/certs  directory, overwriting corresponding files there. In Gluu CE 2.4.x these files are named  asimba.key  and  asimba.crt , respectively.  Acquire Shibboleth keystore's password this instance uses. One option is to get it from the  setup.properties.last  file:  # cat /install/community-edition-setup/setup.properties.last | grep -i 'asimbaJksPass'  Merge together certificate and key files into PKCS12 archive:  # openssl pkcs12 -export -inkey /etc/certs/asimba.key -in /etc/certs/asimba.crt -out /etc/certs/asimba.pkcs12 \\\n-passout pass:YOUR_ASIMBA_KEYSTORE_PASS -name your-instance-hostname  Transform your PKCS12 archive into new instance's Asimba's java keystore file:  # keytool -importkeystore -srckeystore /etc/certs/asimba.pkcs12 -srcstorepass YOUR_ASIMBA_KEYSTORE_PASS \\\n-srcstoretype PKCS12 -destkeystore /etc/certs/asimbaIDP.jks -deststoretype JKS -deststorepass YOUR_ASIMBA_KEYSTORE_PASS \\\n-keyalg RSA -noprompt  Verify that user \u201ctomcat\u201d has read access to all 4 files mentioned (asimba.key, asimba.crt, asimba.pkcs12 and asimbaIDP.jks)  Create a copy of your Shibboleth certificate encoded in DER format:  # openssl x509 -in /etc/certs/asimba.crt -outform der -out /etc/certs/asimba.der  Find out the exact alias name of your current Shibboleth's certificate in the cacerts file:  # keytool -list -v -keystore /usr/java/latest/lib/security/cacerts -storepass changeit | grep -i '_asimba' \nIt should have an alias of sort \u201cyour-instance-hostname_asimba\u201d  Remove your old certificate from the store:  # keytool -delete -alias your-instance-hostname_asimba -keystore /usr/java/latest/lib/security/cacerts \\\n-storepass changeit  Import the new one with the same alias:  # keytool -import -alias your-instance-hostname_asimba --trustcacerts -file /etc/certs/asimba.der \\\n-keystore /usr/java/latest/lib/security/cacerts -storepass changeit  Restart Tomcat service:  # /etc/init.d/tomcat restart  Restart Apache service:  # /etc/init.d/apache2 restart",
            "title": "Updating certificate used by Asimba module (asimba.war)"
        },
        {
            "location": "/how-to/update-certificate/#updating-opendjs-certificate-in-the-default-java-keystore",
            "text": "As was mentioned before, if some component of Gluu CE package needs to connect to OpenDJ via LDAPS, it must be able to verify the authenticity and credibility of certificate presented by it by referencing java default keystore. Sometimes you may need to import cacerts file from your previous instance, overwriting corresponding file of the new container. After that it will contain your OpenDJ's certificate from the previous instance which won't match the certificate used by OpenDJ in this one.  OpenDJ has its own password-protected java keystore where it stores his key pair together with certificate. It can be found at this path:  /opt/opendj/config/keystore . Your options are either to recreate this keystore using the key pair and certificate from your previous instance (not recommended; you should refer to OpenDJ's documentation for requirements to this keystore's composition if you choose to do so), or remove the certificate of previous OpenDJ's instance from default keystore, and add the current certificate to it. To achieve the later:    Log into your instance:  # service gluu-server-2.4.3 login  (if you use Gluu CE older than 2.4 you should update to current version)   If you didn't preserve original certificates from the  /etc/certs  directory of the new container (you should do that) and OpenDJ certificate which is also placed there by setup scripts (it should be named \u201copendj.crt\u201d) got overwritten by the certificate transferred from the previous one, you still can export it from the OpenDJ's own keystore with command like that:   Acquire password for your keystore:  # cat /opt/opendj/config/keystore.pin  Find out the exact alias name of your current OpenDJ certificate:  # keytool -list -v -keystore /opt/opendj/config/keystore -storepass YOUR_OPENDJ_JKS_PIN  It should have alias \u201cserver-cert\u201d and there should be no other entries in the keystore, but it may change in the future.  Fetch the certificate from the store:  # keytool -export -alias alias_you_discovered -file /etc/certs/opendj-exported-cert.der \\\n-keystore /opt/opendj/config/keystore -storepass opendj_jks_pin  Now you are ready to import it into default java keystore     Find out the exact alias name of your current OpenDJ's certificate in the cacerts file:  # keytool -list -v -keystore /usr/java/latest/lib/security/cacerts -storepass changeit | \\\ngrep -i '_opendj'  It should have an alias of sort \u201cyour-instance-hostname_opendj\u201d   Remove your old certificate from the store:  # keytool -delete -alias your-instance-hostname_opendj -keystore /usr/java/latest/lib/security/cacerts \\\n-storepass changeit  Import the new one with the same alias:  # keytool -import -alias your-instance-hostname_opendj --trustcacerts -file /etc/certs/opendj-exported-cert.der \\\n-keystore /usr/java/latest/lib/security/cacerts -storepass changeit  Restart Tomcat service:  # /etc/init.d/tomcat restart  Restart Apache service:  # /etc/init.d/apache2 restart   How to test  You can verify that the certificate in cacerts file is the same as in the OpenDJ's keystore using the same \u201ckeytool -list\u201d commands as before. Failure when establishing SSL/TLS connection with OpenDJ will result in errors appearing in  /opt/idp/logs/idp-process.log  and  /opt/tomcat/logs/wrapper.log  during Tomcat's startup.",
            "title": "Updating OpenDJ's certificate in the default java keystore"
        },
        {
            "location": "/how-to/saml_proxy_end_to_end/",
            "text": "SAML Proxy End to End Configuration and Testing\n\n\nFor this testing environment we have below pieces:\n\n\n\n\nhttps://sp.gluu.org/protected/print.py \u2013> Service Provider\n\n\nhttps://test.gluu.org \u2013> Gluu Server with SAML Script and Asimba\n\n\nhttps://nest.gluu.org \u2013> Gluu Server acting as remote authentication server\n\n\n\n\nThe whole workflow is:\n\n\nSP1 (sp.gluu.org) \u2192 IDP (test.gluu.org) \u2192 oxAuth Saml script (test.gluu.org) \u2192 Asimba (test.gluu.org) \u2192 Remote IDP (nest.gluu.org) \u2192 oxAuth (test.gluu.org / any acr_values) \u2192 back_in reverser_order \n\n\n\n\n\nDescription of SAML Authentication Module is available here: https://github.com/GluuFederation/oxAuth/tree/master/Server/integrations/saml\n\n\nPreparation in Gluu Server\n\n\nDuring installation of Gluu Server (https://test.gluu.org), deployer need to select 'Asimba' and 'Shibboleth IDP' along with other core components (oxTrust,oxAuth,Web Server and LDAP). After the completion of installation, we can move forward for rest of the work. \n\n\nSAML custom script configuration\n\n\nServer: https://test.gluu.org\n\n\n allows Gluu Server Administrator to prepare a complete SAML Proxy setup with their Gluu Server. \nTo configure this custom script, \n - Log into Gluu Server as admin user. \n - Configuration -> Manage Custom Scripts\n - Select/Add 'saml' script from 'Person Authentication' tab\n    - Name: saml\n    - Description: Saml Authentication module\n    - Programming Language: Python\n    - Level: 1\n    - Location Type: LDAP\n    - Usage Type: Web\n    - Custom property (key/value)\n       - saml_deployment_type: enroll\n       - saml_idp_sso_target_url: https://test.gluu.org/asimba/profiles/saml2/sso/web\n       - saml_validate_response: false\n       - asimba_entity_id: https://test.gluu.org/saml\n       - asimba_saml_certificate_file: /etc/certs/saml.pem \n         - note: Deployer need to copy 'asimba.crt' in 'saml.pem' without any 'BEGIN CERTIFICATE' and 'END CERTIFICATE' tag. \n       - user_object_classes: eduPerson\n       - saml_idp_attributes_mapping: { \"attribute_name\": [\"attribute_name\", \"SAML2 URI\"] } \n         - example: \n{\"uid\": [\"uid\", \"urn:oid:0.9.2342.19200300.100.1.1\"], \"mail\": [\"mail\", \"urn:oid:0.9.2342.19200300.100.1.3\"], \"givenName\": [\"givenName\", \"urn:oid:2.5.4.42\"], \"sn\": [\"sn\", \"urn:oid:2.5.4.4\"], \"eduPersonPrincipalName\": [\"eduPersonPrincipalName\", \"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\"] }\n\n       - enforce_uniqueness_attr_list: attribute1, attribute2\n         - example: \nedupersonprincipalname, uid, mail, givenName\n\n       - saml_use_authn_context: false\n       - saml_generate_name_id: true\n    - Script: Grab script from github and paste it here. \n    - Enabled: True\n\n\nAsimba Configuration:\n\n\nServer: https://test.gluu.org\n\n\nEnroll Remote Authentication servers:\n\n\n\n\nLog into oxTrust as admin user\n\n\nSAML -> IDPs\n\n\nAdd IDP\n\n\nID: The entityID of remote authentication server\n\n\nexample: \nhttps://nest.gluu.org/idp/shibboleth\n\n\n\n\n\n\nFriendly Name: Anything peferrable \n\n\nMetadata URL: Not required\n\n\nMetadata Timeout: -1\n\n\nMetadata File: Upload rermote IDP's xml metadata\n\n\nTrust Certificate File: Uploade remote IDP's SAML certification. The format should be x509, crt; non password protected. \n\n\nNameIDFormat: Not required\n\n\nEnabled: Yes\n\n\nSend Scoping: Yes\n\n\nAllowCreate: Yes\n\n\nDisable SSO for IDP: No\n\n\nACS index: Yes\n\n\nSend NameIDPolicy: Yes\n\n\nAvoid Subject Confirmations: No\n\n\n\n\n\n\n\n\nSP Requestors:\n\n\n\n\nLog into oxTrust as admin user\n\n\nSAML -> SP Requestors\n\n\nAdd SP Requestor\n\n\nSelect parent SP Pool: requestorpool.1\n\n\nID: https://test.gluu.org/saml\n\n\nFriendly Name: oxAuth SAML\n\n\nMetadata URL: Not required\n\n\nMetadata Timeout: -1\n\n\nMetadata File: Create a SAML metadata like below and save it as 'saml_oxauth_metadata.xml'. Upload this metadata. \n\n\nTrust Certificate File: Not required\n\n\nProperties: Not required\n\n\nEnabled: Yes\n\n\nSigning: No\n\n\nmetadata snippet: \n\n\n\n\n\n\n\n\n<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.gluu.org/saml\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://test.gluu.org/oxauth/postlogin\" index=\"0\"/>\n  </md:SPSSODescriptor>\n  <md:Organization>\n    <md:OrganizationName xml:lang=\"en\">Gluu</md:OrganizationName>\n    <md:OrganizationDisplayName xml:lang=\"en\">Gluu - Open Source Access Management</md:OrganizationDisplayName>\n    <md:OrganizationURL xml:lang=\"en\">http://www.gluu.org</md:OrganizationURL>\n  </md:Organization>\n  <md:ContactPerson contactType=\"technical\">\n    <md:GivenName>Administrator</md:GivenName>\n    <md:EmailAddress>support@gluu.org</md:EmailAddress>\n  </md:ContactPerson>\n</md:EntityDescriptor> \n\n\n\n\nSAML Trust Relationship\n\n\nServer: https://test.gluu.org\n\n\nCreate Trust relationships for all service provides which are included in SAML Proxy SSO workflow. In our test setup we created Trust relationship for remote SP which has entityID 'https://sp.gluu.org/shibboleth'. How to create Trust Relationship is available \n\n\nPreparation in Remote Authentication Server (IDP)\n\n\nServer: https://nest.gluu.org\n\n\nCreate a SAML Trust Relationship with Gluu Server's Asimba bit. \nRequirements: \n  - Gluu Server's Asimba metadata can be achieved from 'https://test.gluu.org/asimba/profiles/saml2'\n    - Download the metadata and use 'File' method to create Trust relationship\n  - Relying Party Configuration: 'SAML2SSO' Profile \n    - example: \n        - includeAttributeStatement: Yes\n        - assertionLifeTime: 300000\n        - assertionProxyCount: 0\n        - signResponses: conditional\n        - signAssertions: never\n        - signRequests: conditional\n        - encryptAssertions: never\n        - encryptNameIds: never\n  - Attribute: Any attribute according to Service Providers own need. Any kind of nameID from below list is mandatory. \n     - nameID: \n        - \nnameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"\n\n        - \nnameIDFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"\n\n        - \nnameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n\n     - How to create nameID in Gluu Server is available \n\n\nPreparation in Service Provider (SP)\n\n\nServer: https://sp.gluu.org\n\n\nPreparing Service Provider for SAML Proxy worflow follows standard procedure. Service Provider need to connect with Gluu Server's Shibboleth part ( for our case, the entityID would be: https://test.gluu.org/idp/shibboleth ). How to configure any site with Shibboelth SP piece is available \nhere\n. \n\n\nTest\n\n\nHere is a quick video on how SAML Proxy SSO might look like. Here in this video we are using 'https://sp.gluu.org/protected/print.py' as our protected service provider link. After initiating the SSO, we are moved to Gluu Server's SAML Proxy discovery page ( https://test.gluu.org ). From there we selected 'Nest' as our desired authentication server. After succesful authentication we are landing to proctected resource. https://youtu.be/YEyrOWJu0yo",
            "title": "Inbound SAML End to End Testing"
        },
        {
            "location": "/how-to/saml_proxy_end_to_end/#saml-proxy-end-to-end-configuration-and-testing",
            "text": "For this testing environment we have below pieces:   https://sp.gluu.org/protected/print.py \u2013> Service Provider  https://test.gluu.org \u2013> Gluu Server with SAML Script and Asimba  https://nest.gluu.org \u2013> Gluu Server acting as remote authentication server   The whole workflow is:  SP1 (sp.gluu.org) \u2192 IDP (test.gluu.org) \u2192 oxAuth Saml script (test.gluu.org) \u2192 Asimba (test.gluu.org) \u2192 Remote IDP (nest.gluu.org) \u2192 oxAuth (test.gluu.org / any acr_values) \u2192 back_in reverser_order   Description of SAML Authentication Module is available here: https://github.com/GluuFederation/oxAuth/tree/master/Server/integrations/saml",
            "title": "SAML Proxy End to End Configuration and Testing"
        },
        {
            "location": "/how-to/saml_proxy_end_to_end/#preparation-in-gluu-server",
            "text": "During installation of Gluu Server (https://test.gluu.org), deployer need to select 'Asimba' and 'Shibboleth IDP' along with other core components (oxTrust,oxAuth,Web Server and LDAP). After the completion of installation, we can move forward for rest of the work.   SAML custom script configuration  Server: https://test.gluu.org   allows Gluu Server Administrator to prepare a complete SAML Proxy setup with their Gluu Server. \nTo configure this custom script, \n - Log into Gluu Server as admin user. \n - Configuration -> Manage Custom Scripts\n - Select/Add 'saml' script from 'Person Authentication' tab\n    - Name: saml\n    - Description: Saml Authentication module\n    - Programming Language: Python\n    - Level: 1\n    - Location Type: LDAP\n    - Usage Type: Web\n    - Custom property (key/value)\n       - saml_deployment_type: enroll\n       - saml_idp_sso_target_url: https://test.gluu.org/asimba/profiles/saml2/sso/web\n       - saml_validate_response: false\n       - asimba_entity_id: https://test.gluu.org/saml\n       - asimba_saml_certificate_file: /etc/certs/saml.pem \n         - note: Deployer need to copy 'asimba.crt' in 'saml.pem' without any 'BEGIN CERTIFICATE' and 'END CERTIFICATE' tag. \n       - user_object_classes: eduPerson\n       - saml_idp_attributes_mapping: { \"attribute_name\": [\"attribute_name\", \"SAML2 URI\"] } \n         - example:  {\"uid\": [\"uid\", \"urn:oid:0.9.2342.19200300.100.1.1\"], \"mail\": [\"mail\", \"urn:oid:0.9.2342.19200300.100.1.3\"], \"givenName\": [\"givenName\", \"urn:oid:2.5.4.42\"], \"sn\": [\"sn\", \"urn:oid:2.5.4.4\"], \"eduPersonPrincipalName\": [\"eduPersonPrincipalName\", \"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\"] } \n       - enforce_uniqueness_attr_list: attribute1, attribute2\n         - example:  edupersonprincipalname, uid, mail, givenName \n       - saml_use_authn_context: false\n       - saml_generate_name_id: true\n    - Script: Grab script from github and paste it here. \n    - Enabled: True  Asimba Configuration:  Server: https://test.gluu.org  Enroll Remote Authentication servers:   Log into oxTrust as admin user  SAML -> IDPs  Add IDP  ID: The entityID of remote authentication server  example:  https://nest.gluu.org/idp/shibboleth    Friendly Name: Anything peferrable   Metadata URL: Not required  Metadata Timeout: -1  Metadata File: Upload rermote IDP's xml metadata  Trust Certificate File: Uploade remote IDP's SAML certification. The format should be x509, crt; non password protected.   NameIDFormat: Not required  Enabled: Yes  Send Scoping: Yes  AllowCreate: Yes  Disable SSO for IDP: No  ACS index: Yes  Send NameIDPolicy: Yes  Avoid Subject Confirmations: No     SP Requestors:   Log into oxTrust as admin user  SAML -> SP Requestors  Add SP Requestor  Select parent SP Pool: requestorpool.1  ID: https://test.gluu.org/saml  Friendly Name: oxAuth SAML  Metadata URL: Not required  Metadata Timeout: -1  Metadata File: Create a SAML metadata like below and save it as 'saml_oxauth_metadata.xml'. Upload this metadata.   Trust Certificate File: Not required  Properties: Not required  Enabled: Yes  Signing: No  metadata snippet:      <md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.gluu.org/saml\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://test.gluu.org/oxauth/postlogin\" index=\"0\"/>\n  </md:SPSSODescriptor>\n  <md:Organization>\n    <md:OrganizationName xml:lang=\"en\">Gluu</md:OrganizationName>\n    <md:OrganizationDisplayName xml:lang=\"en\">Gluu - Open Source Access Management</md:OrganizationDisplayName>\n    <md:OrganizationURL xml:lang=\"en\">http://www.gluu.org</md:OrganizationURL>\n  </md:Organization>\n  <md:ContactPerson contactType=\"technical\">\n    <md:GivenName>Administrator</md:GivenName>\n    <md:EmailAddress>support@gluu.org</md:EmailAddress>\n  </md:ContactPerson>\n</md:EntityDescriptor>   SAML Trust Relationship  Server: https://test.gluu.org  Create Trust relationships for all service provides which are included in SAML Proxy SSO workflow. In our test setup we created Trust relationship for remote SP which has entityID 'https://sp.gluu.org/shibboleth'. How to create Trust Relationship is available",
            "title": "Preparation in Gluu Server"
        },
        {
            "location": "/how-to/saml_proxy_end_to_end/#preparation-in-remote-authentication-server-idp",
            "text": "Server: https://nest.gluu.org  Create a SAML Trust Relationship with Gluu Server's Asimba bit. \nRequirements: \n  - Gluu Server's Asimba metadata can be achieved from 'https://test.gluu.org/asimba/profiles/saml2'\n    - Download the metadata and use 'File' method to create Trust relationship\n  - Relying Party Configuration: 'SAML2SSO' Profile \n    - example: \n        - includeAttributeStatement: Yes\n        - assertionLifeTime: 300000\n        - assertionProxyCount: 0\n        - signResponses: conditional\n        - signAssertions: never\n        - signRequests: conditional\n        - encryptAssertions: never\n        - encryptNameIds: never\n  - Attribute: Any attribute according to Service Providers own need. Any kind of nameID from below list is mandatory. \n     - nameID: \n        -  nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\" \n        -  nameIDFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\" \n        -  nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" \n     - How to create nameID in Gluu Server is available",
            "title": "Preparation in Remote Authentication Server (IDP)"
        },
        {
            "location": "/how-to/saml_proxy_end_to_end/#preparation-in-service-provider-sp",
            "text": "Server: https://sp.gluu.org  Preparing Service Provider for SAML Proxy worflow follows standard procedure. Service Provider need to connect with Gluu Server's Shibboleth part ( for our case, the entityID would be: https://test.gluu.org/idp/shibboleth ). How to configure any site with Shibboelth SP piece is available  here .",
            "title": "Preparation in Service Provider (SP)"
        },
        {
            "location": "/how-to/saml_proxy_end_to_end/#test",
            "text": "Here is a quick video on how SAML Proxy SSO might look like. Here in this video we are using 'https://sp.gluu.org/protected/print.py' as our protected service provider link. After initiating the SSO, we are moved to Gluu Server's SAML Proxy discovery page ( https://test.gluu.org ). From there we selected 'Nest' as our desired authentication server. After succesful authentication we are landing to proctected resource. https://youtu.be/YEyrOWJu0yo",
            "title": "Test"
        },
        {
            "location": "/customize/design/",
            "text": "Style Customizations\n\n\nPage Customizations\n\n\nCustomizing Pages\n\n\nTomcat Restart Policy\n\n\n\n\n\n\n\n\n\n\nStyle Customizations\n\n\nStatic style elements like CSS, JavaScript and images are packaged into\nseparate jar files. They are named \n\\<ProjectName>\n Static-\n\n\\<version>\n .jar, e.g. 'oxTrustStatic-1.3.0.Final.jar' and\n'oxAuthStatic-1.4.0x.Final.jar'. These files are added to the deployable\nwar during build time.\n\n\nPost deployment, the structure of the jar allows its context to be\naccessible from the Web context root. For example, the default values of\nthe CSS and JavaScript locations are \n\\<contextPath>/stylesheet\n and\n\n\\<contextPath>/js\n in the configuration file.\n\n\nIt is possible to unpack the contents of the said jar into a folder\nhosted by a web server, and change the default cssLocation, jsLocation\nand imgLocation attributes in the file \noxTrust.properties\n and/or in\n\noxauth-config.xml\n.\n\n\n\n\n\n\nCSS: The location is specified using the property \ncssLocation\n.\n\n\n\n\n\n\nJavaScript: The location is specified using the property \njsLocation\n.\n\n\n\n\n\n\nImages: The location is specified using the property \nimgLocation\n.\n\n\n\n\n\n\nFor example, in \noxTrust.properties\n it looks like that:\n\n\ncssLocation=https://idp.gluu.org/static/stylesheet\njsLocation=https://idp.gluu.org/static/js\nimgLocation=https://idp.gluu.org/static/img\n\n\n\n\nIn the file \noxauth-config.xml\n (as a children of \\<configuration>\nnode) it looks like that:\n\n\n<cssLocation>https://idp.gluu.org/static/stylesheet</cssLocation>\n<jsLocation>=https://idp.gluu.org/static/js<jsLocation>\n<imgLocation>=https://idp.gluu.org/static/img<imgLocation>\n\n\n\n\nPage Customizations\n\n\nGluu server Community Edition makes editing public-facing pages easy\nwithour requiring the building of new war file. The files are in the\n\nxhtml\n format and it is recommended to take backups so that no \nimportant element is deleted from the pages.\n\n\nThe availbale pages are inside the two directories \n/opt/tomcat/webapps/identity\n and\n\n/opt/tomcat/webapps/oxauth\n.\n\n\noxAuth Pages:\n- Default login page: \n/opt/tomcat/webapps/oxauth/login.xhtml\n\n- Authorization page: \n/opt/tomcat/webapps/oxauth/authorize.xhtml\n\n- Error page: \n/opt/tomcat/webapps/oxauth/error.xhtml\n\n- Custom authentication scripts: XHTML files in \n/opt/tomcat/webapps/oxauth/auth\n\n\noxTrust Pages:\n\n\n\n\nDefault registration page: \n/opt/tomcat/webapps/identity/register.xhtml\n\n\n\n\nTo remove the Gluu copyright icon from your login page, navigate to the file template.xhtml that is located under /opt/tomcat/webapps/identity/WEB-INF/incl/layout. Then, simply remove this snippet:\n\n\n<s:fragment rendered=\"#{not isLogin}\">\n    <div class=\"footer\">\n        <p>Copyright <a href=\"http://www.gluu.org\">Gluu</a> All rights reserved.</p>\n    </div>\n</s:fragment>\n\n\n\n\nA new tomcat wrapper variable is added to avoid hard coding or changing application configurations. \n\n\nwrapper.java.additional.20=-Dgluu.external.resource.base=/var/gluu/webapps\n\n\n\n\nCustomizing Pages\n\n\nA new location is added inside the Gluu Server \nchroot\n to make the customizations easy. The \n/var/gluu/webapps/\n folder contains the \noxauth\n and \noxtrust\n folder which contains the \nlibs\n, \npages\n and \nresources\n folder where the customized pages can be placed to overwrite the default pages. The structure can be illustrated as follows:\n\n\n    /var/gluu/webapps/\n    |-- oxauth\n    |   |-- libs\n    |   |-- pages\n    |   `-- resources\n    `-- oxtrust\n            |-- libs\n            |-- pages\n            `-- resources\n\n\n\n\n\n\nWarning\n\n\nLog into the Gluu Server chroot before working on the customized pages\n\n\n\n\n\n\nPlease make way to the default pages folder to copy the default file to the external resource folder\n\n\n\n\n# cd /opt/tomcat/webapps/oxauth/\n# cp login.xhtml /var/gluu/webapps/oxauth/pages/ \n\n\n\n\nThe example above shows that the \nlogin.xhtml\n file is copied to the external pages. The changes can be made here and restarting Tomcat server will display the changes made to the specific customized page. The customizations must not be made by people will little/no web-development knowledge.\n\n\nTomcat Restart Policy\n\n\nTomcat Server does not need restart generally when custom pages are added in Gluu Server. However in the following cases, please restart Tomcat.\n\n\n\n\n\n\nDefault Page overriden with custom page as JSF may cache path to original version\n\n\n\n\n\n\nRemoval of page to replace context with empty page to invalidate it\n\n\n\n\n\n\nNew environment variable is introduces\n\n\n\n\n\n\nNote:\n There is a 10 second delay on page modification reload",
            "title": "Design Customization"
        },
        {
            "location": "/customize/design/#style-customizations",
            "text": "Static style elements like CSS, JavaScript and images are packaged into\nseparate jar files. They are named  \\<ProjectName>  Static- \\<version>  .jar, e.g. 'oxTrustStatic-1.3.0.Final.jar' and\n'oxAuthStatic-1.4.0x.Final.jar'. These files are added to the deployable\nwar during build time.  Post deployment, the structure of the jar allows its context to be\naccessible from the Web context root. For example, the default values of\nthe CSS and JavaScript locations are  \\<contextPath>/stylesheet  and \\<contextPath>/js  in the configuration file.  It is possible to unpack the contents of the said jar into a folder\nhosted by a web server, and change the default cssLocation, jsLocation\nand imgLocation attributes in the file  oxTrust.properties  and/or in oxauth-config.xml .    CSS: The location is specified using the property  cssLocation .    JavaScript: The location is specified using the property  jsLocation .    Images: The location is specified using the property  imgLocation .    For example, in  oxTrust.properties  it looks like that:  cssLocation=https://idp.gluu.org/static/stylesheet\njsLocation=https://idp.gluu.org/static/js\nimgLocation=https://idp.gluu.org/static/img  In the file  oxauth-config.xml  (as a children of \\<configuration>\nnode) it looks like that:  <cssLocation>https://idp.gluu.org/static/stylesheet</cssLocation>\n<jsLocation>=https://idp.gluu.org/static/js<jsLocation>\n<imgLocation>=https://idp.gluu.org/static/img<imgLocation>",
            "title": "Style Customizations"
        },
        {
            "location": "/customize/design/#page-customizations",
            "text": "Gluu server Community Edition makes editing public-facing pages easy\nwithour requiring the building of new war file. The files are in the xhtml  format and it is recommended to take backups so that no \nimportant element is deleted from the pages.  The availbale pages are inside the two directories  /opt/tomcat/webapps/identity  and /opt/tomcat/webapps/oxauth .  oxAuth Pages:\n- Default login page:  /opt/tomcat/webapps/oxauth/login.xhtml \n- Authorization page:  /opt/tomcat/webapps/oxauth/authorize.xhtml \n- Error page:  /opt/tomcat/webapps/oxauth/error.xhtml \n- Custom authentication scripts: XHTML files in  /opt/tomcat/webapps/oxauth/auth  oxTrust Pages:   Default registration page:  /opt/tomcat/webapps/identity/register.xhtml   To remove the Gluu copyright icon from your login page, navigate to the file template.xhtml that is located under /opt/tomcat/webapps/identity/WEB-INF/incl/layout. Then, simply remove this snippet:  <s:fragment rendered=\"#{not isLogin}\">\n    <div class=\"footer\">\n        <p>Copyright <a href=\"http://www.gluu.org\">Gluu</a> All rights reserved.</p>\n    </div>\n</s:fragment>  A new tomcat wrapper variable is added to avoid hard coding or changing application configurations.   wrapper.java.additional.20=-Dgluu.external.resource.base=/var/gluu/webapps",
            "title": "Page Customizations"
        },
        {
            "location": "/customize/design/#customizing-pages",
            "text": "A new location is added inside the Gluu Server  chroot  to make the customizations easy. The  /var/gluu/webapps/  folder contains the  oxauth  and  oxtrust  folder which contains the  libs ,  pages  and  resources  folder where the customized pages can be placed to overwrite the default pages. The structure can be illustrated as follows:      /var/gluu/webapps/\n    |-- oxauth\n    |   |-- libs\n    |   |-- pages\n    |   `-- resources\n    `-- oxtrust\n            |-- libs\n            |-- pages\n            `-- resources   Warning  Log into the Gluu Server chroot before working on the customized pages    Please make way to the default pages folder to copy the default file to the external resource folder   # cd /opt/tomcat/webapps/oxauth/\n# cp login.xhtml /var/gluu/webapps/oxauth/pages/   The example above shows that the  login.xhtml  file is copied to the external pages. The changes can be made here and restarting Tomcat server will display the changes made to the specific customized page. The customizations must not be made by people will little/no web-development knowledge.",
            "title": "Customizing Pages"
        },
        {
            "location": "/customize/design/#tomcat-restart-policy",
            "text": "Tomcat Server does not need restart generally when custom pages are added in Gluu Server. However in the following cases, please restart Tomcat.    Default Page overriden with custom page as JSF may cache path to original version    Removal of page to replace context with empty page to invalidate it    New environment variable is introduces    Note:  There is a 10 second delay on page modification reload",
            "title": "Tomcat Restart Policy"
        },
        {
            "location": "/customize/script/",
            "text": "Overview\n\n\nCustom Scripts\n\n\nInterception Script Logs\n\n\n\n\n\n\nPerson Authentication\n\n\nCertificate Authentication\n\n\n\n\n\n\nUpdate User\n\n\nUser Registration\n\n\nClient Registration\n\n\nDynamic Scopes\n\n\nID Generator\n\n\nCache Refresh\n\n\nUMA Authorization Policies\n\n\nApplication Session Management\n\n\n\n\n\n\nOverview\n\n\nThe Gluu Server was designed to be very flexible. Gluu Server admins can use \nJython\n interception scripts to customize behavior.\n\n\nJython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers.\n\n\nAnother advantage of Jython was that developers can use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.\n\n\nTo access custom scripts within oxTrust, navigate to \nConfiguration > Manage Custom Scripts\n.\n\n\nCustom Scripts\n\n\nThere are three methods that inherit a base interface\n\n\n\n\n\n\n\n\nInherited Methods\n\n\nMethod description\n\n\n\n\n\n\n\n\n\n\ndef init(self, configurationAttributes)\n\n\nThis method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc\n\n\n\n\n\n\ndef destroy(self, configurationAttributes)\n\n\nThis method is called once to destroy events. It can be used to free resource and objects created in the \ninit()\n method\n\n\n\n\n\n\ndef getApiVersion(self)\n\n\nThe \ngetApiVersion\n method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return \n1\n\n\n\n\n\n\n\n\nThe \nconfigurationAttributes\n parameter is \njava.util.Map<String, SimpleCustomProperty>\n with properties specified in \noxConfigurationProperty\n attributes.\n\n\nThe script manager only loads enabled scripts. Hence, after enabling a\nscript, the script manager should trigger an event to either load or\ndestroy a script. All scripts are stored in LDAP in the\n\nou=scripts,o=<org_inum>,o=gluu\n branch.\n\n\nThis is a sample entry:\n\n\ndn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\nobjectClass: oxCustomScript\nobjectClass: top\ndescription: <custom_script_description>\ndisplayName: <display_name>\ngluuStatus: true\ninum: @!1111!031C.4A65\noxLevel: <priority>\noxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\noxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\noxRevision: <revision>\noxScript: <custom_script>\noxScriptType: <script_type>\nprogrammingLanguage: python\n\n\n\nThe script manager reloads scripts automatically without needing to\nrestart the application once \noxRevision\n is increased.\n\n\nInterception Script Logs\n\n\nThe log files regarding interception scripts are not stored in the\n\nwrapper.log\n file. The logs are separated according to the module they\naffect. The oxAuth custom script logs are stored in \noxauth_script.log\n\nand the oxTrust custom script logs are stored in the\n\noxtrust_script.log\n. Please refer to these log files for any errors in\nthe interception scripts or following the workflow of the script.\n\n\nPerson Authentication\n\n\nFor a list of pre-written, open source Gluu authentication scripts, view our \nserver integrations\n\n\nAn authentication script enables you to customize the user\nauthentication experience. For example, you can write a script that\nenables a two-factor authentication mechanism like Duo Security. By\ndefault oxAuth uses simple username/password authentication method. This\nscript type allows an admin to implement more secure workflows to cover\nan organizations security requirements. It extends the base script type\nwith the \ninit\n, \ndestroy\n and \ngetApiVersion\n methods but also adds the\nfollowing methods:\n\n\n\n\n\n\n\n\nMethod\n\n\nisValidAuthenticationMethod(self, usageType, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nusageType\n is \norg.xdi.model.AuthenticationScriptUsageType\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getAlternativeAuthenticationMethod(self, usageType, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if \nisValidAuthenticationMethod\n returns False. As a result it should return the reserved authentication method name\n\n\n\n\n\n\nMethod Parameter\n\n\nuageType\n is \norg.xdi.model.AuthenticationScriptUsageType\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef authenticate(self, configurationAttributes, requestParameters, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nrequestParameters\n is \njava.util.Map<String, String[]>\nstep\n is java integar\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef prepareForStep(self, configurationAttributes, requestParameters, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method can be used to prepare variables needed to render the login page and store them in an according event context. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nrequestParameters\n is \njava.util.Map<String, String[]>\nstep\n is a java integer\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getCountAuthenticationSteps(self, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method should return an integer value with the number of steps in the authentication workflow\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getExtraParametersForStep(self, configurationAttributes, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It is needed in a few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nstep\n is a java integer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getPageForStep(self, configurationAttributes, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page \n/login.xhtml\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nstep\n is a java integar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef logout(self, configurationAttributes, requestParameters)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication script when oxAuth receives an end session request. Also, it allows oxAuth to stop processing the end session request workflow if it returns \nFalse\n. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameters\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nrequestParameters\n is \njava.util.Map<String, String[]>\n\n\n\n\n\n\n\n\nThis script can be used in oxAuth application only.\n\n\n\n\nSample Authentication Script\n\n\n\n\nCertificate Authentication\n\n\nGluu Server CE offers a person authentication module enabling Certificate Authentication.\nThe image below contains the design diagram for this module.\n\n\n\n\nThe script has a few properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nAllowed Values\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nchain_cert_file_path\n\n\nmandatory property pointing to certificate chains in \npem\n format\n\n\nfile path\n\n\n/etc/certs/chain_cert.pem\n\n\n\n\n\n\nmap_user_cert\n\n\nspecifies if the script should map new user to local account\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_generic_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_path_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_oscp_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_crl_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\ncrl_max_response_size\n\n\nspecifies the maximum allowed size of [CRL][crl] response\n\n\nInteger > 0\n\n\n2\n\n\n\n\n\n\n\n\n\n\nSample Certificate Authentication Script\n\n\n\n\nUpdate User\n\n\noxTrust allows an admin to add and modify users which belong to groups.\nIn order to simplify this process and apply repeating actions, oxTrust\nsupports an Update User script. In this script it is possible to modify\na person entry before it is stored in LDAP.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateUser(self, user, persisted, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method updates the user\n\n\n\n\n\n\nMethod Parameter\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\npersisted is a boolean value to specify the operation type: add/modify\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample Update User Script\n\n\n\n\nUser Registration\n\n\noxTrust allows users to perform self-registration. In order to\ncontrol/validate user registrations there is the user registration\nscript type.\n\n\nThis script type adds three methods to the base script type:\n\n\n\n\n\n\n\n\nMethods\n\n\ndef initRegistration(self, user, requestParameters, configurationAttributes)\ndef preRegistration(self, user, requestParameters, configurationAttributes)\ndef postRegistration(self, user, requestParameters, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method enables/disables user account based on the custom property's value\n\n\n\n\n\n\nMethod Parameters\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nrequestParameters\n is \njava.util.Map<String, String[]>\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\nCustom Property\n\n\nenable_user\n--> defaults to \nfalse\n\n\n\n\n\n\nDescription\n\n\nIt controls whether or not this user account will be ready for loggin into the Gluu Server CE instance\n\n\n\n\n\n\n\n\nThe methods are executed in the following order:\n\n\n\n\n\n\n\n\nOrder\n\n\nMethod\n\n\nExpected Return\n\n\n\n\n\n\n\n\n\n\nFirst\n\n\ninitRegistration()\n\n\nTrue/False\n\n\n\n\n\n\nSecond\n\n\npreRegistration()\n\n\nTrue/False\n\n\n\n\n\n\nThird\n\n\npostRegistration()\n\n\nTrue/False\n\n\n\n\n\n\n\n\nFirst oxTrust executes the \ninitRegistration\n method to do an initial\nuser entry update. The \npreRegistration\n method is called before storing\nthe user entry in LDAP. Hence in this script it is possible to validate\nthe user entry. The \npostRegistration\n method is called after\nsuccessfully storing the user entry in LDAP. In this method, for\nexample, the script can send an e-mail or send notifications to other\norganization systems about the new user entry.\n\n\n\n\nSample User Registration Script\n\n\n\n\nClient Registration\n\n\noxAuth implements the \nOpenID Connect dynamic client\nregistration\n\nspecification. All new clients have the same default access scopes and\nattributes except password and client ID. The Client Registration script\nallows an admin to modify this limitation. In this script it is possible\nto get a registration request, analyze it, and apply customizations to\nregistered clients. For example, a script can give access to specified\nscopes if \nredirect_uri\n belongs to a specified service or domain.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateClient(self, registerRequest, client, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nregisterRequest\n is \norg.xdi.oxauth.client.RegisterRequest\nclient\n is \norg.xdi.oxauth.model.registration.Client\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Client Registration Script\n\n\n\n\nDynamic Scopes\n\n\nThe dynamic scope custom script allows the parsing of token returned from \nuser_info endpoint\n into \nLDAP attributes. The \nid_token\n is returned from \nuser_info endpoint\n and the values are dynamically placed \nin the LDAP attributes in Gluu Server.\n\n\n\n\nSample Dynamic Scope Script\n \n\n\n\n\nID Generator\n\n\nBy default oxAuth/oxTrust uses an internal method to generate unique\nidentifiers for new person/client, etc. entries. In most cases the\nformat of the ID is:\n\n\n'!' + idType.getInum() + '!' + four_random_HEX_characters + '.' + four_random_HEX_characters.\n\n\nThe ID generation script enables an admin to implement custom ID\ngeneration rules.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef generateId(self, appId, idType, idPrefix, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nappId\n is application ID\nidType\n is ID Type\nidPrefix\n is ID Prefix\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample ID Generation Script\n\n\n\n\nCache Refresh\n\n\nIn order to integrate an interception script with an existing\nauthentication server oxTrust provides a mechanism called \nCache\nRefresh\n to copy\nuser data to the local LDAP server. During this process it is possible\nto specify key attribute(s) and specify attribute name transformations.\nThere are also cases when it can be used to overwrite attribute values\nor to add new attributes based on other attribute values.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateUser(self, user, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample Cache Refresh Script\n\n\n\n\nUMA Authorization Policies\n\n\nThis is a special script for UMA. It allows an admin to protect UMA\nscopes with policies. It is possible to add more than one UMA policy to\nan UMA scope. On requesting access to a specified resource, the\napplication should call specified UMA policies in order to grant or deny\naccess.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef authorize(self, authorizationContext, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nauthorizationContext\n is \norg.xdi.oxauth.service.uma.authorization.AuthorizationContext\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Authorization Script\n\n\n\n\nApplication Session Management\n\n\nThis script allows an admin to notify 3rd party systems about requests\nto end an OAuth session. This method is triggered by an oxAuth call to\nthe \nend_session\n endpoint. It's possible to add multiple scripts with\nthis type. The application should call all of them according to the\nlevel.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef endSession(self, httpRequest, authorizationGrant, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nhttpRequest\n is \njavax.servlet.http.HttpServletRequest\nauthorizationGrant\n is \norg.xdi.oxauth.model.common.AuthorizationGrant\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Application Session Management Script",
            "title": "Behaviour Customization"
        },
        {
            "location": "/customize/script/#overview",
            "text": "The Gluu Server was designed to be very flexible. Gluu Server admins can use  Jython  interception scripts to customize behavior.  Jython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers.  Another advantage of Jython was that developers can use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.  To access custom scripts within oxTrust, navigate to  Configuration > Manage Custom Scripts .",
            "title": "Overview"
        },
        {
            "location": "/customize/script/#custom-scripts",
            "text": "There are three methods that inherit a base interface     Inherited Methods  Method description      def init(self, configurationAttributes)  This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc    def destroy(self, configurationAttributes)  This method is called once to destroy events. It can be used to free resource and objects created in the  init()  method    def getApiVersion(self)  The  getApiVersion  method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return  1     The  configurationAttributes  parameter is  java.util.Map<String, SimpleCustomProperty>  with properties specified in  oxConfigurationProperty  attributes.  The script manager only loads enabled scripts. Hence, after enabling a\nscript, the script manager should trigger an event to either load or\ndestroy a script. All scripts are stored in LDAP in the ou=scripts,o=<org_inum>,o=gluu  branch.  This is a sample entry:  dn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\nobjectClass: oxCustomScript\nobjectClass: top\ndescription: <custom_script_description>\ndisplayName: <display_name>\ngluuStatus: true\ninum: @!1111!031C.4A65\noxLevel: <priority>\noxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\noxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\noxRevision: <revision>\noxScript: <custom_script>\noxScriptType: <script_type>\nprogrammingLanguage: python  The script manager reloads scripts automatically without needing to\nrestart the application once  oxRevision  is increased.",
            "title": "Custom Scripts"
        },
        {
            "location": "/customize/script/#interception-script-logs",
            "text": "The log files regarding interception scripts are not stored in the wrapper.log  file. The logs are separated according to the module they\naffect. The oxAuth custom script logs are stored in  oxauth_script.log \nand the oxTrust custom script logs are stored in the oxtrust_script.log . Please refer to these log files for any errors in\nthe interception scripts or following the workflow of the script.",
            "title": "Interception Script Logs"
        },
        {
            "location": "/customize/script/#person-authentication",
            "text": "For a list of pre-written, open source Gluu authentication scripts, view our  server integrations  An authentication script enables you to customize the user\nauthentication experience. For example, you can write a script that\nenables a two-factor authentication mechanism like Duo Security. By\ndefault oxAuth uses simple username/password authentication method. This\nscript type allows an admin to implement more secure workflows to cover\nan organizations security requirements. It extends the base script type\nwith the  init ,  destroy  and  getApiVersion  methods but also adds the\nfollowing methods:     Method  isValidAuthenticationMethod(self, usageType, configurationAttributes)      Description  This method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return  True  or  False    Method Parameter  usageType  is  org.xdi.model.AuthenticationScriptUsageType configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes)      Description  This method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if  isValidAuthenticationMethod  returns False. As a result it should return the reserved authentication method name    Method Parameter  uageType  is  org.xdi.model.AuthenticationScriptUsageType configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def authenticate(self, configurationAttributes, requestParameters, step)      Description  This method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should either return  True  or  False    Method Parameter  requestParameters  is  java.util.Map<String, String[]> step  is java integar configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def prepareForStep(self, configurationAttributes, requestParameters, step)      Description  This method can be used to prepare variables needed to render the login page and store them in an according event context. As a result it should either return  True  or  False    Method Parameter  requestParameters  is  java.util.Map<String, String[]> step  is a java integer configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getCountAuthenticationSteps(self, configurationAttributes)      Description  This method should return an integer value with the number of steps in the authentication workflow    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getExtraParametersForStep(self, configurationAttributes, step)      Description  This method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It is needed in a few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> step  is a java integer        Method  def getPageForStep(self, configurationAttributes, step)      Description  This method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page  /login.xhtml    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> step  is a java integar        Method  def logout(self, configurationAttributes, requestParameters)      Description  This method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication script when oxAuth receives an end session request. Also, it allows oxAuth to stop processing the end session request workflow if it returns  False . As a result it should either return  True  or  False    Method Parameters  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> requestParameters  is  java.util.Map<String, String[]>     This script can be used in oxAuth application only.   Sample Authentication Script",
            "title": "Person Authentication"
        },
        {
            "location": "/customize/script/#certificate-authentication",
            "text": "Gluu Server CE offers a person authentication module enabling Certificate Authentication.\nThe image below contains the design diagram for this module.   The script has a few properties:     Property  Description  Allowed Values  example      chain_cert_file_path  mandatory property pointing to certificate chains in  pem  format  file path  /etc/certs/chain_cert.pem    map_user_cert  specifies if the script should map new user to local account  true/false  true    use_generic_validator  enable/disable specific certificate validation  true/false  false    use_path_validator  enable/disable specific certificate validation  true/false  true    use_oscp_validator  enable/disable specific certificate validation  true/false  false    use_crl_validator  enable/disable specific certificate validation  true/false  false    crl_max_response_size  specifies the maximum allowed size of [CRL][crl] response  Integer > 0  2      Sample Certificate Authentication Script",
            "title": "Certificate Authentication"
        },
        {
            "location": "/customize/script/#update-user",
            "text": "oxTrust allows an admin to add and modify users which belong to groups.\nIn order to simplify this process and apply repeating actions, oxTrust\nsupports an Update User script. In this script it is possible to modify\na person entry before it is stored in LDAP.  This script type adds only one method to the base script type:     Method  def updateUser(self, user, persisted, configurationAttributes)      Description  This method updates the user    Method Parameter  user  is  org.gluu.oxtrust.model.GluuCustomPerson persisted is a boolean value to specify the operation type: add/modify configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample Update User Script",
            "title": "Update User"
        },
        {
            "location": "/customize/script/#user-registration",
            "text": "oxTrust allows users to perform self-registration. In order to\ncontrol/validate user registrations there is the user registration\nscript type.  This script type adds three methods to the base script type:     Methods  def initRegistration(self, user, requestParameters, configurationAttributes) def preRegistration(self, user, requestParameters, configurationAttributes) def postRegistration(self, user, requestParameters, configurationAttributes)      Description  This method enables/disables user account based on the custom property's value    Method Parameters  user  is  org.gluu.oxtrust.model.GluuCustomPerson requestParameters  is  java.util.Map<String, String[]> configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>    Custom Property  enable_user --> defaults to  false    Description  It controls whether or not this user account will be ready for loggin into the Gluu Server CE instance     The methods are executed in the following order:     Order  Method  Expected Return      First  initRegistration()  True/False    Second  preRegistration()  True/False    Third  postRegistration()  True/False     First oxTrust executes the  initRegistration  method to do an initial\nuser entry update. The  preRegistration  method is called before storing\nthe user entry in LDAP. Hence in this script it is possible to validate\nthe user entry. The  postRegistration  method is called after\nsuccessfully storing the user entry in LDAP. In this method, for\nexample, the script can send an e-mail or send notifications to other\norganization systems about the new user entry.   Sample User Registration Script",
            "title": "User Registration"
        },
        {
            "location": "/customize/script/#client-registration",
            "text": "oxAuth implements the  OpenID Connect dynamic client\nregistration \nspecification. All new clients have the same default access scopes and\nattributes except password and client ID. The Client Registration script\nallows an admin to modify this limitation. In this script it is possible\nto get a registration request, analyze it, and apply customizations to\nregistered clients. For example, a script can give access to specified\nscopes if  redirect_uri  belongs to a specified service or domain.  This script type adds only one method to the base script type:     Method  def updateClient(self, registerRequest, client, configurationAttributes)      Method Parameter  registerRequest  is  org.xdi.oxauth.client.RegisterRequest client  is  org.xdi.oxauth.model.registration.Client configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Client Registration Script",
            "title": "Client Registration"
        },
        {
            "location": "/customize/script/#dynamic-scopes",
            "text": "The dynamic scope custom script allows the parsing of token returned from  user_info endpoint  into \nLDAP attributes. The  id_token  is returned from  user_info endpoint  and the values are dynamically placed \nin the LDAP attributes in Gluu Server.   Sample Dynamic Scope Script",
            "title": "Dynamic Scopes"
        },
        {
            "location": "/customize/script/#id-generator",
            "text": "By default oxAuth/oxTrust uses an internal method to generate unique\nidentifiers for new person/client, etc. entries. In most cases the\nformat of the ID is:  '!' + idType.getInum() + '!' + four_random_HEX_characters + '.' + four_random_HEX_characters.  The ID generation script enables an admin to implement custom ID\ngeneration rules.  This script type adds only one method to the base script type:     Method  def generateId(self, appId, idType, idPrefix, configurationAttributes)      Method Parameter  appId  is application ID idType  is ID Type idPrefix  is ID Prefix user  is  org.gluu.oxtrust.model.GluuCustomPerson configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample ID Generation Script",
            "title": "ID Generator"
        },
        {
            "location": "/customize/script/#cache-refresh",
            "text": "In order to integrate an interception script with an existing\nauthentication server oxTrust provides a mechanism called  Cache\nRefresh  to copy\nuser data to the local LDAP server. During this process it is possible\nto specify key attribute(s) and specify attribute name transformations.\nThere are also cases when it can be used to overwrite attribute values\nor to add new attributes based on other attribute values.  This script type adds only one method to the base script type:     Method  def updateUser(self, user, configurationAttributes)      Method Parameter  user  is  org.gluu.oxtrust.model.GluuCustomPerson configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample Cache Refresh Script",
            "title": "Cache Refresh"
        },
        {
            "location": "/customize/script/#uma-authorization-policies",
            "text": "This is a special script for UMA. It allows an admin to protect UMA\nscopes with policies. It is possible to add more than one UMA policy to\nan UMA scope. On requesting access to a specified resource, the\napplication should call specified UMA policies in order to grant or deny\naccess.  This script type adds only one method to the base script type:     Method  def authorize(self, authorizationContext, configurationAttributes)      Method Parameter  authorizationContext  is  org.xdi.oxauth.service.uma.authorization.AuthorizationContext configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Authorization Script",
            "title": "UMA Authorization Policies"
        },
        {
            "location": "/customize/script/#application-session-management",
            "text": "This script allows an admin to notify 3rd party systems about requests\nto end an OAuth session. This method is triggered by an oxAuth call to\nthe  end_session  endpoint. It's possible to add multiple scripts with\nthis type. The application should call all of them according to the\nlevel.  This script type adds only one method to the base script type:     Method  def endSession(self, httpRequest, authorizationGrant, configurationAttributes)      Method Parameter  httpRequest  is  javax.servlet.http.HttpServletRequest authorizationGrant  is  org.xdi.oxauth.model.common.AuthorizationGrant configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Application Session Management Script",
            "title": "Application Session Management"
        },
        {
            "location": "/customize/auth-script/",
            "text": "Writing a Custom Authentication Script\n\n\nCustom Script Location\n\n\nSuggested Development Environment\n\n\nInstall Eclipse Plugins\n\n\nCreate a project\n\n\n\n\n\n\nSamples and Documentation\n\n\nImplement methods\n\n\nCustom Properties\n\n\nReturning a message to the user\n\n\nAdding Libraries\n\n\nTesting\n\n\n\n\n\n\nReverting Authentication Method\n\n\n\n\n\n\nWriting a Custom Authentication Script\n\n\nTo develop this article, I decided to write a script to use\n\nTwilio\n to send an SMS code to implement a two-step\nout-of-band authentication mechanism.\n\n\nCustom Script Location\n\n\nGluu Server User Interface allows the developer to specify the path to\nscript rather than use the text box from oxTrust. The script will be\nloaded from the specified path. This feature will improve script\ndevelopment and there is an option to revert back to working script, if\nthe script is faulty or needs further development. \n\n\nThe administrator can select \nFile\n from the Script Location Type in oxTrust and the file\ninput box will be displayed:\n\n\n\nThe 'LDAP' option in the Script Location\nType can be used to store the script in the LDAP tree once the\ndevelopment is complete. Remember that selecting the \nLDAP\n method\nrequires that the script has to be copied in the input box that appears\nupon LDAP selection:\n\n\n\n\nSuggested Development Environment\n\n\nGluu Server custom scripts are written in\n\nJython\n. In this article, I'm going to\nrecommend using Eclipse. You cannot actually run the scripts from\nEclipse, but it provides a nice editor which makes coding more\nenjoyable.\n\n\nBefore you begin, install the following:\n\n\n\n\nPython 2.7.x\n\n\nJython\n\n\nJava Standard Edition\n\n\nEclipse IDE for Java Developers\n\n\n\n\nInstall Eclipse Plugins\n\n\nPyDev is a useful Eclipse tool for editing Python files. It also\nsupports Jython. To add an Eclipse plugin, the first thing to do to\nselect \"Install New Software\" from the Help menu:\n\n\n\n\nAfter this, you'll need to add the repositories for the software.\n\n\n\n\n\n\nPyDev - http://download.jboss.org/jbosstools/mars/development/updates/\n\n\nJBoss Tools - http://download.jboss.org/jbosstools/mars/development/updates/\n\n\n\n\nThen, select the respective repository in the \"Work with\" dropdown, and\ncheck the box for the software you want to install, as in the images\nbelow:\n\n\n\n\nFrom JBoss Tools select \"Jboss Tools RichFaces\" in \"JBoss Web and Jave\nEE Development\":\n\n\n\n\nCreate a project\n\n\nAs the next step specify the Jython interpreter under the Window /\nPreferences menu:\n\n\n\n\nNow you can create a new project to keep all your stuff. From the File\nmenu, create a new PyDev project:\n\n\n\n\nNow, you can create some files:\n\n\n\n\nA Python file for your script\n\n\nZero or more XHTML files if you have a custom form for your authentication\n\n\nZero or more XML files (you'll need one for each XHTML file) that\n   provide some information to the Tomcat server about how to display\n   the XHTML file.\n\n\n\n\nSamples and Documentation\n\n\nThere are many good examples of authentication interception scripts\nchecked into the \nintegrations\nfolder\n\nof the oxAuth project. Also, the respective \nXHTML\n and \nXML\n files are\nchecked in to the \nauth\nfolder\n. The interfaces for the authentication interception can be found in the \nGluu\nDocumentation\n.\n\n\nWhen I started my Twilio script, I decided to use the \nBasic\nScript\n\nas a template. I also used the \nWikid\nForms\n as my templates for the forms, because I remembered that I'd basically\nneed to get a code in step 2.\nI also looked at the \nWikid\nAuthentication\n\nscript quite a bit for examples of how to process the form.\n\n\nImplement methods\n\n\nThe most important method to implement is obviously the \nauthenticate\n\nmethod. This is where the main business logic is located for your\nauthentication workflow. Notice how you can switch on the step, with the\n\nif (step == 1):\n statement. In oxAuth, there is no assumption that step\n1 and step 2 happen on the same server, so the step is sent into the\n\nauthenticate\n method.\n\n\nTo access  information from requestParameters in your script with \nServerUtil.getFirstValue(requestParameters, <key>)\n where \n<key>\n specifies the value you want to retrieve, you can also use another method \nrequestParameters.get(\"<key>\")\n where \n<key>\n specifies the value you want to retrieve .\n\n\nAnother method you usually need to implement is\n\ngetCountAuthenticationSteps\n. This method normally just returns 1, 2,\nor 3. If you are implementing an adaptive authentication strategy, where\nthe number of steps depends on the context, you need to get a little\nfancier. Check out the Duo script for a good example of this. In our\nsample \nDuo\nscript\n,\nthe organization we wrote it for only wanted to use Duo for the IT\ngroup. So we checked group membership, and dynamically adjusted the\nnumber of steps.\n\n\nIf you need to save session variables between steps, use the\n\ngetExtraParametersForStep\n method. The Gluu Server persists these\nvariables in LDAP in able to support stateless clustered two step\nauthentications.\n\n\nIf you need to display a special Web page for an interactive login, (or\neven a custom first page) you'll need to implement the \ngetPageForStep\n\nwhich specifies the page you want to return for a given step.\n\n\nCustom Properties\n\n\nSometimes it is helpful to enable system administrators to enter\nproperties that might change a lot. If you don't want to ask them to\nmodify the script, you can use the Custom Property feature, as seen in\nthis screenshot:\n\n\n\n\nTo access this information in your script with\n\nconfigurationAttributes.get(\"<key>\").getValue2()\n where \n<key>\n\nspecifies the value you want to retrieve.\n\n\nReturning a message to the user\n\n\nIt is possible to use the Context to return a message to the user, which\ncould be especially useful if an error happened, or you need some kind\nof user action.\n\n\nAdding Libraries\n\n\nIf you have some pure Python libraries, you can add them to\n\n/opt/tomcat/conf/python\n, jar files can be added to\n\n/opt/tomcat/endorsed\n.\n\n\nTesting\n\n\nSo you think you're done with your script, it is time to test it! Print\nstatements are sent to \n/opt/tomcat/logs/wrapper.log\n If you prefix your\nlogs, you can use \ntail -f | grep <prefix>\n to just see your script\noutput while you try to login to test your script. In the Twilio test\nscript I wrote a special method called \nprintOut\n to make it easier to\nadd this prefix.\n\n\nAlso, remember that putting all your code in a \ntry / catch\n is a good\npractice to avoid unhandled exceptions. But when you're debugging,\nsometimes those exceptions may give you a hint as to what's going wrong.\n\n\nReverting Authentication Method\n\n\nIt is not unlikely that you will lock yourself out of Gluu Server while testing the authentication script, if there is any problem in it. In such a case the following method can be used to revert back the older authentication method. Please see the \nFAQ\n for details.",
            "title": "Custom Script How-To"
        },
        {
            "location": "/customize/auth-script/#writing-a-custom-authentication-script",
            "text": "To develop this article, I decided to write a script to use Twilio  to send an SMS code to implement a two-step\nout-of-band authentication mechanism.",
            "title": "Writing a Custom Authentication Script"
        },
        {
            "location": "/customize/auth-script/#custom-script-location",
            "text": "Gluu Server User Interface allows the developer to specify the path to\nscript rather than use the text box from oxTrust. The script will be\nloaded from the specified path. This feature will improve script\ndevelopment and there is an option to revert back to working script, if\nthe script is faulty or needs further development.   The administrator can select  File  from the Script Location Type in oxTrust and the file\ninput box will be displayed:  The 'LDAP' option in the Script Location\nType can be used to store the script in the LDAP tree once the\ndevelopment is complete. Remember that selecting the  LDAP  method\nrequires that the script has to be copied in the input box that appears\nupon LDAP selection:",
            "title": "Custom Script Location"
        },
        {
            "location": "/customize/auth-script/#suggested-development-environment",
            "text": "Gluu Server custom scripts are written in Jython . In this article, I'm going to\nrecommend using Eclipse. You cannot actually run the scripts from\nEclipse, but it provides a nice editor which makes coding more\nenjoyable.  Before you begin, install the following:   Python 2.7.x  Jython  Java Standard Edition  Eclipse IDE for Java Developers   Install Eclipse Plugins  PyDev is a useful Eclipse tool for editing Python files. It also\nsupports Jython. To add an Eclipse plugin, the first thing to do to\nselect \"Install New Software\" from the Help menu:   After this, you'll need to add the repositories for the software.    PyDev - http://download.jboss.org/jbosstools/mars/development/updates/  JBoss Tools - http://download.jboss.org/jbosstools/mars/development/updates/   Then, select the respective repository in the \"Work with\" dropdown, and\ncheck the box for the software you want to install, as in the images\nbelow:   From JBoss Tools select \"Jboss Tools RichFaces\" in \"JBoss Web and Jave\nEE Development\":   Create a project  As the next step specify the Jython interpreter under the Window /\nPreferences menu:   Now you can create a new project to keep all your stuff. From the File\nmenu, create a new PyDev project:   Now, you can create some files:   A Python file for your script  Zero or more XHTML files if you have a custom form for your authentication  Zero or more XML files (you'll need one for each XHTML file) that\n   provide some information to the Tomcat server about how to display\n   the XHTML file.",
            "title": "Suggested Development Environment"
        },
        {
            "location": "/customize/auth-script/#samples-and-documentation",
            "text": "There are many good examples of authentication interception scripts\nchecked into the  integrations\nfolder \nof the oxAuth project. Also, the respective  XHTML  and  XML  files are\nchecked in to the  auth\nfolder . The interfaces for the authentication interception can be found in the  Gluu\nDocumentation .  When I started my Twilio script, I decided to use the  Basic\nScript \nas a template. I also used the  Wikid\nForms  as my templates for the forms, because I remembered that I'd basically\nneed to get a code in step 2.\nI also looked at the  Wikid\nAuthentication \nscript quite a bit for examples of how to process the form.",
            "title": "Samples and Documentation"
        },
        {
            "location": "/customize/auth-script/#implement-methods",
            "text": "The most important method to implement is obviously the  authenticate \nmethod. This is where the main business logic is located for your\nauthentication workflow. Notice how you can switch on the step, with the if (step == 1):  statement. In oxAuth, there is no assumption that step\n1 and step 2 happen on the same server, so the step is sent into the authenticate  method.  To access  information from requestParameters in your script with  ServerUtil.getFirstValue(requestParameters, <key>)  where  <key>  specifies the value you want to retrieve, you can also use another method  requestParameters.get(\"<key>\")  where  <key>  specifies the value you want to retrieve .  Another method you usually need to implement is getCountAuthenticationSteps . This method normally just returns 1, 2,\nor 3. If you are implementing an adaptive authentication strategy, where\nthe number of steps depends on the context, you need to get a little\nfancier. Check out the Duo script for a good example of this. In our\nsample  Duo\nscript ,\nthe organization we wrote it for only wanted to use Duo for the IT\ngroup. So we checked group membership, and dynamically adjusted the\nnumber of steps.  If you need to save session variables between steps, use the getExtraParametersForStep  method. The Gluu Server persists these\nvariables in LDAP in able to support stateless clustered two step\nauthentications.  If you need to display a special Web page for an interactive login, (or\neven a custom first page) you'll need to implement the  getPageForStep \nwhich specifies the page you want to return for a given step.",
            "title": "Implement methods"
        },
        {
            "location": "/customize/auth-script/#custom-properties",
            "text": "Sometimes it is helpful to enable system administrators to enter\nproperties that might change a lot. If you don't want to ask them to\nmodify the script, you can use the Custom Property feature, as seen in\nthis screenshot:   To access this information in your script with configurationAttributes.get(\"<key>\").getValue2()  where  <key> \nspecifies the value you want to retrieve.",
            "title": "Custom Properties"
        },
        {
            "location": "/customize/auth-script/#returning-a-message-to-the-user",
            "text": "It is possible to use the Context to return a message to the user, which\ncould be especially useful if an error happened, or you need some kind\nof user action.",
            "title": "Returning a message to the user"
        },
        {
            "location": "/customize/auth-script/#adding-libraries",
            "text": "If you have some pure Python libraries, you can add them to /opt/tomcat/conf/python , jar files can be added to /opt/tomcat/endorsed .",
            "title": "Adding Libraries"
        },
        {
            "location": "/customize/auth-script/#testing",
            "text": "So you think you're done with your script, it is time to test it! Print\nstatements are sent to  /opt/tomcat/logs/wrapper.log  If you prefix your\nlogs, you can use  tail -f | grep <prefix>  to just see your script\noutput while you try to login to test your script. In the Twilio test\nscript I wrote a special method called  printOut  to make it easier to\nadd this prefix.  Also, remember that putting all your code in a  try / catch  is a good\npractice to avoid unhandled exceptions. But when you're debugging,\nsometimes those exceptions may give you a hint as to what's going wrong.",
            "title": "Testing"
        },
        {
            "location": "/customize/auth-script/#reverting-authentication-method",
            "text": "It is not unlikely that you will lock yourself out of Gluu Server while testing the authentication script, if there is any problem in it. In such a case the following method can be used to revert back the older authentication method. Please see the  FAQ  for details.",
            "title": "Reverting Authentication Method"
        },
        {
            "location": "/customize/attributes/",
            "text": "Custom Attributes\n\n\nUsing oxTust\n\n\nOpenID Scopes\n\n\nCustom NameID\n\n\nDefining NameID\n\n\n\n\n\n\nManual Schema Management Command\n\n\n\n\n\n\nCustom Attributes\n\n\nLDAP attributes, SAML attributes, OpenID Connect user claims--whatever you call them--many organizations have business-specific information about people that needs to be shared with applications. For simplicity, this article will refer to them as \"attributes.\" Existing standard schemas like the LDAP \ninetOrgPerson\n standard, or the \nOpenID Connect user claims\n define attributes like first name, last name and email address. Where possible, we recommend you use standard attributes that are already defined in the Gluu Server. But what if there is an attribute that is just not in any standard schema? This article will explain what you need to do to configure the Gluu Server to\nsupport your new attributes, and give you some advice along the way with regard to best practices. We will use fictional Company Acme Inc., which has requirements for \"acmeCustNumber\" and \"acmeStateLicenseNumber\".\n\n\nUsing oxTust\n\n\nAdditional attributes can be added from the Gluu Server GUI, oxTrust, by\nclicking the \nAdd Attribute\n button. Then, the following screen will\nappear:\n\n\n\n\n\n\n\n\n\n\nName:\n This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.\n\n\n\n\n\n\nSAML1 URI:\n This field contains the SAML1 uri for the custom attribute.\n\n\n\n\n\n\nSAML2 URI:\n This field contains the SAML2 uri for the custom attribute.\n\n\n\n\n\n\nDisplay Name:\n This display name can be anything that is human readable.\n\n\n\n\n\n\nType:\n The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:\n\n\n\n\nText\n\n\nNumeric\n\n\nPhoto\n\n\n\n\nDate\n\n\n\n\n\n\nEdit Type:\n This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).\n\n\n\n\n\n\nView Type:\n This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.\n\n\n\n\n\n\nPrivacy Level:\n Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.\n\n\n\n\n\n\nMultivalued:\n Please select multivalue in this field if the attribute\n  contains more than one value.\n\n\n\n\n\n\nSCIM Attributes:\n If the attribute is a part of SCIM architecture select true.\n\n\n\n\n\n\nDescription:\n This contains a few words to describe the attribute.\n\n\n\n\n\n\nStatus:\n The status, when selected active, will release and publish\n  the attribute in IdP.\n\n\n\n\n\n\nWhere are these attributes stored? During installation, the Gluu Server creates\na default objectclass specific for your organization. If you view\n\n/opt/opendj/config/schema/100-user.ldif\n, you'll see an objectclass called\nsomething like \nox-43A94B45403D3B0A00010D87EAF2\n (where this number is your \norganization identifier.) Any objects you add through the UI will be added to this\nobjectclass. In the JSON configuration for oxTrust, you'll see two properties: \n\npersonObjectClassTypes\n and \npersonCustomObjectClass\n where this objectclass is\nreferenced. Also, you'll see the display name for this objectclass referenced in \nthe \npersonObjectClassDisplayNames\n property (default value is \"custom\"). \n\n\nOpenID Scopes\n\n\nIn OpenID Connect, scopes are used to group attributes, and to provide a human \nunderstandable description of the attributes. This improves usability when you need \nto prompt a person to approve the disclosure of attributes to a third party. For\nexample, instead of asking the user if its ok to release her address,\ncity, state, and country, and providing a description of each attribute,\nit may be easier to ask the person if its ok to release \"mailing address\ninformation.\" In situations where the attributes may confuse the person,\nOpenID Scopes are a really good thing. Although the OpenID Connect spec says an OP\n\nmay release individual scopes, the Gluu Server only releases scopes. \n\n\nAn example of the default Gluu Server authorization request can be seen\nhere:\n\n\n\n\nSo if you have custom attributes, you may need to define a custom OpenID Scope.\nThis is pretty easy to do using the oxTrust user interface, and you can just\nselect the attributes that you previously registered.\n\n\nWhat attributes to put in what scopes depends on your privacy requirements.\nIf there is an attribute that is particularly sensitive, it may need its own\nscope (i.e. a scope with just one attribute). A good example of this is\n'dateOfBirth.' For minors, this can be sensitive information, and your\norganization may need more control about which OpenID Connect clients with\nwhich to share this scope.\n\n\nIn oxTrust configuration, be careful about making a scope available by\ndefault. This would mean that any client that registers via Dynamic Client\nRegistration could request this scope. The OpenID Connect specification only\nrequires the release of the \nopenid\n scope, which should just contain the\nperson identifier in the domain (i.e. for Google, this would be your Google id).\nHowever, rules were meant to be broken, so if you have a reason to release\na scope by default, go for it!\n\n\nCustom NameID\n\n\nGluu Server comes with the \ntransientID\n attribute which is the default \nNameID\n.\nIf there are other \nNameID\n requirements, it is possible to create them as well.\nThe custom attribute must be created in oxTrust first before defining it as the \nNameID\n.\nPlease see the \noxTrust custom attribute guide\n to create the custom attribute in oxTrust.\n\n\nDefining NameID\n\n\nThe template file for \nNameID\n definitions are located in the \nattribute-resolver.xml.vm\n file under \n/opt/tomcat/conf/shibboleth2/\n.\nThe example below adds \ntestcustomattribute\n as \nNameID\n based on UID attribute. The following are put into the \nattribute-resolver.xml.vm\n file.\n\n\n\n\nAdd declaration for the new attribute\n\n\n\n\nif( ! ($attribute.name.equals('transientId') or $attribute.name.equals('testcustomattribute') ) )\n\n\n\n\n\n\nAdd definition for the new attribute\n\n\n\n\n <resolver:AttributeDefinition id=\"testcustomattribute\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"uid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition> \n\n\n\n\n\n\nRestart tomcat service\n\n\n\n\nManual Schema Management Command\n\n\nLet's say you have a lot of attributes to register. Or you want a more\nrepeatable process for adding schema to the Gluu Server. This next section\nwill document a slightly more geeky way to do automate the process.\n\n\nFirst of all, you should create a custom schema file, which you will copy \nto \n/opt/opendj/config/schema\n each time you configure a new Gluu Server.\nUse your organization name, for example something like 102-acme.ldif. \nFor more information about creating custom schema in OpenDJ, see the \n[ForgeRock OpenDJ Admin Guide]\n(https://backstage.forgerock.com/#!/docs/opendj/2.6/admin-guide/chap-schema). \nYou should consider prefixing the name of your attributes and objectclasses\nwith your organization. For example, instead of using \nspamId\n use \nacmeSpamId\n.\nRestart your LDAP server to make sure the schema is correct. If it's not, the\nOpenDJ server will not start.\n\n\nNow you have the objectclass and attributes in OpenDJ, but the Gluu Server\nstill does not know about them. You're going to have to \"register\" these \nattributes. Each attribute that you want to make available must have a \ncorresponding LDAP entry under \nou=attributes,o=<org-inum>,o=gluu\n. If \nyou browse your LDAP server after performing a Gluu Server base installation, \nyou will see that many commonly used attributes are already there. When an \nLDAP entry exists for your attribute, it is considered to be \"registered\". \nNote in this example, we are using @!1111 as the organization id, which will\nbe much longer in a real installation.\n\n\nThere are two ways you can register an attribute. If you are an LDAP\ngeek, you can just create an LDIF file with the correct information, and\nload it in the LDAP server that is storing your configuration. If you\nwant to quickly spool up new Gluu Servers, this is probably the quickest\nway to handle it.\n\n\ndn: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\nobjectClass: top\nobjectClass: gluuAttribute\ninum: @!1111!0005!2B29\ndescription: How a person would want their name to be presented in writing.\ndisplayName: Display Name\nurn: urn:mace:dir:attribute-def:displayName\ngluuAttributeName: displayName\ngluuAttributeOrigin: gluuPerson\ngluuAttributeType: string\ngluuAttributeEditType: user\ngluuAttributeEditType: admin\ngluuAttributeViewType: user\ngluuAttributeViewType: admin\ngluuStatus: active\n\n\n\nA few things to note: \n\n\n\n\nFor the \ninum\n, after \n0005!\n use a unique identifier--normally a four digit hex number.\n\n\nIf you are using SAML, you will need to make sure that each attribute has a unique \nurn\n.\n  If you don't like \nurn\n format, you can use a dns style name here. It supposed to be globally unique. \n\n\nMake sure \ngluuStatus\n is active\n\n\nSet the appropriate description and displayName if possible.\n\n\n\n\nOnce you have this ldif file, you should make sure you use \nldapmodify\n to load it after the during\nyour Gluu Server installation process. \n\n\nIf you also want to automate loading your custom OpenID scopes, just remember that these\nscopes reference the DN of the attributes. For example: \n\n\ndn: inum=@!1111!0009!341A,ou=scopes,o=@!1111,o=gluu\nobjectClass: oxAuthCustomScope\nobjectClass: top\ndefaultScope: false\ndescription: myScope\ndisplayName: myScope\ninum: @!43A9.4B45.403D.3B0A!0001!0D87.EAF2!0009!341A\noxAuthClaim: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\noxAuthClaim: inum=@!1111!0005!29DA,ou=attributes,o=@!1111,o=gluu\n\n\n\nSo you may want to also create an ldif file for each scope, and also load this at installation time.",
            "title": "Custom Attributes"
        },
        {
            "location": "/customize/attributes/#custom-attributes",
            "text": "LDAP attributes, SAML attributes, OpenID Connect user claims--whatever you call them--many organizations have business-specific information about people that needs to be shared with applications. For simplicity, this article will refer to them as \"attributes.\" Existing standard schemas like the LDAP  inetOrgPerson  standard, or the  OpenID Connect user claims  define attributes like first name, last name and email address. Where possible, we recommend you use standard attributes that are already defined in the Gluu Server. But what if there is an attribute that is just not in any standard schema? This article will explain what you need to do to configure the Gluu Server to\nsupport your new attributes, and give you some advice along the way with regard to best practices. We will use fictional Company Acme Inc., which has requirements for \"acmeCustNumber\" and \"acmeStateLicenseNumber\".",
            "title": "Custom Attributes"
        },
        {
            "location": "/customize/attributes/#using-oxtust",
            "text": "Additional attributes can be added from the Gluu Server GUI, oxTrust, by\nclicking the  Add Attribute  button. Then, the following screen will\nappear:      Name:  This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.    SAML1 URI:  This field contains the SAML1 uri for the custom attribute.    SAML2 URI:  This field contains the SAML2 uri for the custom attribute.    Display Name:  This display name can be anything that is human readable.    Type:  The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:   Text  Numeric  Photo   Date    Edit Type:  This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).    View Type:  This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.    Privacy Level:  Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.    Multivalued:  Please select multivalue in this field if the attribute\n  contains more than one value.    SCIM Attributes:  If the attribute is a part of SCIM architecture select true.    Description:  This contains a few words to describe the attribute.    Status:  The status, when selected active, will release and publish\n  the attribute in IdP.    Where are these attributes stored? During installation, the Gluu Server creates\na default objectclass specific for your organization. If you view /opt/opendj/config/schema/100-user.ldif , you'll see an objectclass called\nsomething like  ox-43A94B45403D3B0A00010D87EAF2  (where this number is your \norganization identifier.) Any objects you add through the UI will be added to this\nobjectclass. In the JSON configuration for oxTrust, you'll see two properties:  personObjectClassTypes  and  personCustomObjectClass  where this objectclass is\nreferenced. Also, you'll see the display name for this objectclass referenced in \nthe  personObjectClassDisplayNames  property (default value is \"custom\").",
            "title": "Using oxTust"
        },
        {
            "location": "/customize/attributes/#openid-scopes",
            "text": "In OpenID Connect, scopes are used to group attributes, and to provide a human \nunderstandable description of the attributes. This improves usability when you need \nto prompt a person to approve the disclosure of attributes to a third party. For\nexample, instead of asking the user if its ok to release her address,\ncity, state, and country, and providing a description of each attribute,\nit may be easier to ask the person if its ok to release \"mailing address\ninformation.\" In situations where the attributes may confuse the person,\nOpenID Scopes are a really good thing. Although the OpenID Connect spec says an OP \nmay release individual scopes, the Gluu Server only releases scopes.   An example of the default Gluu Server authorization request can be seen\nhere:   So if you have custom attributes, you may need to define a custom OpenID Scope.\nThis is pretty easy to do using the oxTrust user interface, and you can just\nselect the attributes that you previously registered.  What attributes to put in what scopes depends on your privacy requirements.\nIf there is an attribute that is particularly sensitive, it may need its own\nscope (i.e. a scope with just one attribute). A good example of this is\n'dateOfBirth.' For minors, this can be sensitive information, and your\norganization may need more control about which OpenID Connect clients with\nwhich to share this scope.  In oxTrust configuration, be careful about making a scope available by\ndefault. This would mean that any client that registers via Dynamic Client\nRegistration could request this scope. The OpenID Connect specification only\nrequires the release of the  openid  scope, which should just contain the\nperson identifier in the domain (i.e. for Google, this would be your Google id).\nHowever, rules were meant to be broken, so if you have a reason to release\na scope by default, go for it!",
            "title": "OpenID Scopes"
        },
        {
            "location": "/customize/attributes/#custom-nameid",
            "text": "Gluu Server comes with the  transientID  attribute which is the default  NameID .\nIf there are other  NameID  requirements, it is possible to create them as well.\nThe custom attribute must be created in oxTrust first before defining it as the  NameID .\nPlease see the  oxTrust custom attribute guide  to create the custom attribute in oxTrust.",
            "title": "Custom NameID"
        },
        {
            "location": "/customize/attributes/#defining-nameid",
            "text": "The template file for  NameID  definitions are located in the  attribute-resolver.xml.vm  file under  /opt/tomcat/conf/shibboleth2/ .\nThe example below adds  testcustomattribute  as  NameID  based on UID attribute. The following are put into the  attribute-resolver.xml.vm  file.   Add declaration for the new attribute   if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('testcustomattribute') ) )   Add definition for the new attribute    <resolver:AttributeDefinition id=\"testcustomattribute\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"uid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition>    Restart tomcat service",
            "title": "Defining NameID"
        },
        {
            "location": "/customize/attributes/#manual-schema-management-command",
            "text": "Let's say you have a lot of attributes to register. Or you want a more\nrepeatable process for adding schema to the Gluu Server. This next section\nwill document a slightly more geeky way to do automate the process.  First of all, you should create a custom schema file, which you will copy \nto  /opt/opendj/config/schema  each time you configure a new Gluu Server.\nUse your organization name, for example something like 102-acme.ldif. \nFor more information about creating custom schema in OpenDJ, see the \n[ForgeRock OpenDJ Admin Guide]\n(https://backstage.forgerock.com/#!/docs/opendj/2.6/admin-guide/chap-schema). \nYou should consider prefixing the name of your attributes and objectclasses\nwith your organization. For example, instead of using  spamId  use  acmeSpamId .\nRestart your LDAP server to make sure the schema is correct. If it's not, the\nOpenDJ server will not start.  Now you have the objectclass and attributes in OpenDJ, but the Gluu Server\nstill does not know about them. You're going to have to \"register\" these \nattributes. Each attribute that you want to make available must have a \ncorresponding LDAP entry under  ou=attributes,o=<org-inum>,o=gluu . If \nyou browse your LDAP server after performing a Gluu Server base installation, \nyou will see that many commonly used attributes are already there. When an \nLDAP entry exists for your attribute, it is considered to be \"registered\". \nNote in this example, we are using @!1111 as the organization id, which will\nbe much longer in a real installation.  There are two ways you can register an attribute. If you are an LDAP\ngeek, you can just create an LDIF file with the correct information, and\nload it in the LDAP server that is storing your configuration. If you\nwant to quickly spool up new Gluu Servers, this is probably the quickest\nway to handle it.  dn: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\nobjectClass: top\nobjectClass: gluuAttribute\ninum: @!1111!0005!2B29\ndescription: How a person would want their name to be presented in writing.\ndisplayName: Display Name\nurn: urn:mace:dir:attribute-def:displayName\ngluuAttributeName: displayName\ngluuAttributeOrigin: gluuPerson\ngluuAttributeType: string\ngluuAttributeEditType: user\ngluuAttributeEditType: admin\ngluuAttributeViewType: user\ngluuAttributeViewType: admin\ngluuStatus: active  A few things to note:    For the  inum , after  0005!  use a unique identifier--normally a four digit hex number.  If you are using SAML, you will need to make sure that each attribute has a unique  urn .\n  If you don't like  urn  format, you can use a dns style name here. It supposed to be globally unique.   Make sure  gluuStatus  is active  Set the appropriate description and displayName if possible.   Once you have this ldif file, you should make sure you use  ldapmodify  to load it after the during\nyour Gluu Server installation process.   If you also want to automate loading your custom OpenID scopes, just remember that these\nscopes reference the DN of the attributes. For example:   dn: inum=@!1111!0009!341A,ou=scopes,o=@!1111,o=gluu\nobjectClass: oxAuthCustomScope\nobjectClass: top\ndefaultScope: false\ndescription: myScope\ndisplayName: myScope\ninum: @!43A9.4B45.403D.3B0A!0001!0D87.EAF2!0009!341A\noxAuthClaim: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\noxAuthClaim: inum=@!1111!0005!29DA,ou=attributes,o=@!1111,o=gluu  So you may want to also create an ldif file for each scope, and also load this at installation time.",
            "title": "Manual Schema Management Command"
        },
        {
            "location": "/integrate/outbound-saml/",
            "text": "Table of Contents\n  \n\n\n\n\nOutbound SAML\n\n\nMetadata of website:\n\n\nRequired attribute of website:\n\n\nSSO testing endpoint of website:\n\n\n\n\n\n\nConfiguring Outbound SAML SSO\n\n\nLDAP Attributes\n\n\nSAML Trust Relationship\n\n\nHow to create Trust Relationship\n\n\n\n\n\n\n\n\n\n\n\n\nOutbound SAML\n\n\nOutbound SAML setup from Gluu Server is pretty easy using the Gluu\nServer's oxTrust GUI. The following pieces of information are needed\nfrom the target website or application:\n\n\n\n\nMetadata of website\n\n\nRequired attribute of website\n\n\nSSO testing endpoint of website\n\n\n\n\nThe three points above are described briefly below.\n\n\nMetadata of website:\n\n\nMetadata is a XML file which has configuration data used to provision any\nwebsite (SP) or IDP (Gluu Server) to communicate with each other. It is\ninterchangeable between the IDP and the SP.\n\n\nWebsites (SP) can provide metadata via URL or as a separate file. If the\nSP provides an separate XML file, the Gluu Server can check the\nintegrity of that metadata with its own mechanism. This mechanism can be\nshown and tested from Gluu Server oxTrust GUI.\n\n\nRequired attribute of website:\n\n\nEvery organization has their own policy to release/share attributes with\nany IDP or SP. The Gluu Server supports, and can be configured for\nstandard or custom attributes. This can be done from the Gluu Server\noxTrust GUI.\n\n\nSSO testing endpoint of website:\n\n\nEvery website (SP) should have both a staging and a production uri\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.\n\n\nConfiguring Outbound SAML SSO\n\n\nThe Gluu Server's SAML capabilities are tightly integrated with\n\nShibboleth\n.\n\n\nSAML Trust Relationship\n\n\nA Trust Relationship is the mechanism to create single sign-on to any\nSAML Service Provider (SP) from the Gluu Server SAML IDP. Trust\nRelationships can be created from within the GUI.\n\n\nHow to create Trust Relationship\n\n\nIn order to create a trust relationship with any SP:\n\n\n\n\nGo to SAML \u2192 Trust Relationships\n\n\nClick on \u201cAdd Relationship\u201d\n\n\n\nA new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.\n\n\n\nDisplay Name\n: Name of the Trust Relationship (it should be unique for every trust relationship)\n\n\nDescription\n: Little description. Purpose and SSO link can be added here.\n\n\n\n\nMetadata Type\n: Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server\n\n\n\n\nFile\n: If SP has uploadable metadata in XML format, this option works best.\n\n\nURI\n: If the metadata of SP has uri link and accessible from internet, Gluu Server Administrator need to use this option. \n\n\n\n\nGenerate\n: Using Gluu Server to generate configuration files for SP is another big option when the SP is inhouse application or \u201cShibboleth SP\u201d is installed or going to be installed in target application site (SP).  \nHow to install Shibboleth SP\n will help user to configure and install Shibboleth SP on their own area. Please note few things when you are going to use \nGenerate\n method for your SP. \n\n\n\n\nURL\n : This is the \nhostname of SP\n\n\nPublic certificate\n : You \nmust\n have to provide the certificate which is Base64 encoded ASCII file and contain \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\". This certificate \ncan not be password protected\n. \n\n\nAfter creating the Trust Relationship, download the generated configuration files from \nDownload Shibboleth2 configuration files\n link and place these configuration files inside your SP configuration. \n\n\n\n\n\n\n\n\nFederation\n: If target application ( SP ) is affiliated with any Federation server (i.e: InCommon, NJEdge etc. ), this option of \u201cMetadata Type\u201d is required. \nSelect \u201cFederation\u201d in Metadata Type and another drop down menu called \u201cSelect Federation\u201d will appear. From this drop menu select desired Federation. \nIn order to create this documentation we took \u201cInCommon\u201d Federation as an example.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfter selecting the \u201cFederation Name\u201d, a new link named \u201cClick to select\nentity id\u201d will appear. From this link Gluu Server Administrator can\nselect all SP\u2019s entityIDs which are InCommon affiliated. Click on this\nlink and another new SP entityID discovery page will appear like below\nimage.\n\n\n\n\nGluu Server Administrator can grab any SP\u2019s entityID from \u201cFilter\u201d box.\nAs for example, Gluu Server Administrator is looking for Educause\nentityID.\n\n\n\n\n\n\n\n\nPublic certificate: Upload the public certificate for this SP server.\n  Please note that: public certificate\u2019s CN (common name) MUST maintain\n  the hostname of the SP server. If the SP has no certificate then keep\n  this option blank and the IdP will generate a self signed certificate.\n\n\n\n\n\n\nReleased: Release required attributes. Available attributes can be\n  grabbed from upper left corner.\n\n\n\n\n\n\nMore configuration: If the SP requires custom relying party and/or \n  custom MetadataFilter configuration, that can be achieved using the\n  following options:\n\n\n\n\nConfigure MetadataFilters: Click on this option and Gluu Server\n  will allow you to configure MetadataFilters inside the GUI.\n\n\nConfigure specific Relying Party: If the server admin \u201cchecks\u201d\n  this option a new link will appear which allows the server \n  administrator to modify various relying party configurations like\n  SAML2SSO, SAML2AttributeQuery, ShibbolethSSO etc.\n\n\n\n\n\n\n\n\n\n\nAfter adding a new Trust Relationship, the server administrator will\nobserve a confirmation page like the one below. Please note that for\ntesting purposes we did not provide any certificates. The IdP created\nboth the key and certificate by itself. The image below shows a sample\nTrust Relationship after successful creation.\n\n\nGluu Server administrator will be able to 'search' any trust relationship from 'Trust Relationship' search box. Searching syntax can be anything affiliated with specific Trust. It's also possible to see all Trusts by just hitting 'Search' button by keeping search box blank.",
            "title": "Outbound SAML"
        },
        {
            "location": "/integrate/outbound-saml/#outbound-saml",
            "text": "Outbound SAML setup from Gluu Server is pretty easy using the Gluu\nServer's oxTrust GUI. The following pieces of information are needed\nfrom the target website or application:   Metadata of website  Required attribute of website  SSO testing endpoint of website   The three points above are described briefly below.",
            "title": "Outbound SAML"
        },
        {
            "location": "/integrate/outbound-saml/#metadata-of-website",
            "text": "Metadata is a XML file which has configuration data used to provision any\nwebsite (SP) or IDP (Gluu Server) to communicate with each other. It is\ninterchangeable between the IDP and the SP.  Websites (SP) can provide metadata via URL or as a separate file. If the\nSP provides an separate XML file, the Gluu Server can check the\nintegrity of that metadata with its own mechanism. This mechanism can be\nshown and tested from Gluu Server oxTrust GUI.",
            "title": "Metadata of website:"
        },
        {
            "location": "/integrate/outbound-saml/#required-attribute-of-website",
            "text": "Every organization has their own policy to release/share attributes with\nany IDP or SP. The Gluu Server supports, and can be configured for\nstandard or custom attributes. This can be done from the Gluu Server\noxTrust GUI.",
            "title": "Required attribute of website:"
        },
        {
            "location": "/integrate/outbound-saml/#sso-testing-endpoint-of-website",
            "text": "Every website (SP) should have both a staging and a production uri\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.",
            "title": "SSO testing endpoint of website:"
        },
        {
            "location": "/integrate/outbound-saml/#configuring-outbound-saml-sso",
            "text": "The Gluu Server's SAML capabilities are tightly integrated with Shibboleth .",
            "title": "Configuring Outbound SAML SSO"
        },
        {
            "location": "/integrate/outbound-saml/#saml-trust-relationship",
            "text": "A Trust Relationship is the mechanism to create single sign-on to any\nSAML Service Provider (SP) from the Gluu Server SAML IDP. Trust\nRelationships can be created from within the GUI.  How to create Trust Relationship  In order to create a trust relationship with any SP:   Go to SAML \u2192 Trust Relationships  Click on \u201cAdd Relationship\u201d  A new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.  Display Name : Name of the Trust Relationship (it should be unique for every trust relationship)  Description : Little description. Purpose and SSO link can be added here.   Metadata Type : Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server   File : If SP has uploadable metadata in XML format, this option works best.  URI : If the metadata of SP has uri link and accessible from internet, Gluu Server Administrator need to use this option.    Generate : Using Gluu Server to generate configuration files for SP is another big option when the SP is inhouse application or \u201cShibboleth SP\u201d is installed or going to be installed in target application site (SP).   How to install Shibboleth SP  will help user to configure and install Shibboleth SP on their own area. Please note few things when you are going to use  Generate  method for your SP.    URL  : This is the  hostname of SP  Public certificate  : You  must  have to provide the certificate which is Base64 encoded ASCII file and contain \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\". This certificate  can not be password protected .   After creating the Trust Relationship, download the generated configuration files from  Download Shibboleth2 configuration files  link and place these configuration files inside your SP configuration.      Federation : If target application ( SP ) is affiliated with any Federation server (i.e: InCommon, NJEdge etc. ), this option of \u201cMetadata Type\u201d is required. \nSelect \u201cFederation\u201d in Metadata Type and another drop down menu called \u201cSelect Federation\u201d will appear. From this drop menu select desired Federation. \nIn order to create this documentation we took \u201cInCommon\u201d Federation as an example.        After selecting the \u201cFederation Name\u201d, a new link named \u201cClick to select\nentity id\u201d will appear. From this link Gluu Server Administrator can\nselect all SP\u2019s entityIDs which are InCommon affiliated. Click on this\nlink and another new SP entityID discovery page will appear like below\nimage.   Gluu Server Administrator can grab any SP\u2019s entityID from \u201cFilter\u201d box.\nAs for example, Gluu Server Administrator is looking for Educause\nentityID.     Public certificate: Upload the public certificate for this SP server.\n  Please note that: public certificate\u2019s CN (common name) MUST maintain\n  the hostname of the SP server. If the SP has no certificate then keep\n  this option blank and the IdP will generate a self signed certificate.    Released: Release required attributes. Available attributes can be\n  grabbed from upper left corner.    More configuration: If the SP requires custom relying party and/or \n  custom MetadataFilter configuration, that can be achieved using the\n  following options:   Configure MetadataFilters: Click on this option and Gluu Server\n  will allow you to configure MetadataFilters inside the GUI.  Configure specific Relying Party: If the server admin \u201cchecks\u201d\n  this option a new link will appear which allows the server \n  administrator to modify various relying party configurations like\n  SAML2SSO, SAML2AttributeQuery, ShibbolethSSO etc.      After adding a new Trust Relationship, the server administrator will\nobserve a confirmation page like the one below. Please note that for\ntesting purposes we did not provide any certificates. The IdP created\nboth the key and certificate by itself. The image below shows a sample\nTrust Relationship after successful creation.  Gluu Server administrator will be able to 'search' any trust relationship from 'Trust Relationship' search box. Searching syntax can be anything affiliated with specific Trust. It's also possible to see all Trusts by just hitting 'Search' button by keeping search box blank.",
            "title": "SAML Trust Relationship"
        },
        {
            "location": "/integrate/inbound-saml/",
            "text": "Inbound SAML in Gluu Server\n\n\nRequired Setup\n\n\nAdd IdP\n\n\nAdd SP\n\n\nAdd Selectors\n\n\nAttributes Handling\n\n\n\n\n\n\nInbound SAML End to End Testing\n\n\n\n\n\n\nInbound SAML in Gluu Server\n\n\nTo achieve inbound SAML, the Gluu Server uses an open source product called Asimba. The main use case for Asimba is to enable websites to use a single IdP\nfor single sign-on (SSO) even when the organization may have a number of\nIdPs that are trusted. For more information, please review the \nAsimba\nwebsite\n.\n\n\nRequired Setup\n\n\n\n\n\n\n\n\nSetup hostname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhttps://sp.gluu.org\n\n\nThis is a shibboleth SP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\nhttps://test.gluu.org\n\n\nThis is a Gluu Server SAML IdP with Asimba\n\n\n\n\n\n\nhttps://nest.gluu.org\n\n\nThis is a second Gluu Server SAML IdP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\n\n\nNote:\n Ideally all SPs and IdPs should be connected to Asimba server. In this case we are following that rule as well.\n\n\nAdd IdP\n\n\nThe IdP can be added from the Gluu Admin Panel (oxTrust) and navigating to SAML --> IDP.\n\n\n\n\n\n\nLog into the oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> Idp\n\n\n\n\n\n\n\nClick on 'Add IDP' button\n\n\n\n\n\n\n\nFill up the form with the information below:\n\n\n\n\n\n\nID: The entityID of the remote ID/ADFS \n\n\n\n\nExample: \nhttps:<hostname_of_gluu_server>/idp/shibboleth\n  \n\n\n\n\n\n\n\n\nFriendly Name: Anything you want \n\n\n\n\n\n\nMetadata URL: Keep it blank, we will upload metadata\n\n\n\n\n\n\nMetadata Timeout: Keep it as it is. \n\n\n\n\n\n\nMetadata File: Download metadata of remote IDP/ADFS and upload that XML file. \n\n\n\n\nExample: The metadata for Gluu IdP can be downloaded using \nwget -c https:<hostname_of_gluu_server>/idp/shibboleth\n\n\n\n\n\n\n\n\nTrust Certificate File: Grab the SAML cert from remote IDP/ADFS and upload that x509 crt\n\n\n\n\nExample: You will get the SAML cert from Gluu Server's metadata link or available inside \n/etc/certs/shibIDP.crt\n\n\n\n\n\n\n\n\nNameIDFormat: SAML2 URI if remote IDP is a Gluu Server\n\n\n\n\nExample: `urn:oasis:names:tc:SAML:2.0:nameid-format:transient'\n\n\n\n\n\n\n\n\n\n\n\n\nRestart tomcat service: 'service tomcat restart' from Gluu Server container\n\n\n\n\n\n\n\n\nAdd SP\n\n\n\n\n\n\nLog into oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> SP Requestor\n\n\n\n\n\n\n\nClick on 'Add SP Requestor'\n\n\n\n\n\n\n\nPlease fill up the form with the information below:\n\n\n\n\n\n\nID: The entityID of SP\n\n\n\n\nExample: Shibboleth SP entityID: \nhttps://sp.gluu.org/shibboleth\n\n\n\n\n\n\n\n\nFriendly Name: Anything is fine\n\n\n\n\n\n\nMetadata URL: Keep it blank; we will upload metadata\n\n\n\n\n\n\nMetadata Timeout: Keep it as it is\n\n\n\n\n\n\nMetadata File: Upload SP metadata ( xml file )\n\n\n\n\n\n\nTrust Certificate File: Upload SAML cert from SP\n\n\n\n\n\n\n\n\n\n\nRestart tomcat service: 'service tomcat restart' from Gluu Server container\n\n\n\n\n\n\n\n\nAdd Selectors\n\n\nThis feature will allow you 'automatically' select specific IDP for specific SP. As for example: If OrgA has SP 'orgASP.gluu.org' and 'orgAIDP.gluu.org' respectively and if you configure selector for 'orgASP.gluu.org' \u2013> 'orgAIDP.gluu.org', then after whenever user will go to 'orgASP.gluu.org', your Gluu Server's Asimba will automatically forward user to 'orgAIDP.gluu.org' for authentication.\n\n\n\n\n\n\nLog into oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> Selectors\n\n\n\n\n\n\n\nClick on the 'Add Selector' button\n\n\n\n\n\n\n\nSelect SP Requestor: Select your desired SP from drop down menu\n\n\n\n\n\n\nSelect IDP : Select your desired IDP from drop down menu\n\n\n\n\n\n\n\n\n\n\nClick on the 'Update' button\n\n\n\n\n\n\nRestart tomcat service: 'service tomcat restart' from Gluu Server container\n\n\n\n\n\n\n\n\nAttributes Handling\n\n\noxAsimba will transact all kind of attributes whichever authentication server ( remote IDP/ADFS ) can release to SP. By default this feature is not enabled.\n\n\n\n\nGluu Server administrator needs to add \n<attribute name=\u201c*\u201d />\n inside \nattributerelease class\n in the \nasimba.xml\n file under \n/opt/tomcat/webapps/asimba/WEB-INF/conf\n folder\n\n\n\n\n         <attributerelease class=\"com.alfaariss.oa.engine.attribute.release.configuration.ConfigurationFactory\">\n                <policy id=\"asimba.releasepolicy.1\" friendlyname=\"Default Attribute Release policy\" enabled=\"true\">\n                        <attribute name=\"firstname\" />\n                        <attribute name=\"lastname\" />\n                        <attribute name=\"email\" />\n                        <attribute name=\"role\" />\n                        <attribute name=\"*\" />\n                </policy>\n        </attributerelease> \n\n\n\n\n\n\nUncomment 'attributegatherer' part\n\n\n\n\n <gather>\n  <attribute name=\"whitelist-attribute-name\" />\n </gather> \n\n\n\n\n\n\nRestart tomcat service: 'service tomcat restart' from Gluu Server container\n\n\n\n\nInbound SAML End to End Testing\n\n\nGluu Server supports Inbound SAML using the custom script feature. A step by step guide is available in the \nHow To\n section called \nInbound SAML End to End Testing",
            "title": "Inbound SAML"
        },
        {
            "location": "/integrate/inbound-saml/#inbound-saml-in-gluu-server",
            "text": "To achieve inbound SAML, the Gluu Server uses an open source product called Asimba. The main use case for Asimba is to enable websites to use a single IdP\nfor single sign-on (SSO) even when the organization may have a number of\nIdPs that are trusted. For more information, please review the  Asimba\nwebsite .",
            "title": "Inbound SAML in Gluu Server"
        },
        {
            "location": "/integrate/inbound-saml/#required-setup",
            "text": "Setup hostname  Description      https://sp.gluu.org  This is a shibboleth SP connected to  https://test.gluu.org    https://test.gluu.org  This is a Gluu Server SAML IdP with Asimba    https://nest.gluu.org  This is a second Gluu Server SAML IdP connected to  https://test.gluu.org     Note:  Ideally all SPs and IdPs should be connected to Asimba server. In this case we are following that rule as well.",
            "title": "Required Setup"
        },
        {
            "location": "/integrate/inbound-saml/#add-idp",
            "text": "The IdP can be added from the Gluu Admin Panel (oxTrust) and navigating to SAML --> IDP.    Log into the oxTrust interface    Navigate to SAML --> Idp    Click on 'Add IDP' button    Fill up the form with the information below:    ID: The entityID of the remote ID/ADFS    Example:  https:<hostname_of_gluu_server>/idp/shibboleth        Friendly Name: Anything you want     Metadata URL: Keep it blank, we will upload metadata    Metadata Timeout: Keep it as it is.     Metadata File: Download metadata of remote IDP/ADFS and upload that XML file.    Example: The metadata for Gluu IdP can be downloaded using  wget -c https:<hostname_of_gluu_server>/idp/shibboleth     Trust Certificate File: Grab the SAML cert from remote IDP/ADFS and upload that x509 crt   Example: You will get the SAML cert from Gluu Server's metadata link or available inside  /etc/certs/shibIDP.crt     NameIDFormat: SAML2 URI if remote IDP is a Gluu Server   Example: `urn:oasis:names:tc:SAML:2.0:nameid-format:transient'       Restart tomcat service: 'service tomcat restart' from Gluu Server container",
            "title": "Add IdP"
        },
        {
            "location": "/integrate/inbound-saml/#add-sp",
            "text": "Log into oxTrust interface    Navigate to SAML --> SP Requestor    Click on 'Add SP Requestor'    Please fill up the form with the information below:    ID: The entityID of SP   Example: Shibboleth SP entityID:  https://sp.gluu.org/shibboleth     Friendly Name: Anything is fine    Metadata URL: Keep it blank; we will upload metadata    Metadata Timeout: Keep it as it is    Metadata File: Upload SP metadata ( xml file )    Trust Certificate File: Upload SAML cert from SP      Restart tomcat service: 'service tomcat restart' from Gluu Server container",
            "title": "Add SP"
        },
        {
            "location": "/integrate/inbound-saml/#add-selectors",
            "text": "This feature will allow you 'automatically' select specific IDP for specific SP. As for example: If OrgA has SP 'orgASP.gluu.org' and 'orgAIDP.gluu.org' respectively and if you configure selector for 'orgASP.gluu.org' \u2013> 'orgAIDP.gluu.org', then after whenever user will go to 'orgASP.gluu.org', your Gluu Server's Asimba will automatically forward user to 'orgAIDP.gluu.org' for authentication.    Log into oxTrust interface    Navigate to SAML --> Selectors    Click on the 'Add Selector' button    Select SP Requestor: Select your desired SP from drop down menu    Select IDP : Select your desired IDP from drop down menu      Click on the 'Update' button    Restart tomcat service: 'service tomcat restart' from Gluu Server container",
            "title": "Add Selectors"
        },
        {
            "location": "/integrate/inbound-saml/#attributes-handling",
            "text": "oxAsimba will transact all kind of attributes whichever authentication server ( remote IDP/ADFS ) can release to SP. By default this feature is not enabled.   Gluu Server administrator needs to add  <attribute name=\u201c*\u201d />  inside  attributerelease class  in the  asimba.xml  file under  /opt/tomcat/webapps/asimba/WEB-INF/conf  folder            <attributerelease class=\"com.alfaariss.oa.engine.attribute.release.configuration.ConfigurationFactory\">\n                <policy id=\"asimba.releasepolicy.1\" friendlyname=\"Default Attribute Release policy\" enabled=\"true\">\n                        <attribute name=\"firstname\" />\n                        <attribute name=\"lastname\" />\n                        <attribute name=\"email\" />\n                        <attribute name=\"role\" />\n                        <attribute name=\"*\" />\n                </policy>\n        </attributerelease>    Uncomment 'attributegatherer' part    <gather>\n  <attribute name=\"whitelist-attribute-name\" />\n </gather>    Restart tomcat service: 'service tomcat restart' from Gluu Server container",
            "title": "Attributes Handling"
        },
        {
            "location": "/integrate/inbound-saml/#inbound-saml-end-to-end-testing",
            "text": "Gluu Server supports Inbound SAML using the custom script feature. A step by step guide is available in the  How To  section called  Inbound SAML End to End Testing",
            "title": "Inbound SAML End to End Testing"
        },
        {
            "location": "/integrate/openid-connect/",
            "text": "Table of Contents\n\n\n\n\n\n\nTable of Contents\n\n\nOverview\n\n\nJargon (taxonomy)\n\n\nDiscovery\n\n\nScopes\n\n\nClient Registration\n\n\nMulti-Factor Authentication for Clients\n\n\nAlgorithm\n\n\nCustom Client Registration\n\n\nSearch clients\n\n\nView client\n\n\n\n\n\n\nSession management\n\n\nTesting with oxAuth RP\n\n\nOpenID Connect Discovery\n\n\nDynamic Client Registration\n\n\nClient Read\n\n\n\n\n\n\nAuthorization Endpoint\n\n\nRequest Authorization and receive the Authorization Code and ID Token\n\n\nRequest Access Token using the Authorization Code\n\n\nRequest new Access Token using the Refresh Token\n\n\n\n\n\n\nUserInfo Endpoint\n\n\nOpenID Connect Session Management\n\n\nEnd Session Endpoint\n\n\nCheck Session iFrame\n\n\n\n\n\n\n\n\n\n\n\n\n\n\noAuth 2 Grants\n\n\n\n\n\n\nOverview\n\n\nOpenID Connect\n (\"Connect\") is a standard\nprofile of OAuth2 which defines a protocol to enable a website or mobile\napplication to send a person to a domain for authentication and required\nattributes (e.g. email address, first name, last name, etc.). OpenID Connect\nalso provides some of the plumbing around authentication to automate how\nthis happens. If a person is visiting a website for the first time, the\nprocess that OpenID Connect defines is 100% bootstrapable by the\nwebsite. This is really critical for Internet scalability. To visit\nsomeone's website, or to send someone an email, you do not need to get\nthe system administrators involved. Connect provides the same type of\nscalable infrastructure for authentication and authorization, and promises to define a base level domain\nidentification.\n\n\nJargon (taxonomy)\n\n\nIf you are familiar with SAML, there are many parallels in OpenID\nConnect, but the jargon (or \"taxonomy\") is different. For example,\ninstead of attributes, we have \"user claims\". Instead of Service\nProvider (SP), we have \"client\". Instead of Identity Provider (IdP), it\nis an OpenID Provider (OP).\n\n\nDiscovery\n\n\nThe first thing you want to know about any OAuth2 API is where are the\nendpoints (i.e. what are the uris where you call the APIs).\nOpenID Connect provides a very simple mechanism to accomplish this: \n\nOpenID Connect Discovery\n.\n\n\nIn order for an OpenID Connect Relying Party to utilize OpenID Connect\nservices for an End-User, the RP needs to know where the OpenID Provider is.\nOpenID Connect uses WebFinger \nWebFinger\n\nto locate the OpenID Provider for an End-User.\n\n\nOnce the OpenID Provider has been identified, the configuration information\nfor the OP is retrieved from a well-known location as a JSON document,\nincluding its OAuth 2.0 endpoint locations.\n\n\nIf you want to try a discovery request, you can make the following\nWebFinger request to discover the Issuer location:\n\n\nGET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}\n\n\n\n\nUsing the Issuer location discovered, the OpenID Provider's configuration information can be retrieved.\n\n\nThe RP makes the following request to the Issuer https://\n/.well-known/openid-configuration to obtain its\nConfiguration information:\n\n\nGET /.well-known/openid-configuration HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"issuer\": \"https://idp.gluu.org\",\n    \"authorization_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n    \"token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/token\",\n    \"userinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/userinfo\",\n    \"clientinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/clientinfo\",\n    \"check_session_iframe\": \"https://idp.gluu.org/oxauth/opiframe\",\n    \"end_session_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/end_session\",\n    \"jwks_uri\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n    \"registration_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/register\",\n    \"validate_token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/validate\",\n    \"federation_metadata_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federationmetadata\",\n    \"federation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federation\",\n    \"id_generation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/id\",\n    \"introspection_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/introspection\",\n    \"scopes_supported\": [\n        \"clientinfo\",\n        \"email\",\n        \"openid\",\n        \"profile\",\n        \"address\",\n        \"uma_protection\",\n        \"user_name\",\n        \"uma_authorization\",\n        \"mobile_phone\",\n        \"phone\"\n    ],\n    \"response_types_supported\": [\n        \"code\",\n        \"code id_token\",\n        \"token\",\n        \"token id_token\",\n        \"code token\",\n        \"code token id_token\",\n        \"id_token\"\n    ],\n    \"grant_types_supported\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n    ],\n    \"acr_values_supported\": [\"\"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"],\n    \"auth_level_mapping\": {\"-1\": [[\"internal\"]]},\n    \"subject_types_supported\": [\n        \"public\",\n        \"pairwise\"\n    ],\n    \"userinfo_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"userinfo_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"userinfo_encryption_enc_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"id_token_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"request_object_signing_alg_values_supported\": [\n        \"none\",\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"request_object_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"request_object_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"token_endpoint_auth_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"display_values_supported\": [\n        \"page\",\n        \"popup\"\n    ],\n    \"claim_types_supported\": [\"normal\"],\n    \"claims_supported\": [\n        \"birthdate\",\n        \"country\",\n        \"name\",\n        \"email\",\n        \"email_verified\",\n        \"given_name\",\n        \"gender\",\n        \"inum\",\n        \"family_name\",\n        \"updated_at\",\n        \"locale\",\n        \"middle_name\",\n        \"nickname\",\n        \"phone_number_verified\",\n        \"picture\",\n        \"preferred_username\",\n        \"profile\",\n        \"zoneinfo\",\n        \"user_name\",\n        \"website\"\n    ],\n    \"service_documentation\": \"http://gluu.org/docs\",\n    \"claims_locales_supported\": [\"en\"],\n    \"ui_locales_supported\": [\n        \"en\", \"es\"\n    ],\n    \"scope_to_claims_mapping\": [\n        {\"clientinfo\": [\n            \"name\",\n            \"inum\"\n        ]},\n        {\"email\": [\n            \"email_verified\",\n            \"email\"\n        ]},\n        {\"openid\": [\"inum\"]},\n        {\"profile\": [\n            \"name\",\n            \"family_name\",\n            \"given_name\",\n            \"middle_name\",\n            \"nickname\",\n            \"preferred_username\",\n            \"profile\",\n            \"picture\",\n            \"website\",\n            \"gender\",\n            \"birthdate\",\n            \"zoneinfo\",\n            \"locale\",\n            \"updated_at\"\n        ]},\n        {\"address\": [\n            \"formatted\",\n            \"postal_code\",\n            \"street_address\",\n            \"locality\",\n            \"country\",\n            \"region\"\n        ]},\n        {\"uma_protection\": []},\n        {\"user_name\": [\"user_name\"]},\n        {\"uma_authorization\": []},\n        {\"mobile_phone\": [\"phone_mobile_number\"]},\n        {\"phone\": [\n            \"phone_number_verified\",\n            \"phone_number\"\n        ]}\n    ],\n    \"claims_parameter_supported\": true,\n    \"request_parameter_supported\": true,\n    \"request_uri_parameter_supported\": true,\n    \"require_request_uri_registration\": false,\n    \"op_policy_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:policy\",\n    \"op_tos_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:tos\",\n    \"http_logout_supported\": \"true\",\n    \"logout_session_supported\": \"true\"\n}\n\n\n\n\nThe following is an example using the \noxAuth-Client\n lib:\n\n\nString resource = \"acct:mike@idp.gluu.org\";\n\nOpenIdConnectDiscoveryClient openIdConnectDiscoveryClient = new OpenIdConnectDiscoveryClient(resource);\nOpenIdConnectDiscoveryResponse openIdConnectDiscoveryResponse = openIdConnectDiscoveryClient.exec();\n\n.....\n\nOpenIdConfigurationClient client = new OpenIdConfigurationClient(configurationEndpoint);\nOpenIdConfigurationResponse response = client.execOpenIdConfiguration();\n\n\n\n\nSee \norg.xdi.oxauth.ws.rs.ConfigurationRestWebServiceHttpTest\n\n\nScopes\n\n\nIn SAML, the IdP releases attributes to the SP. OpenID Connect provides\nsimilar functionality, with more flexibility in case the person needs to\nself-approve the release of information from the IdP to the website (or\nmobile application). In OAuth2, scopes can be used for various purposes.\nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we\ncould have a scope called \"address\" that includes the street, city,\nstate, and country user claims. By default the Gluu Server defines six\nscopes.\n\n\n\n\nThe Gluu Server administrator can easily add more scopes in the GUI.\nClick \nAdd Scope\n and you will be presented with the following screen:\n\n\n\n\nYou will have the ability to provide a Display Name, Description,\nwhether or not the scope is provided by default, and the claims that are\nincluded in the scope.\n\n\nDefault Scope needs some further explanation. When a client uses dynamic\nclient registration, the OpenID Connect specification says that the\n\nopenid\n scope should always be released, which contains an identifier\nfor that person, normally the username. If you want to release another\nscope automatically, set the Default Scope to \ntrue\n for that scope. You\ncan always explicitly release a scope to a certain client later on, but\nthis will require some manual intervention by the domain administrator.\n\n\nTo add more claims, simply click \"Add Claim\" and you will be presented\nwith the following screen:\n\n\n\n\nClient Registration\n\n\nA client in OAuth2 could be either a website or mobile application.\nOpenID Connect has an API for \nDynamic Client\nRegistration\n\nwhich efficiently pushes the task to the application developer. If you\ndo not want to write an application to register your client, there are a\nfew web pages around that can do the job for you. Gluu publishes the\n\noxAuth-RP\n and there is also another in \nPHP\nRP\n.\n\n\nIf you cannot get the developer to help themselves, or if your domain\ndoesn't want to allow dynamic client registration, you can use the\noxTrust admin GUI to manually add trusted clients.\n\n\nAvailable \nClients\n can be seen by hitting the \nSearch\n button\nleaving the search box empty.\n\n\n\n\nA new client can be added by clicking the \nAdd Client\n link.\n\n\n\n\nClicking on the \nAdd Client\n link allows the Gluu Server administrator\nto add a new client. The search box can be used to look up previously\nadded clients as well. The screenshot below shows the interface to add a\nnew client.\n\n\n\n\n\n\n\n\nClient Name:\n This contains the recognizable and unique display name\n  of the client. The name of the Client to be presented to the End-User.\n\n\n\n\n\n\nClient Secret:\n This is the Data Encryption Standard scheme used by\n  Confidential Clients to authenticate to the token endpoint. The value for\n  the secret can be inserted manually, but it is highly recommended to use\n  the Dynamic Client Registration Endpoint. The Gluu oxAuth provides a\n  random, generated Client Secret in the Dynamic Client Registration\n  procedure.\n\n\n\n\n\n\nApplication Type:\n There are two types of applications, Web and\n  Native. The default, if omitted, is web when using the Dynamic\n  Client Registration Endpoint. The different configuration for the\n   different application types are given below.\n\n\n\n\n\n\nWeb:\n The Dynamic Client Registration is the default for web. In\nthis type the redirect_uri for implicit grant type must be a real\nhostname with HTTPS. This type is not approved any localhost or HTTP.\nThe web application uses the authorization code flow for clients which\ncan maintain a client secret between the uris and the authorization\nserver.\n\n\n\n\n\n\nNative:\n Custom uri for Native type application have to follow HTTP\nwith localhost. This is suitable for a mobile app which cannot maintain\nthe client secret between itself and the authorization server.\n\n\n\n\n\n\n\n\n\n\nPre Authorization:\n The Gluu Server disables this option by default,\n  but it is possible to allow pre-authorized Client Applications according to the\n  Organization Policy by the Gluu Server administrator.\n\n\n\n\n\n\nLogo URI:\n The URL of the logo for the client application.\n  If present, the server will display this image to the End-User during approval.\n\n\n\n\n\n\nClient URI:\n The URL of the home page of the client.\n\n\n\n\n\n\nPolicy URI:\n URL that the Relying Party Client provides to the End-User to read about\n  the how the profile data will be used. The value of this field must point\n  to a valid web page. The OpenID Provider will display this URL to the End-User if it is given.\n\n\n\n\n\n\nTerms of Service URI:\n URL that the Relying Party Client provides to the End-User to\n  read about the Relying Party's terms of service. The value of this field must point to\n  a valid web page. The OpenID Provider will display this URL to the End-User if it is given.\n\n\n\n\n\n\nJWKS URI:\n The URL for the Client's JSON Web Key Set document.\n  If the Client signs requests to the Server, it contains the signing key(s) the Server uses to\n  validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s),\n  which are used by the Server to encrypt responses to the Client.\n  When both signing and encryption keys are made available, a use (Key Use) parameter value is\n  required for all keys in the referenced JWK Set to indicate each key's intended usage.\n  Although some algorithms allow the same key to be used for both signatures and encryption,\n  doing so is NOT RECOMMENDED, as it is less secure.\n\n\n\n\n\n\nJWKS:\n Client's JSON Web Key Set document, passed by value.\n  The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the\n  JWK Set is passed by value, rather than by reference.\n  This parameter is intended only to be used by Clients that, for some reason, are unable to use\n  the jwks_uri parameter, for instance, by native applications that might not have a location to\n  host the contents of the JWK Set.\n  If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it\n  does not enable key rotation (which jwks_uri does).\n  The jwks_uri and jwks parameters MUST NOT be used together.\n\n\n\n\n\n\nSector Identifier URI:\n URL using the https scheme to be used in calculating Pseudonymous\n  Identifiers by the OP.\n  The URL references a file with a single JSON array of redirect_uri values.\n  Providers that use pairwise sub (subject) values should utilize the sector_identifier_uri\n  value provided in the Subject Identifier calculation for pairwise identifiers.\n\n\n\n\n\n\nSubject Type:\n The subject type requested for responses to this Client.\n  The subject_types_supported Discovery parameter contains a list of the\n  supported subject_type values for this server. Valid types include pairwise and public.\n\n\n\n\n\n\nJWS alg Algorithm for signing the ID Token:\n JWS alg algorithm for signing the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE alg Algorithm for encrypting the ID Token:\n JWE alg algorithm for encrypting the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting the ID Token:\n JWE enc algorithm for encrypting the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for signing the UserInfo Responses:\n JWS alg algorithm for signing UserInfo Responses.\n  If this is specified, the response will be JWT serialized, and signed using JWS.\n  The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object\n  using the application/json content-type.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for encrypting the UserInfo Responses:\n  JWE alg algorithm for encrypting UserInfo Responses.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting the UserInfo Responses:\n JWE enc algorithm for encrypting UserInfo Responses. \n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for signing Request Objects:\n JWS alg algorithm used for signing Request Objects sent to the OP.\n  This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is\n  passed by reference (using the request_uri parameter).\n  The default, if omitted, is that any algorithm supported by the OP and the RP can be used.\n  The value none can be used.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE alg Algorithm for encrypting Request Objects:\n JWE alg algorithm the RP is declaring that it use for\n  encrypting Request Objects sent to the OP.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting Request Objects:\n JWE enc algorithm the RP is declaring that it may use for\n  encrypting Request Objects sent to the OP.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nAuthentication method for the Token Endpoint:\n Requested Client Authentication method for the Token Endpoint.\n  The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none.\n  If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.\n\n\n\n\n\n\nJWS alg Algorithm for Authentication method to Token Endpoint:\n JWS alg algorithm used for signing the JWT\n  used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt\n  authentication methods. The value none cannot be used.\n  The default, if omitted, is that any algorithm supported by the OP and the RP can be used.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nDefault Maximum Authentication Age:\n Specifies that the End-User must be actively authenticated if the End-User was\n  authenticated longer ago than the specified number of seconds.\n  If omitted, no default Maximum Authentication Age is specified.\n\n\n\n\n\n\nRequire Auth Time:\n Specifies whether the auth_time Claim in the ID Token is required.\n  If omitted, the default value is false.\n\n\n\n\n\n\nPersist Client Authorizations*:\n Specifies whether to persist user authorizations.\n\n\n\n\n\n\nInitiate Login URI:\n URI using the https scheme that a third party can use to initiate a login by the RP.\n\n\n\n\n\n\nRequest URIs:\n Array of request_uri values that are pre-registered by the RP for use at the OP.\n   The Server cache the contents of the files referenced by these URIs and not retrieve them at\n   the time they are used in a request.\n   If the contents of the request file could ever change, these URI values should include the base64url\n   encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment.\n   If the fragment value used for a URI changes, that signals the server that its cached value for that URI\n   with the old fragment value is no longer valid. \n\n\n\n\n\n\nLogout URIs:\n Redirect logout URLs supplied by the RP to which it can request that the End-User's\n  User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.\n\n\n\n\n\n\nLogout Session Required*:\n Specifies whether the RP requires that a sid (session ID) query parameter\n  be included to identify the RP session at the OP when the logout_uri is used.\n  If omitted, the default value is false.\n\n\n\n\n\n\nClient Secret Expires:\n Time at which the client will expire or 0 if it will not expire.\n\n\n\n\n\n\nButtons at the bottom\n\n\n\n\n\n\nAdd Login URI:\n This option can be used to add the login URL.\n\n\n\n\n\n\n\nAdd Scopes:\n This option can be used to add the required scopes in the Gluu Server.\n\n\n\n\n\n\n\nThe available scopes can be listed by hitting the \nSearch\n button, and\n  keeping the search phrase blank. Furthermore, from this the Gluu Server\n  administrator can select the required scopes.\n\n\n\n\n\n\nAdd Response Type:\n There are three types of responses in the Gluu\n  Server and they are Code, Token and ID Token. The Gluu Server\n  Administrator can select all of them for testing purposes.\n\n\n\n\n\n\n\nAdd Grant Type:\n There are 3 grant type available in this option \nauthorization_code, implicit, refresh_token\n\n\n\n\n\n\n\n\nAdd Contact:\n Use this option to add the email address for the Client contact\n\n\n\n\n\n\nAdd Default ACR value:\n Use this option to define the default ACR Value. This value is used to include multi-factor authentication in registered clients.\n\n\n\n\n\n\nAdd Request URI:\n Use this option to add the Request URI\n\n\n\n\n\n\nMulti-Factor Authentication for Clients\n\n\nThe \nacr_values\n parameter is used to specify the use of specific multi-factor authentication for each client. If a scenario is presented where different clients use different authentication mechanism, then the \nacr_value\n parameter is used to specify the choice. Out of the box, GLuu Server supports U2F, DUO, Basic, oxPush/SuperGluu, Google+ and internal LDAP authentication. While registering new clients, put the mode in \nAdd Default ACR value\n to chosen mechanism. The authentication mechanism must be enabled in the \nCustom Scripts\n section as well.\n\n\nSupported ACR Values in Client Registration: \"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"\n\n\nThe values appear in order of preference and the successful authentication is sent as the acr claim value in the issued ID Token. The table below explains the acr values. Please click on the description to access the specific how-to guide for the ACR declared authentication.\n\n\n\n\n\n\n\n\nACR Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nu2f\n\n\nFIDO U2F Device\n\n\n\n\n\n\nduo\n\n\nDuo soft-token authentication\n\n\n\n\n\n\nbasic\n\n\nUsername/Password authentication from LDAP Server\n\n\n\n\n\n\noxpush2\n\n\nMulti-factor authentication\n\n\n\n\n\n\ngplus\n\n\nGoogle+ authentication\n\n\n\n\n\n\ninternal\n\n\nUse Gluu Server LDAP to authenticate users\n\n\n\n\n\n\n\n\nAlgorithm\n\n\noxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.\n\n\nNote:\n It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.\n\n\nAvailable Signature Algorithms:\n none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.\n\n\nEncryption, Key Encryption Algorithms:\n RSA1_5, RSA-OAEP, A128KW, A256KW.\n\n\nBlock Encryption Algorithms:\n A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,\n\n\nCustom Client Registration\n\n\nUsing interception scripts you can customize client registration\nbehavior. For example, by default oxAuth allows new clients to access to\ndefault scopes only. With a custom client registration interception\nscript it is possible to allow access to more scopes. For instance, we\ncan use \nredirect_uri\n to determine if we need to allow access to\nadditional scopes or not.\n\n\nTo access the interface for custom scripts in oxTrust, navigate to\nConfiguration --> Custom Scripts --> Custom Client Registration.\n\n\nTake a look at our \nexample client registration\nscript\n\nfor further reference.\n\n\nSearch clients\n\n\n\n\nView client\n\n\n\n\nSession management\n\n\nLogout is a catch-22. There is no perfect answer to logout that\nsatisfies all the requirements of all the domains on the Internet. For\nexample, large OpenID Providers, like Google, need a totally stateless\nimplementation--Google cannot track sessions on the server side for\nevery browser on the Internet. But in smaller domains, server side\nlogout functionality can be a convenient solution to cleaning up\nresources.\n\n\nThe OpenID Connect \nSession\nManagement\n is\nstill marked as draft, and new mechanisms for logout are in the works.\nThe current specification requires JavaScript to detect that the session\nhas been ended in the browser. It works... unless the tab with the\nJavaScript happens to be closed when the logout event happens on another\ntab. Also, inserting JavaScript into every page is not feasible for some\napplications. A new proposal is under discussion where the OpenID\nConnect logout API would return \nIMG\n HTML tags to the browser with the\nlogout callbacks of the clients. This way, the browser could call the\nlogout uris (not the server).\n\n\nThe Gluu Server is very flexible, and supports both server side session\nmanagement, and stateless session management. For server side business\nlogout, the domain admin can use Custom Logout scripts. This can be\nuseful to clean up sessions in a legacy SSO system (i.e. SiteMinder), or\nperhaps in a portal.\n\n\nThe key for logout is to understand the limitations of logout, and to\ntest the use cases that are important to you, so you will not be\nsurprised by the behavior when you put your application into production.\n\n\nTesting with oxAuth RP\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nOr deploy \noxAuth-rp.war\n\n\n\n\nOpenID Connect Discovery\n\n\n\n\nEnter an identifier, for example: https://seed.gluu.org or acct:mike@seed.gluu.org\n\n\nClick submit.\n\n\n\n\n\n\nDynamic Client Registration\n\n\n\n\nClient Read\n\n\n\n\nAuthorization Endpoint\n\n\nRequest Authorization and receive the Authorization Code and ID Token\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Authorization Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize)\n\n\nSelect the Response Types: CODE and ID_TOKEN\n\n\nEnter the Client ID (eg: @!EDFB.879F.2DAE.D95A!0001!0442.B31E!0008!A2DA.C10F)\n\n\nSelect the desired scopes: OpenID is mandatory, profile, address,\n    email and phone are optional.\n\n\nEnter a Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam\n\n\nOptionally enter a state value.\n\n\nClick submit.\n\n\n\n\n\n\nRequest Access Token using the Authorization Code\n\n\n\n\nOnce redirected back to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Token Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)\n\n\nSelect the Grant Type: AUTHORIZATION_CODE\n\n\nEnter the Client ID.\n\n\nEnter the Client Secret.\n\n\nEnter the Code received from the previous request\n\n\nEnter the Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam\n\n\nEnter the scopes: OpenID profile address email phone.\n\n\nClick submit.\n\n\n\n\n\n\nRequest new Access Token using the Refresh Token\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Token Endpoint (https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)\n\n\nSelect the Grant Type: REFRESH_TOKEN\n\n\nEnter the Client ID.\n\n\nEnter the Client Secret.\n\n\nEnter the Refresh Token received in a previous request.\n\n\nClick submit.\n\n\n\n\n\n\nUserInfo Endpoint\n\n\n\n\nOpenID Connect Session Management\n\n\nEnd Session Endpoint\n\n\n\n\nCheck Session iFrame\n\n\n\n\noAuth 2 Grants\n\n\nThere are two additional flows that the Gluu Server supports for user\nand client authentication, which are not part of the OpenID Connect\nspecification. The flows are explained in the following page.\n\n\n\n\noAuth 2 Grants",
            "title": "OpenID Connect"
        },
        {
            "location": "/integrate/openid-connect/#table-of-contents",
            "text": "Table of Contents  Overview  Jargon (taxonomy)  Discovery  Scopes  Client Registration  Multi-Factor Authentication for Clients  Algorithm  Custom Client Registration  Search clients  View client    Session management  Testing with oxAuth RP  OpenID Connect Discovery  Dynamic Client Registration  Client Read    Authorization Endpoint  Request Authorization and receive the Authorization Code and ID Token  Request Access Token using the Authorization Code  Request new Access Token using the Refresh Token    UserInfo Endpoint  OpenID Connect Session Management  End Session Endpoint  Check Session iFrame        oAuth 2 Grants",
            "title": "Table of Contents"
        },
        {
            "location": "/integrate/openid-connect/#overview",
            "text": "OpenID Connect  (\"Connect\") is a standard\nprofile of OAuth2 which defines a protocol to enable a website or mobile\napplication to send a person to a domain for authentication and required\nattributes (e.g. email address, first name, last name, etc.). OpenID Connect\nalso provides some of the plumbing around authentication to automate how\nthis happens. If a person is visiting a website for the first time, the\nprocess that OpenID Connect defines is 100% bootstrapable by the\nwebsite. This is really critical for Internet scalability. To visit\nsomeone's website, or to send someone an email, you do not need to get\nthe system administrators involved. Connect provides the same type of\nscalable infrastructure for authentication and authorization, and promises to define a base level domain\nidentification.",
            "title": "Overview"
        },
        {
            "location": "/integrate/openid-connect/#jargon-taxonomy",
            "text": "If you are familiar with SAML, there are many parallels in OpenID\nConnect, but the jargon (or \"taxonomy\") is different. For example,\ninstead of attributes, we have \"user claims\". Instead of Service\nProvider (SP), we have \"client\". Instead of Identity Provider (IdP), it\nis an OpenID Provider (OP).",
            "title": "Jargon (taxonomy)"
        },
        {
            "location": "/integrate/openid-connect/#discovery",
            "text": "The first thing you want to know about any OAuth2 API is where are the\nendpoints (i.e. what are the uris where you call the APIs).\nOpenID Connect provides a very simple mechanism to accomplish this:  OpenID Connect Discovery .  In order for an OpenID Connect Relying Party to utilize OpenID Connect\nservices for an End-User, the RP needs to know where the OpenID Provider is.\nOpenID Connect uses WebFinger  WebFinger \nto locate the OpenID Provider for an End-User.  Once the OpenID Provider has been identified, the configuration information\nfor the OP is retrieved from a well-known location as a JSON document,\nincluding its OAuth 2.0 endpoint locations.  If you want to try a discovery request, you can make the following\nWebFinger request to discover the Issuer location:  GET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}  Using the Issuer location discovered, the OpenID Provider's configuration information can be retrieved.  The RP makes the following request to the Issuer https:// /.well-known/openid-configuration to obtain its\nConfiguration information:  GET /.well-known/openid-configuration HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"issuer\": \"https://idp.gluu.org\",\n    \"authorization_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n    \"token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/token\",\n    \"userinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/userinfo\",\n    \"clientinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/clientinfo\",\n    \"check_session_iframe\": \"https://idp.gluu.org/oxauth/opiframe\",\n    \"end_session_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/end_session\",\n    \"jwks_uri\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n    \"registration_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/register\",\n    \"validate_token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/validate\",\n    \"federation_metadata_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federationmetadata\",\n    \"federation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federation\",\n    \"id_generation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/id\",\n    \"introspection_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/introspection\",\n    \"scopes_supported\": [\n        \"clientinfo\",\n        \"email\",\n        \"openid\",\n        \"profile\",\n        \"address\",\n        \"uma_protection\",\n        \"user_name\",\n        \"uma_authorization\",\n        \"mobile_phone\",\n        \"phone\"\n    ],\n    \"response_types_supported\": [\n        \"code\",\n        \"code id_token\",\n        \"token\",\n        \"token id_token\",\n        \"code token\",\n        \"code token id_token\",\n        \"id_token\"\n    ],\n    \"grant_types_supported\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n    ],\n    \"acr_values_supported\": [\"\"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"],\n    \"auth_level_mapping\": {\"-1\": [[\"internal\"]]},\n    \"subject_types_supported\": [\n        \"public\",\n        \"pairwise\"\n    ],\n    \"userinfo_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"userinfo_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"userinfo_encryption_enc_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"id_token_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"request_object_signing_alg_values_supported\": [\n        \"none\",\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"request_object_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"request_object_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"token_endpoint_auth_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"display_values_supported\": [\n        \"page\",\n        \"popup\"\n    ],\n    \"claim_types_supported\": [\"normal\"],\n    \"claims_supported\": [\n        \"birthdate\",\n        \"country\",\n        \"name\",\n        \"email\",\n        \"email_verified\",\n        \"given_name\",\n        \"gender\",\n        \"inum\",\n        \"family_name\",\n        \"updated_at\",\n        \"locale\",\n        \"middle_name\",\n        \"nickname\",\n        \"phone_number_verified\",\n        \"picture\",\n        \"preferred_username\",\n        \"profile\",\n        \"zoneinfo\",\n        \"user_name\",\n        \"website\"\n    ],\n    \"service_documentation\": \"http://gluu.org/docs\",\n    \"claims_locales_supported\": [\"en\"],\n    \"ui_locales_supported\": [\n        \"en\", \"es\"\n    ],\n    \"scope_to_claims_mapping\": [\n        {\"clientinfo\": [\n            \"name\",\n            \"inum\"\n        ]},\n        {\"email\": [\n            \"email_verified\",\n            \"email\"\n        ]},\n        {\"openid\": [\"inum\"]},\n        {\"profile\": [\n            \"name\",\n            \"family_name\",\n            \"given_name\",\n            \"middle_name\",\n            \"nickname\",\n            \"preferred_username\",\n            \"profile\",\n            \"picture\",\n            \"website\",\n            \"gender\",\n            \"birthdate\",\n            \"zoneinfo\",\n            \"locale\",\n            \"updated_at\"\n        ]},\n        {\"address\": [\n            \"formatted\",\n            \"postal_code\",\n            \"street_address\",\n            \"locality\",\n            \"country\",\n            \"region\"\n        ]},\n        {\"uma_protection\": []},\n        {\"user_name\": [\"user_name\"]},\n        {\"uma_authorization\": []},\n        {\"mobile_phone\": [\"phone_mobile_number\"]},\n        {\"phone\": [\n            \"phone_number_verified\",\n            \"phone_number\"\n        ]}\n    ],\n    \"claims_parameter_supported\": true,\n    \"request_parameter_supported\": true,\n    \"request_uri_parameter_supported\": true,\n    \"require_request_uri_registration\": false,\n    \"op_policy_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:policy\",\n    \"op_tos_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:tos\",\n    \"http_logout_supported\": \"true\",\n    \"logout_session_supported\": \"true\"\n}  The following is an example using the  oxAuth-Client  lib:  String resource = \"acct:mike@idp.gluu.org\";\n\nOpenIdConnectDiscoveryClient openIdConnectDiscoveryClient = new OpenIdConnectDiscoveryClient(resource);\nOpenIdConnectDiscoveryResponse openIdConnectDiscoveryResponse = openIdConnectDiscoveryClient.exec();\n\n.....\n\nOpenIdConfigurationClient client = new OpenIdConfigurationClient(configurationEndpoint);\nOpenIdConfigurationResponse response = client.execOpenIdConfiguration();  See  org.xdi.oxauth.ws.rs.ConfigurationRestWebServiceHttpTest",
            "title": "Discovery"
        },
        {
            "location": "/integrate/openid-connect/#scopes",
            "text": "In SAML, the IdP releases attributes to the SP. OpenID Connect provides\nsimilar functionality, with more flexibility in case the person needs to\nself-approve the release of information from the IdP to the website (or\nmobile application). In OAuth2, scopes can be used for various purposes.\nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we\ncould have a scope called \"address\" that includes the street, city,\nstate, and country user claims. By default the Gluu Server defines six\nscopes.   The Gluu Server administrator can easily add more scopes in the GUI.\nClick  Add Scope  and you will be presented with the following screen:   You will have the ability to provide a Display Name, Description,\nwhether or not the scope is provided by default, and the claims that are\nincluded in the scope.  Default Scope needs some further explanation. When a client uses dynamic\nclient registration, the OpenID Connect specification says that the openid  scope should always be released, which contains an identifier\nfor that person, normally the username. If you want to release another\nscope automatically, set the Default Scope to  true  for that scope. You\ncan always explicitly release a scope to a certain client later on, but\nthis will require some manual intervention by the domain administrator.  To add more claims, simply click \"Add Claim\" and you will be presented\nwith the following screen:",
            "title": "Scopes"
        },
        {
            "location": "/integrate/openid-connect/#client-registration",
            "text": "A client in OAuth2 could be either a website or mobile application.\nOpenID Connect has an API for  Dynamic Client\nRegistration \nwhich efficiently pushes the task to the application developer. If you\ndo not want to write an application to register your client, there are a\nfew web pages around that can do the job for you. Gluu publishes the oxAuth-RP  and there is also another in  PHP\nRP .  If you cannot get the developer to help themselves, or if your domain\ndoesn't want to allow dynamic client registration, you can use the\noxTrust admin GUI to manually add trusted clients.  Available  Clients  can be seen by hitting the  Search  button\nleaving the search box empty.   A new client can be added by clicking the  Add Client  link.   Clicking on the  Add Client  link allows the Gluu Server administrator\nto add a new client. The search box can be used to look up previously\nadded clients as well. The screenshot below shows the interface to add a\nnew client.     Client Name:  This contains the recognizable and unique display name\n  of the client. The name of the Client to be presented to the End-User.    Client Secret:  This is the Data Encryption Standard scheme used by\n  Confidential Clients to authenticate to the token endpoint. The value for\n  the secret can be inserted manually, but it is highly recommended to use\n  the Dynamic Client Registration Endpoint. The Gluu oxAuth provides a\n  random, generated Client Secret in the Dynamic Client Registration\n  procedure.    Application Type:  There are two types of applications, Web and\n  Native. The default, if omitted, is web when using the Dynamic\n  Client Registration Endpoint. The different configuration for the\n   different application types are given below.    Web:  The Dynamic Client Registration is the default for web. In\nthis type the redirect_uri for implicit grant type must be a real\nhostname with HTTPS. This type is not approved any localhost or HTTP.\nThe web application uses the authorization code flow for clients which\ncan maintain a client secret between the uris and the authorization\nserver.    Native:  Custom uri for Native type application have to follow HTTP\nwith localhost. This is suitable for a mobile app which cannot maintain\nthe client secret between itself and the authorization server.      Pre Authorization:  The Gluu Server disables this option by default,\n  but it is possible to allow pre-authorized Client Applications according to the\n  Organization Policy by the Gluu Server administrator.    Logo URI:  The URL of the logo for the client application.\n  If present, the server will display this image to the End-User during approval.    Client URI:  The URL of the home page of the client.    Policy URI:  URL that the Relying Party Client provides to the End-User to read about\n  the how the profile data will be used. The value of this field must point\n  to a valid web page. The OpenID Provider will display this URL to the End-User if it is given.    Terms of Service URI:  URL that the Relying Party Client provides to the End-User to\n  read about the Relying Party's terms of service. The value of this field must point to\n  a valid web page. The OpenID Provider will display this URL to the End-User if it is given.    JWKS URI:  The URL for the Client's JSON Web Key Set document.\n  If the Client signs requests to the Server, it contains the signing key(s) the Server uses to\n  validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s),\n  which are used by the Server to encrypt responses to the Client.\n  When both signing and encryption keys are made available, a use (Key Use) parameter value is\n  required for all keys in the referenced JWK Set to indicate each key's intended usage.\n  Although some algorithms allow the same key to be used for both signatures and encryption,\n  doing so is NOT RECOMMENDED, as it is less secure.    JWKS:  Client's JSON Web Key Set document, passed by value.\n  The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the\n  JWK Set is passed by value, rather than by reference.\n  This parameter is intended only to be used by Clients that, for some reason, are unable to use\n  the jwks_uri parameter, for instance, by native applications that might not have a location to\n  host the contents of the JWK Set.\n  If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it\n  does not enable key rotation (which jwks_uri does).\n  The jwks_uri and jwks parameters MUST NOT be used together.    Sector Identifier URI:  URL using the https scheme to be used in calculating Pseudonymous\n  Identifiers by the OP.\n  The URL references a file with a single JSON array of redirect_uri values.\n  Providers that use pairwise sub (subject) values should utilize the sector_identifier_uri\n  value provided in the Subject Identifier calculation for pairwise identifiers.    Subject Type:  The subject type requested for responses to this Client.\n  The subject_types_supported Discovery parameter contains a list of the\n  supported subject_type values for this server. Valid types include pairwise and public.    JWS alg Algorithm for signing the ID Token:  JWS alg algorithm for signing the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWE alg Algorithm for encrypting the ID Token:  JWE alg algorithm for encrypting the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting the ID Token:  JWE enc algorithm for encrypting the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWS alg Algorithm for signing the UserInfo Responses:  JWS alg algorithm for signing UserInfo Responses.\n  If this is specified, the response will be JWT serialized, and signed using JWS.\n  The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object\n  using the application/json content-type.\n  See  Algorithms section  for options.    JWS alg Algorithm for encrypting the UserInfo Responses:   JWE alg algorithm for encrypting UserInfo Responses.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting the UserInfo Responses:  JWE enc algorithm for encrypting UserInfo Responses. \n  See  Algorithms section  for options.    JWS alg Algorithm for signing Request Objects:  JWS alg algorithm used for signing Request Objects sent to the OP.\n  This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is\n  passed by reference (using the request_uri parameter).\n  The default, if omitted, is that any algorithm supported by the OP and the RP can be used.\n  The value none can be used.\n  See  Algorithms section  for options.    JWE alg Algorithm for encrypting Request Objects:  JWE alg algorithm the RP is declaring that it use for\n  encrypting Request Objects sent to the OP.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting Request Objects:  JWE enc algorithm the RP is declaring that it may use for\n  encrypting Request Objects sent to the OP.\n  See  Algorithms section  for options.    Authentication method for the Token Endpoint:  Requested Client Authentication method for the Token Endpoint.\n  The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none.\n  If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.    JWS alg Algorithm for Authentication method to Token Endpoint:  JWS alg algorithm used for signing the JWT\n  used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt\n  authentication methods. The value none cannot be used.\n  The default, if omitted, is that any algorithm supported by the OP and the RP can be used.\n  See  Algorithms section  for options.    Default Maximum Authentication Age:  Specifies that the End-User must be actively authenticated if the End-User was\n  authenticated longer ago than the specified number of seconds.\n  If omitted, no default Maximum Authentication Age is specified.    Require Auth Time:  Specifies whether the auth_time Claim in the ID Token is required.\n  If omitted, the default value is false.    Persist Client Authorizations*:  Specifies whether to persist user authorizations.    Initiate Login URI:  URI using the https scheme that a third party can use to initiate a login by the RP.    Request URIs:  Array of request_uri values that are pre-registered by the RP for use at the OP.\n   The Server cache the contents of the files referenced by these URIs and not retrieve them at\n   the time they are used in a request.\n   If the contents of the request file could ever change, these URI values should include the base64url\n   encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment.\n   If the fragment value used for a URI changes, that signals the server that its cached value for that URI\n   with the old fragment value is no longer valid.     Logout URIs:  Redirect logout URLs supplied by the RP to which it can request that the End-User's\n  User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.    Logout Session Required*:  Specifies whether the RP requires that a sid (session ID) query parameter\n  be included to identify the RP session at the OP when the logout_uri is used.\n  If omitted, the default value is false.    Client Secret Expires:  Time at which the client will expire or 0 if it will not expire.    Buttons at the bottom    Add Login URI:  This option can be used to add the login URL.    Add Scopes:  This option can be used to add the required scopes in the Gluu Server.    The available scopes can be listed by hitting the  Search  button, and\n  keeping the search phrase blank. Furthermore, from this the Gluu Server\n  administrator can select the required scopes.    Add Response Type:  There are three types of responses in the Gluu\n  Server and they are Code, Token and ID Token. The Gluu Server\n  Administrator can select all of them for testing purposes.    Add Grant Type:  There are 3 grant type available in this option  authorization_code, implicit, refresh_token     Add Contact:  Use this option to add the email address for the Client contact    Add Default ACR value:  Use this option to define the default ACR Value. This value is used to include multi-factor authentication in registered clients.    Add Request URI:  Use this option to add the Request URI    Multi-Factor Authentication for Clients  The  acr_values  parameter is used to specify the use of specific multi-factor authentication for each client. If a scenario is presented where different clients use different authentication mechanism, then the  acr_value  parameter is used to specify the choice. Out of the box, GLuu Server supports U2F, DUO, Basic, oxPush/SuperGluu, Google+ and internal LDAP authentication. While registering new clients, put the mode in  Add Default ACR value  to chosen mechanism. The authentication mechanism must be enabled in the  Custom Scripts  section as well.  Supported ACR Values in Client Registration: \"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"  The values appear in order of preference and the successful authentication is sent as the acr claim value in the issued ID Token. The table below explains the acr values. Please click on the description to access the specific how-to guide for the ACR declared authentication.     ACR Value  Description      u2f  FIDO U2F Device    duo  Duo soft-token authentication    basic  Username/Password authentication from LDAP Server    oxpush2  Multi-factor authentication    gplus  Google+ authentication    internal  Use Gluu Server LDAP to authenticate users     Algorithm  oxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.  Note:  It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.  Available Signature Algorithms:  none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.  Encryption, Key Encryption Algorithms:  RSA1_5, RSA-OAEP, A128KW, A256KW.  Block Encryption Algorithms:  A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,  Custom Client Registration  Using interception scripts you can customize client registration\nbehavior. For example, by default oxAuth allows new clients to access to\ndefault scopes only. With a custom client registration interception\nscript it is possible to allow access to more scopes. For instance, we\ncan use  redirect_uri  to determine if we need to allow access to\nadditional scopes or not.  To access the interface for custom scripts in oxTrust, navigate to\nConfiguration --> Custom Scripts --> Custom Client Registration.  Take a look at our  example client registration\nscript \nfor further reference.  Search clients   View client",
            "title": "Client Registration"
        },
        {
            "location": "/integrate/openid-connect/#session-management",
            "text": "Logout is a catch-22. There is no perfect answer to logout that\nsatisfies all the requirements of all the domains on the Internet. For\nexample, large OpenID Providers, like Google, need a totally stateless\nimplementation--Google cannot track sessions on the server side for\nevery browser on the Internet. But in smaller domains, server side\nlogout functionality can be a convenient solution to cleaning up\nresources.  The OpenID Connect  Session\nManagement  is\nstill marked as draft, and new mechanisms for logout are in the works.\nThe current specification requires JavaScript to detect that the session\nhas been ended in the browser. It works... unless the tab with the\nJavaScript happens to be closed when the logout event happens on another\ntab. Also, inserting JavaScript into every page is not feasible for some\napplications. A new proposal is under discussion where the OpenID\nConnect logout API would return  IMG  HTML tags to the browser with the\nlogout callbacks of the clients. This way, the browser could call the\nlogout uris (not the server).  The Gluu Server is very flexible, and supports both server side session\nmanagement, and stateless session management. For server side business\nlogout, the domain admin can use Custom Logout scripts. This can be\nuseful to clean up sessions in a legacy SSO system (i.e. SiteMinder), or\nperhaps in a portal.  The key for logout is to understand the limitations of logout, and to\ntest the use cases that are important to you, so you will not be\nsurprised by the behavior when you put your application into production.",
            "title": "Session management"
        },
        {
            "location": "/integrate/openid-connect/#testing-with-oxauth-rp",
            "text": "Go to https://seed.gluu.org/oxauth-rp  Or deploy  oxAuth-rp.war   OpenID Connect Discovery   Enter an identifier, for example: https://seed.gluu.org or acct:mike@seed.gluu.org  Click submit.    Dynamic Client Registration   Client Read   Authorization Endpoint  Request Authorization and receive the Authorization Code and ID Token   Go to https://seed.gluu.org/oxauth-rp  Enter the Authorization Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize)  Select the Response Types: CODE and ID_TOKEN  Enter the Client ID (eg: @!EDFB.879F.2DAE.D95A!0001!0442.B31E!0008!A2DA.C10F)  Select the desired scopes: OpenID is mandatory, profile, address,\n    email and phone are optional.  Enter a Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam  Optionally enter a state value.  Click submit.    Request Access Token using the Authorization Code   Once redirected back to https://seed.gluu.org/oxauth-rp  Enter the Token Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)  Select the Grant Type: AUTHORIZATION_CODE  Enter the Client ID.  Enter the Client Secret.  Enter the Code received from the previous request  Enter the Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam  Enter the scopes: OpenID profile address email phone.  Click submit.    Request new Access Token using the Refresh Token   Go to https://seed.gluu.org/oxauth-rp  Enter the Token Endpoint (https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)  Select the Grant Type: REFRESH_TOKEN  Enter the Client ID.  Enter the Client Secret.  Enter the Refresh Token received in a previous request.  Click submit.    UserInfo Endpoint   OpenID Connect Session Management  End Session Endpoint   Check Session iFrame",
            "title": "Testing with oxAuth RP"
        },
        {
            "location": "/integrate/openid-connect/#oauth-2-grants",
            "text": "There are two additional flows that the Gluu Server supports for user\nand client authentication, which are not part of the OpenID Connect\nspecification. The flows are explained in the following page.   oAuth 2 Grants",
            "title": "oAuth 2 Grants"
        },
        {
            "location": "/integrate/uma/",
            "text": "Enterprise UMA\n\n\nUMA in Action\n\n\nUMA Authorization Workflow\n\n\nDetailed Authorization Overview\n\n\nUMA Authorization Token Workflow\n\n\nUMA Authorization Complete Sequence\n\n\n\n\n\n\nDiscovery\n\n\nResource Registration\n\n\nRegister resource via oxTrust\n\n\n\n\n\n\nUMA Scopes\n\n\nDefine UMA Scopes via oxTrust\n\n\nImplementation specificity\n\n\nExternal sample ldif\n\n\nInternal sample ldif\n\n\n\n\n\n\n\n\n\n\nUMA Policies\n\n\nDefine Policies\n\n\nAlgorithm\n\n\n\n\n\n\nRequesting party trust elevation\n\n\nUMA Resource Server Java Library\n\n\nUsage\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nEnterprise UMA\n\n\nThe Gluu Server implements UMA in a way that enables the protection\nof any web resource. Through the oxTrust interface, the server admin can\nwrite custom \nauthorization interception\nscripts\n\nwhich may contain logic to grant (or forbid) access. All terminology\nused by this page is borrowed from UMA and Connect specs.\n\n\nUMA in Action\n\n\nThe diagrams below detail how the various UMA actors interact.\n\n\nSome helpful definitions:\n- \nResource Owner (RO)\n: An OAuth resource owner that is the \"user\" in\n  User-Managed Access. This is typically an end-user (a natural person)\n  but it can also be a corporation or other legal person. \n\n- \nResource Server (RS)\n: Where the resources are held.  \n\n- \nAuthorization Server (AS)\n: A server that governs access based on resource owner policies.   \n\n- \nRequesting Party (RP)\n: An end-user, or a corporation or other legal\n  person, that uses a client to seek access to a protected resource. The\n  requesting party may or may not be the same party as the resource owner.  \n\n- \nClient\n: A web or native app that is used to access a digital\n  resource.   \n\n- \nProtection API Token (PAT)\n: An entity seeking protection API access\n  MUST have the scope \"uma_protection\". An access token with at least\n  this scope is called a protection API token (PAT) and an entity that\n  can acquire an access token with this scope is by definition a resource\n  server.   \n\n- \nRequesting Party Token (RPT)\n: the token that a client presents to a\n  resource server when trying to access a protected resource.   \n\n- \nAuthorization API Token (AAT)\n: An entity seeking authorization API\n  access MUST have the scope \"uma_authorization\". An access token with\n  at least this scope is called an authorization API token (AAT) and an\n  entity that can acquire an access token with this scope is by \n  definition a client.      \n\n\nUMA Authorization Workflow\n\n\n\n\nDetailed Authorization Overview\n\n\n\n\nUMA Authorization Token Workflow\n\n\n\n\nUMA Authorization Complete Sequence\n\n\n\n\nDiscovery\n\n\nThe Gluu Server exposes an endpoint for discovering information about\nUMA Provider configuration. A resource server or client can perform an\nHTTP GET on \nhttps://domain.com/.well-known/uma-configuration\n to\nretrieve a JSON object indicating the UMA Provider configuration.\n\n\nGluu Server response for UMA configuration MAY contain standard\nproperties (defined by UMA specification) as well as custom properties\n(extension that is out of scope of this document). Gluu Server\nguarantees property name uniqueness within response.\n\n\nThe following is an example of a GET request to the UMA configuration\ndiscovery endpoint:\n\n\n{\n  \"version\": \"1.0\",\n  \"issuer\": \"https://gluuserver.org\",\n  \"pat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"aat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"rpt_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"pat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"aat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"claim_profiles_supported\": [\n    \"openid\"\n  ],\n  \"dynamic_client_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\",\n  \"token_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\",\n  \"user_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n  \"introspection_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/status\",\n  \"resource_set_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\",\n  \"permission_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\",\n  \"rpt_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\",\n  \"authorization_request_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\",\n  \"scope_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\"\n}\n\n\n\n\nThe JSON object returned includes the following configuration\ninformation:\n\n\nversion\n: the supported UMA core protocol version.\n\n\nissuer\n: the uri of the issuing authorization server.\n\n\npat_profiles_supported\n: the supported OAuth token types used for\nissuing Protection API Tokens (PATs).\n\n\naat_profiles_supported\n: the supported OAuth token types used for\nissuing Authorization API Tokens (AATs).\n\n\nrpt_profiles_supported\n: the supported Requesting Party Token (RPT)\nprofiles.\n\n\npat_grant_types_supported\n: the supported OAuth grant types used for\nissuing PATs.\n\n\naat_grant_types_supported\n: the supported OAuth grant types used for\nissuing AATs.\n\n\ntoken_endpoint\n: the uri to request a PAT or AAT.\n\n\nauthorization_endpoint\n: the uri to request authorization for issuing a\nPAT or AAT.\n\n\nintrospection_endpoint\n: the uri to introspect an RPT.\n\n\nresource_set_registration_endpoint\n: the uri for a resource server to\nregister a resource set.\n\n\npermission_registration_endpoint\n: the uri for a resource server to\nregister a requested permission.\n\n\nrpt_endpoint\n: the uri for the client to request authorization data.\n\n\ndynamic_client_endpoint\n: the uri for registering a dynamic client.\n\n\nResource Registration\n\n\nTo let the Gluu Server know which resources are protected by UMA they\nmust be registered. Resources are described by the following properties:\n\n\n\n\nname: name of resource\n\n\nscopes: scopes that are available for this resource\n\n\ntype: type of resource (it can be string, uri or what ever, basically\n  it is up to Resource Server what type it should be).\n\n\nicon_uri: uri to the icon.\n\n\n\n\nThese are standard properties however a resource description MAY contain\ncustom properties.\n\n\nRegister resource via oxTrust\n\n\n\n\n\n\nUMA Scopes\n\n\nUMA Scopes are bound to resource sets and are used by policies to check\nwhether the specified user has access to the resource. An UMA Scope is\ndescribed in JSON and has the following properties:\n\n\n\n\nname: name of scope (e.g. View photo, Edit photo)\n\n\nicon_uri: optional property to specify an icon for the photo\n\n\n\n\nAn example of a typical JSON document of scope can be seen here:\n\n\n{\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}\n\n\n\n\nThe scope JSON MAY contain custom properties which are out of scope of\nthis document.\n\n\nDefine UMA Scopes via oxTrust\n\n\n\n\n\n\nImplementation specificity\n\n\nThe following types of scopes exist:\n\n\n\n\ninternal: hosted on oxAuth (must provide a scope description).\n\n\nexternal: hosted on other servers.\n\n\nexternal_auto: a scope hosted on another server but which is\n  automatically added during resource set registration or update.\n\n\n\n\nNote:\n there is no uri for an internal scope because it is\nconfigurable and depends on oxAuth hosting.\n\n\nUMA url = uma_scopes_endpoint + \"/\" + oxId;\n\n\nhttp://gluu.org/uma/scopes/view = http://gluu.org/uma/scopes + \"/\" + view\n\n\nA server has to provide a scope description as JSON document. The\nfollowing uri is in use: http://gluu.org/uma/scopes/view\n\n\nNote:\n The scope endpoint has to be present in UMA configuration to\nmake it discoverable.\n\n\nExternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view\n\n\n\n\nInternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png\n\n\n\n\nUMA Policies\n\n\nUMA Policies protect UMA Resources. The protection of resources are made\nvia scopes. Gluu Server evaluates all policies (identified by scopes) in\norder to grant access.\n\n\nThe UMA Policy main properties are:\n\n\n\n\nscopes: policy protects resources by scopes.\n\n\nauthorization script: script that is evaluated in order to grant or\n  deny access (script basically returns true or false to the server).\n\n\nname: it is best to provide an easily understandable name to the\n  policy so that it is clear what the policy protects.\n\n\n\n\nDefine Policies\n\n\nWithin the oxTrust interface the Gluu Server admin can define UMA\npolicies (pictured below). To achieve this, navigate to Configuration >\nManage Custom Scripts > UMA Authorization policies.\n\n\nYou can find more information on crafting UMA policies as well as an\nexample script\n\nhere\n.\n\n\n\n\nAlgorithm\n\n\nThe algorithm follows theses rules:\n\n\n\n\nPolicy protects resources based on scopes. If a scope is protected by\n  a policy then during RPT authorization such a policy script has to\n  return true in order to authorize access to resource, otherwise\n  authorization is denied.\n\n\nScope can be protected by multiple policies. If one scope is protected\n  by multiple policies then all policies have to return true to\n  authorize access. If at least one policy returned false then the\n  authorization is denied.\n\n\n\n\n \n\n\nRequesting party trust elevation\n\n\nThis section defines the OX claim profile for UMA. Following is a\nsummary:\n\n\n\n\nIdentifying uri: http://gluu.org/uma/profiles/uma-claim-gluu-1.0\n\n\nProfile author and contact information: Michael Schwartz and Yuriy Zabrovarnyy (info@gluu.org)\n\n\nUpdates or obsoletes: None; this profile is new.\n\n\nSyntax and semantics of claim data: As defined below.\n\n\nClaims gathering method: As defined below.\n\n\nError states: \"need_reauthentication\" in case AAT is not \"strong\" enough.\n\n\nSecurity and privacy considerations: None additional.\n\n\nBinding obligations: None additional.\n\n\n\n\nIf an authorization server supports the OX claim profile, it MUST supply\nthe \"ox\" value for one of its \"claim_profiles_supported\" values in its\nconfiguration data.\n\n\nTo conform to this option, the authorization server MUST do the following:\n\n\n\n\nsend \"need_reauthentication\" error in case AAT does not correspond\n    to authentication level and (or) mode of authorization policy.\n    Together with error authorization server MUST provide:\n\n\ndomain_auth_level - REQUIRED. authentication level required to\n    satisfy authorization policy.\n\n\ndomain_auth_mode - REQUIRED. authentication mode required to\n    satisfy authorization policy.\n\n\nauthentication_uri - OPTIONAL. authorization server\n    authentication uri for re-authentication with required\n    authentication level and mode\n\n\n\n\n\n\n\n\nFor example:\n\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n{\n  \"status\": \"error\",\n  \"error\": \"need_reauthentication\",\n  \"domain_auth_level\":20,\n  \"domain_auth_mode\":\"duo\",\n  \"required_acr_level\":2,\n  \"required_acr_uri\":\"http://example.com/global_acr\",\n  \"authentication_uri\":\"http://seed.gluu.org/oxauth?auth_level=20&auth_mode=duo&client_id=...\"\n}\n\n\n\n\nUMA Resource Server Java Library\n\n\nUMA RS Java Library\n helps to easily protect Java based project with UMA in declarative way.\n\n\nSample declaration\n\n\n{\"resources\":[\n    {\n        \"path\":\"/photo\",\n        \"conditions\":[\n            {\n                \"httpMethods\":[\"GET\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/view\"\n                ]\n            },\n            {\n                \"httpMethods\":[\"PUT\", \"POST\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/all\",\n                    \"http://photoz.example.com/dev/actions/add\"\n                ],\n                \"ticketScopes\":[\n                    \"http://photoz.example.com/dev/actions/add\"\n                ]\n            }\n        ]\n    },\n    {\n        \"path\":\"/document\",\n        \"conditions\":[\n            {\n                \"httpMethods\":[\"GET\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/view\"\n                ]\n            }\n        ]\n    }\n]\n}\n\n\n\n\nticketScopes\n are used for UMA ticket registration. If it is skipped then ALL scopes are registered for ticket.\n\n\nUsage\n\n\nConfiguration configuration = ConfigurationLoader.loadFromJson(inputStream(CONFIGURATION_FILE_NAME));\nCollection<RsResource> values = RsProtector.instance(inputStream(PROTECTION_CONFIGURATION_FILE_NAME)).getResourceMap().values();\n\nServiceProvider serviceProvider = new ServiceProvider(configuration);\nPatProvider patProvider = new PatProvider(serviceProvider);\nResourceRegistrar resourceRegistrar = new ResourceRegistrar(patProvider);\n\nresourceRegistrar.register(values);\n\n\n\n\nReferences\n\n\n\n\nUMA 1.0.1 Specification\n\n\nKantara Enterprise UMA Case Study\n \n\n\nUMA Specifications\n\n\nUMA Requesting Party Sample implementation\n\n\nUMA Resource Server Sample implementation\n\n\nUMA Demo Video\n\n\nUMA Demo Local Configuration (How to)\n\n\nUMA Requesting Party Sample Live\n\n\nUMA Resource Server Sample Live\n\n\nGluu Server",
            "title": "UMA"
        },
        {
            "location": "/integrate/uma/#enterprise-uma",
            "text": "The Gluu Server implements UMA in a way that enables the protection\nof any web resource. Through the oxTrust interface, the server admin can\nwrite custom  authorization interception\nscripts \nwhich may contain logic to grant (or forbid) access. All terminology\nused by this page is borrowed from UMA and Connect specs.",
            "title": "Enterprise UMA"
        },
        {
            "location": "/integrate/uma/#uma-in-action",
            "text": "The diagrams below detail how the various UMA actors interact.  Some helpful definitions:\n-  Resource Owner (RO) : An OAuth resource owner that is the \"user\" in\n  User-Managed Access. This is typically an end-user (a natural person)\n  but it can also be a corporation or other legal person.  \n-  Resource Server (RS) : Where the resources are held.   \n-  Authorization Server (AS) : A server that governs access based on resource owner policies.    \n-  Requesting Party (RP) : An end-user, or a corporation or other legal\n  person, that uses a client to seek access to a protected resource. The\n  requesting party may or may not be the same party as the resource owner.   \n-  Client : A web or native app that is used to access a digital\n  resource.    \n-  Protection API Token (PAT) : An entity seeking protection API access\n  MUST have the scope \"uma_protection\". An access token with at least\n  this scope is called a protection API token (PAT) and an entity that\n  can acquire an access token with this scope is by definition a resource\n  server.    \n-  Requesting Party Token (RPT) : the token that a client presents to a\n  resource server when trying to access a protected resource.    \n-  Authorization API Token (AAT) : An entity seeking authorization API\n  access MUST have the scope \"uma_authorization\". An access token with\n  at least this scope is called an authorization API token (AAT) and an\n  entity that can acquire an access token with this scope is by \n  definition a client.",
            "title": "UMA in Action"
        },
        {
            "location": "/integrate/uma/#uma-authorization-workflow",
            "text": "",
            "title": "UMA Authorization Workflow"
        },
        {
            "location": "/integrate/uma/#detailed-authorization-overview",
            "text": "",
            "title": "Detailed Authorization Overview"
        },
        {
            "location": "/integrate/uma/#uma-authorization-token-workflow",
            "text": "",
            "title": "UMA Authorization Token Workflow"
        },
        {
            "location": "/integrate/uma/#uma-authorization-complete-sequence",
            "text": "",
            "title": "UMA Authorization Complete Sequence"
        },
        {
            "location": "/integrate/uma/#discovery",
            "text": "The Gluu Server exposes an endpoint for discovering information about\nUMA Provider configuration. A resource server or client can perform an\nHTTP GET on  https://domain.com/.well-known/uma-configuration  to\nretrieve a JSON object indicating the UMA Provider configuration.  Gluu Server response for UMA configuration MAY contain standard\nproperties (defined by UMA specification) as well as custom properties\n(extension that is out of scope of this document). Gluu Server\nguarantees property name uniqueness within response.  The following is an example of a GET request to the UMA configuration\ndiscovery endpoint:  {\n  \"version\": \"1.0\",\n  \"issuer\": \"https://gluuserver.org\",\n  \"pat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"aat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"rpt_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"pat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"aat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"claim_profiles_supported\": [\n    \"openid\"\n  ],\n  \"dynamic_client_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\",\n  \"token_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\",\n  \"user_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n  \"introspection_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/status\",\n  \"resource_set_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\",\n  \"permission_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\",\n  \"rpt_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\",\n  \"authorization_request_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\",\n  \"scope_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\"\n}  The JSON object returned includes the following configuration\ninformation:  version : the supported UMA core protocol version.  issuer : the uri of the issuing authorization server.  pat_profiles_supported : the supported OAuth token types used for\nissuing Protection API Tokens (PATs).  aat_profiles_supported : the supported OAuth token types used for\nissuing Authorization API Tokens (AATs).  rpt_profiles_supported : the supported Requesting Party Token (RPT)\nprofiles.  pat_grant_types_supported : the supported OAuth grant types used for\nissuing PATs.  aat_grant_types_supported : the supported OAuth grant types used for\nissuing AATs.  token_endpoint : the uri to request a PAT or AAT.  authorization_endpoint : the uri to request authorization for issuing a\nPAT or AAT.  introspection_endpoint : the uri to introspect an RPT.  resource_set_registration_endpoint : the uri for a resource server to\nregister a resource set.  permission_registration_endpoint : the uri for a resource server to\nregister a requested permission.  rpt_endpoint : the uri for the client to request authorization data.  dynamic_client_endpoint : the uri for registering a dynamic client.",
            "title": "Discovery"
        },
        {
            "location": "/integrate/uma/#resource-registration",
            "text": "To let the Gluu Server know which resources are protected by UMA they\nmust be registered. Resources are described by the following properties:   name: name of resource  scopes: scopes that are available for this resource  type: type of resource (it can be string, uri or what ever, basically\n  it is up to Resource Server what type it should be).  icon_uri: uri to the icon.   These are standard properties however a resource description MAY contain\ncustom properties.",
            "title": "Resource Registration"
        },
        {
            "location": "/integrate/uma/#register-resource-via-oxtrust",
            "text": "",
            "title": "Register resource via oxTrust"
        },
        {
            "location": "/integrate/uma/#uma-scopes",
            "text": "UMA Scopes are bound to resource sets and are used by policies to check\nwhether the specified user has access to the resource. An UMA Scope is\ndescribed in JSON and has the following properties:   name: name of scope (e.g. View photo, Edit photo)  icon_uri: optional property to specify an icon for the photo   An example of a typical JSON document of scope can be seen here:  {\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}  The scope JSON MAY contain custom properties which are out of scope of\nthis document.",
            "title": "UMA Scopes"
        },
        {
            "location": "/integrate/uma/#define-uma-scopes-via-oxtrust",
            "text": "",
            "title": "Define UMA Scopes via oxTrust"
        },
        {
            "location": "/integrate/uma/#implementation-specificity",
            "text": "The following types of scopes exist:   internal: hosted on oxAuth (must provide a scope description).  external: hosted on other servers.  external_auto: a scope hosted on another server but which is\n  automatically added during resource set registration or update.   Note:  there is no uri for an internal scope because it is\nconfigurable and depends on oxAuth hosting.  UMA url = uma_scopes_endpoint + \"/\" + oxId;  http://gluu.org/uma/scopes/view = http://gluu.org/uma/scopes + \"/\" + view  A server has to provide a scope description as JSON document. The\nfollowing uri is in use: http://gluu.org/uma/scopes/view  Note:  The scope endpoint has to be present in UMA configuration to\nmake it discoverable.  External sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view  Internal sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png",
            "title": "Implementation specificity"
        },
        {
            "location": "/integrate/uma/#uma-policies",
            "text": "UMA Policies protect UMA Resources. The protection of resources are made\nvia scopes. Gluu Server evaluates all policies (identified by scopes) in\norder to grant access.  The UMA Policy main properties are:   scopes: policy protects resources by scopes.  authorization script: script that is evaluated in order to grant or\n  deny access (script basically returns true or false to the server).  name: it is best to provide an easily understandable name to the\n  policy so that it is clear what the policy protects.",
            "title": "UMA Policies"
        },
        {
            "location": "/integrate/uma/#define-policies",
            "text": "Within the oxTrust interface the Gluu Server admin can define UMA\npolicies (pictured below). To achieve this, navigate to Configuration >\nManage Custom Scripts > UMA Authorization policies.  You can find more information on crafting UMA policies as well as an\nexample script here .",
            "title": "Define Policies"
        },
        {
            "location": "/integrate/uma/#algorithm",
            "text": "The algorithm follows theses rules:   Policy protects resources based on scopes. If a scope is protected by\n  a policy then during RPT authorization such a policy script has to\n  return true in order to authorize access to resource, otherwise\n  authorization is denied.  Scope can be protected by multiple policies. If one scope is protected\n  by multiple policies then all policies have to return true to\n  authorize access. If at least one policy returned false then the\n  authorization is denied.",
            "title": "Algorithm"
        },
        {
            "location": "/integrate/uma/#requesting-party-trust-elevation",
            "text": "This section defines the OX claim profile for UMA. Following is a\nsummary:   Identifying uri: http://gluu.org/uma/profiles/uma-claim-gluu-1.0  Profile author and contact information: Michael Schwartz and Yuriy Zabrovarnyy (info@gluu.org)  Updates or obsoletes: None; this profile is new.  Syntax and semantics of claim data: As defined below.  Claims gathering method: As defined below.  Error states: \"need_reauthentication\" in case AAT is not \"strong\" enough.  Security and privacy considerations: None additional.  Binding obligations: None additional.   If an authorization server supports the OX claim profile, it MUST supply\nthe \"ox\" value for one of its \"claim_profiles_supported\" values in its\nconfiguration data.  To conform to this option, the authorization server MUST do the following:   send \"need_reauthentication\" error in case AAT does not correspond\n    to authentication level and (or) mode of authorization policy.\n    Together with error authorization server MUST provide:  domain_auth_level - REQUIRED. authentication level required to\n    satisfy authorization policy.  domain_auth_mode - REQUIRED. authentication mode required to\n    satisfy authorization policy.  authentication_uri - OPTIONAL. authorization server\n    authentication uri for re-authentication with required\n    authentication level and mode     For example:  HTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n{\n  \"status\": \"error\",\n  \"error\": \"need_reauthentication\",\n  \"domain_auth_level\":20,\n  \"domain_auth_mode\":\"duo\",\n  \"required_acr_level\":2,\n  \"required_acr_uri\":\"http://example.com/global_acr\",\n  \"authentication_uri\":\"http://seed.gluu.org/oxauth?auth_level=20&auth_mode=duo&client_id=...\"\n}",
            "title": "Requesting party trust elevation"
        },
        {
            "location": "/integrate/uma/#uma-resource-server-java-library",
            "text": "UMA RS Java Library  helps to easily protect Java based project with UMA in declarative way.  Sample declaration  {\"resources\":[\n    {\n        \"path\":\"/photo\",\n        \"conditions\":[\n            {\n                \"httpMethods\":[\"GET\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/view\"\n                ]\n            },\n            {\n                \"httpMethods\":[\"PUT\", \"POST\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/all\",\n                    \"http://photoz.example.com/dev/actions/add\"\n                ],\n                \"ticketScopes\":[\n                    \"http://photoz.example.com/dev/actions/add\"\n                ]\n            }\n        ]\n    },\n    {\n        \"path\":\"/document\",\n        \"conditions\":[\n            {\n                \"httpMethods\":[\"GET\"],\n                \"scopes\":[\n                    \"http://photoz.example.com/dev/actions/view\"\n                ]\n            }\n        ]\n    }\n]\n}  ticketScopes  are used for UMA ticket registration. If it is skipped then ALL scopes are registered for ticket.  Usage  Configuration configuration = ConfigurationLoader.loadFromJson(inputStream(CONFIGURATION_FILE_NAME));\nCollection<RsResource> values = RsProtector.instance(inputStream(PROTECTION_CONFIGURATION_FILE_NAME)).getResourceMap().values();\n\nServiceProvider serviceProvider = new ServiceProvider(configuration);\nPatProvider patProvider = new PatProvider(serviceProvider);\nResourceRegistrar resourceRegistrar = new ResourceRegistrar(patProvider);\n\nresourceRegistrar.register(values);",
            "title": "UMA Resource Server Java Library"
        },
        {
            "location": "/integrate/uma/#references",
            "text": "UMA 1.0.1 Specification  Kantara Enterprise UMA Case Study    UMA Specifications  UMA Requesting Party Sample implementation  UMA Resource Server Sample implementation  UMA Demo Video  UMA Demo Local Configuration (How to)  UMA Requesting Party Sample Live  UMA Resource Server Sample Live  Gluu Server",
            "title": "References"
        },
        {
            "location": "/integrate/oauth2grants/",
            "text": "Client Credentials Grant\n\n\nWhen Should the Client Credentials Flow Be Used?\n\n\nExample Flow\n\n\n\n\n\n\nResource Owner Password Credentials Grant\n\n\nWhen Should the Resource Owner Password Flow Be Used?\n\n\nSecurity Properties\n\n\nUser Experience\n\n\nExample Flow\n\n\n\n\n\n\nGluu OAuth2 Access Management\n\n\nOverview\n\n\nGluu Access Token\n\n\nGAT as plain json\n\n\nAS Respnse for RP\n\n\nAS Response for RP\n\n\nRP Request Resource with GAT\n\n\n\n\n\n\nDiscovery\n\n\n\n\n\n\n\n\n\n\nClient Credentials Grant\n\n\nThe Client Credentials Grant allows resource owner to use password\ncredentials (i.e. username and password) as an authorization grant to\nobtain an access token. The credentials should only be used when there\nis a high degree of trust between the resource owner and the client\n(e.g. its device operating system or a highly privileged application),\nand when other authorization grant types are not available (such as an\nauthorization code).\n\n\nEven though this grant type requires direct client access to the\nresource owner credentials, the resource owner credentials are used for\na single request and are exchanged for an access token. This grant type\ncan eliminate the need for the client to store the resource owner\ncredentials for future use, by exchanging the credentials with a\nlong-lived access token or refresh token.\n\n\nThe flow is illustrated below:\n\n\n\n\nThe steps of the flow are:\n\n\n\n\n\n\nThe application requests an access token from the authorization server, authenticating the request with its client credentials.\n\n\n\n\n\n\nIf the client credentials are successfully authenticated, an access token is returned to the client.\n\n\n\n\n\n\nWhen Should the Client Credentials Flow Be Used?\n\n\nThe Client Credentials flow should be used when the resources of or any\napplication/service are stored externally in cloud storages such as\nGoogle Storage or Amazon S3 which can be accessed using API. In this\ncase the application needs to read and update these resources, but\nacting on behalf of the app itself rather than any individual user.\nThe application can ask the OAuth authorization server for an access\ntoken directly, without the involvement of any end user.\n\n\nExample Flow\n\n\nThe following is an example showing the messages between the client and\nthe authorization server, also the example shows code fragments using\nthe oxAuth-Client.jar API to interact with the authorization server.\n\n\n// Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Request\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execClientCredentialsGrant(scope, clientId, clientSecret);\n\nint status response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken();\nTokenType tokenType response.getTokenType(); // bearer\n\n\n\n\nThe message sent to the authorization server is:\n\n\n\n\nRequest\n\n\n\n\nPOST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\nHost: seed.gluu.org\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&scope=storage\n\n\n\n\nIf the client credentials are successfully authenticated, an access token is returned to the client.\n\n\n\n\nResponse\n\n\n\n\nHTTP/1.1 200\nContent-Type: application/json\nCache-Control: no-store, private\nPragma: no-cache\n\n{\"access_token\":\"c769d7ff-c476-42ab-b531-fe2f60b2f5cc\",\"token_type\":\"bearer\",\"expires_in\":3600}\n\n\n\n\nResource Owner Password Credentials Grant\n\n\nThe resource owner password credentials (i.e. username and password) can\nbe used directly as an authorization grant to obtain an access token.\nThe credentials should only be used when there is a high degree of trust\nbetween the resource owner and the client (e.g. its device operating\nsystem or a highly privileged application), and when other authorization\ngrant types are not available (such as an authorization code).\n\n\nEven though this grant type requires direct client access to the\nresource owner credentials, the resource owner credentials are used for\na single request and are exchanged for an access token. This grant type\ncan eliminate the need for the client to store the resource owner\ncredentials for future use, by exchanging the credentials with a\nlong-lived access token or refresh token.\n\n\nThe flow is illustrated below:\n\n\n\n\nThe steps of the flow are:\n\n\n\n\n\n\nUser presents their credentials to the application in addition to a username and password.\n\n\n\n\n\n\nIf the client credentials are successfully authenticated, an access token is returned to the client\n\n\n\n\n\n\nWhen Should the Resource Owner Password Flow Be Used?\n\n\nThis flow should be used sparingly because the resource owner\u2019s password\nis exposed to the application. It is recommended only for first-party\n\u201cofficial\u201d applications released by the API provider, and not opened up\nto wider third-party developer communities. If a user is asked to type\ntheir password into \u201cofficial\u201d applications, they may become accustomed\nto doing so and become vulnerable to phishing attempts by other apps. In\norder to mitigate this concern, developers and IT administrators should\nclearly educate their users how they should determine which apps are\n\u201cofficial\u201d and which are not.\n\n\nSecurity Properties\n\n\nThere are some security benefits to using this flow against\nauthenticating API calls with a username and password (via HTTP Basic\naccess authentication or similar) although the application has access to\nthe resource owner's password. With Basic authentication, an application\nneeds to have continuous access to the user\u2019s password in order to make\nAPI calls. If the user wants to revoke the access of the client, he must\nchange the password and re-enter the password in all the applications\nthat are allowed access to the resource.\n\n\nHowever, if the OAuth Resource Owner Password flow is used, the\napplication only needs access to the user\u2019s credentials once: on first\nuse when the credentials are exchanged for an access token. This means\nthere\u2019s no requirement for the app to store these credentials within the\napplication or on the device, and revoking access is easy as well.\n\n\nUser Experience\n\n\nThe user experience for this flow is identical to typical password-based\naccess requests. The application asks the user for their username and\npassword and the user provides the information. The application then\nmakes either a server-side or client-side request to the API provider\u2019s\nauthorization server, without any user-facing interface changes. If the\nAPI provider does not issue a refresh_token and the issued access_token\nis short-lived, the application will likely store the username and\npassword for future authentication attempts. Unfortunately, this defeats\nsome of the benefit of this flow.\n\n\nExample Flow\n\n\nThe following is an example showing the messages between the client and\nthe authorization server, also the example shows code fragments using\nthe oxAuth-Client.jar API to interact with the authorization server.\n\n\n// Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Call the service\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execResourceOwnerPasswordCredentialsGrant(username, password, scope, clientId, clientSecret);\n\n// Handle response\nint status = response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken(); // 26d55e4b-6c61-40ea-9763-3282f5db0f0e\nTokenType tokenType = response.getTokenType(); // Enumeration: bearer\nString refreshToken = response.getRefreshToken(); // aba91bd9-aa10-4fca-952b-50a9a9afac28\n\n\n\n\n\n\nRequest\n\n\n\n\nPOST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\nHost: seed.gluu.org\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&scope=openid&username=mike&password=secret\n\n\n\n\n\n\nResponse\n\n\n\n\nHTTP/1.1 200\nContent-Type: application/json\nCache-Control: no-store, private\nPragma: no-cache\n\n{\"access_token\":\"26d55e4b-6c61-40ea-9763-3282f5db0f0e\",\"token_type\":\"bearer\",\"expires_in\":3599,\"refresh_token\":\"aba91bd9-aa10-4fca-952b-50a9a9afac28\",\"scope\":\"openid\",\"id_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvc2VlZC5nbHV1Lm9yZyIsInVzZXJfaWQiOiJtaWtlIiwiYXVkIjoiQCExMTExITAwMDghRkY4MSEyRDM5IiwiZXhwIjoxMzM5MTk2ODgxMzAzLCJveEludW0iOiJAITExMTEhMDAwMCFENEU3Iiwib3hWYWxpZGF0aW9uVVJJIjoiaHR0cHM6XC9cL3NlZWQuZ2x1dS5vcmdcL294YXV0aFwvc2VhbVwvcmVzb3VyY2VcL3Jlc3R2MVwvb3hhdXRoXC9jaGVja19zZXNzaW9uIiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.SzWfJsmlz62qTRw1lEJZ8PygY9eRupgmsbXLCQwPVDQ\"}\n\n\n\n\nGluu OAuth2 Access Management\n\n\n[GAT][Gluu Access Token] is used for Gluu OAuth2 Access Management.\n\n\nOverview\n\n\n\nCentralized Access Management needs a profile enabling a client ot obtain a token from the AS by explicitly specifyting the \nrequested scopes.\n\n\nGluu Access Token\n\n\nGAT as plain json\n\n\n{\n    \"exp\": 1256953732,\n    \"iat\": 1256912345,\n    \"scopes\" : {\n       \"view\", \"manage\"\n    }\n}\n\n\n\n\nThe [GAT][Gluu Access Token] is issued at a new endpoint which is published at \n<hostname>/.well-known/uma-configuration\n\n\nImportant:\n all requests/response to/from/between RP, RS, AS must contain \"GAT\" HTTP header with \"true\" value. In this way \nAS differentiante calls from normal UMA.\n\n\nAS Respnse for RP\n\n\nPOST /gat HTTP/1.1\nHost: as.example.com\nAuthorization: Bearer jwfLG53^sad$#f\nGAT: true\n\n{\n \"scopes\": [\"view\", \"manage\"]\n}\n\n\n\n\nAS Response for RP\n\n\nGAT is returned in the \nrpt\n key as value.\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nGAT: true\n\n{\n  \"rpt\": \"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv\"\n}\n\n\n\n\nRP Request Resource with GAT\n\n\nGET /users/alice/album/photo.jpg HTTP/1.1\nAuthorization: Bearer vF9dft4qmT\nHost: photoz.example.com\nGAT: true\n\n\n\n\nDiscovery\n\n\n   ...\n   \"gat_endpoint\":\"https://<host>/<relative path>/gat\",\n   ...",
            "title": "OAuth2"
        },
        {
            "location": "/integrate/oauth2grants/#client-credentials-grant",
            "text": "The Client Credentials Grant allows resource owner to use password\ncredentials (i.e. username and password) as an authorization grant to\nobtain an access token. The credentials should only be used when there\nis a high degree of trust between the resource owner and the client\n(e.g. its device operating system or a highly privileged application),\nand when other authorization grant types are not available (such as an\nauthorization code).  Even though this grant type requires direct client access to the\nresource owner credentials, the resource owner credentials are used for\na single request and are exchanged for an access token. This grant type\ncan eliminate the need for the client to store the resource owner\ncredentials for future use, by exchanging the credentials with a\nlong-lived access token or refresh token.  The flow is illustrated below:   The steps of the flow are:    The application requests an access token from the authorization server, authenticating the request with its client credentials.    If the client credentials are successfully authenticated, an access token is returned to the client.",
            "title": "Client Credentials Grant"
        },
        {
            "location": "/integrate/oauth2grants/#when-should-the-client-credentials-flow-be-used",
            "text": "The Client Credentials flow should be used when the resources of or any\napplication/service are stored externally in cloud storages such as\nGoogle Storage or Amazon S3 which can be accessed using API. In this\ncase the application needs to read and update these resources, but\nacting on behalf of the app itself rather than any individual user.\nThe application can ask the OAuth authorization server for an access\ntoken directly, without the involvement of any end user.",
            "title": "When Should the Client Credentials Flow Be Used?"
        },
        {
            "location": "/integrate/oauth2grants/#example-flow",
            "text": "The following is an example showing the messages between the client and\nthe authorization server, also the example shows code fragments using\nthe oxAuth-Client.jar API to interact with the authorization server.  // Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Request\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execClientCredentialsGrant(scope, clientId, clientSecret);\n\nint status response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken();\nTokenType tokenType response.getTokenType(); // bearer  The message sent to the authorization server is:   Request   POST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\nHost: seed.gluu.org\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&scope=storage  If the client credentials are successfully authenticated, an access token is returned to the client.   Response   HTTP/1.1 200\nContent-Type: application/json\nCache-Control: no-store, private\nPragma: no-cache\n\n{\"access_token\":\"c769d7ff-c476-42ab-b531-fe2f60b2f5cc\",\"token_type\":\"bearer\",\"expires_in\":3600}",
            "title": "Example Flow"
        },
        {
            "location": "/integrate/oauth2grants/#resource-owner-password-credentials-grant",
            "text": "The resource owner password credentials (i.e. username and password) can\nbe used directly as an authorization grant to obtain an access token.\nThe credentials should only be used when there is a high degree of trust\nbetween the resource owner and the client (e.g. its device operating\nsystem or a highly privileged application), and when other authorization\ngrant types are not available (such as an authorization code).  Even though this grant type requires direct client access to the\nresource owner credentials, the resource owner credentials are used for\na single request and are exchanged for an access token. This grant type\ncan eliminate the need for the client to store the resource owner\ncredentials for future use, by exchanging the credentials with a\nlong-lived access token or refresh token.  The flow is illustrated below:   The steps of the flow are:    User presents their credentials to the application in addition to a username and password.    If the client credentials are successfully authenticated, an access token is returned to the client",
            "title": "Resource Owner Password Credentials Grant"
        },
        {
            "location": "/integrate/oauth2grants/#when-should-the-resource-owner-password-flow-be-used",
            "text": "This flow should be used sparingly because the resource owner\u2019s password\nis exposed to the application. It is recommended only for first-party\n\u201cofficial\u201d applications released by the API provider, and not opened up\nto wider third-party developer communities. If a user is asked to type\ntheir password into \u201cofficial\u201d applications, they may become accustomed\nto doing so and become vulnerable to phishing attempts by other apps. In\norder to mitigate this concern, developers and IT administrators should\nclearly educate their users how they should determine which apps are\n\u201cofficial\u201d and which are not.",
            "title": "When Should the Resource Owner Password Flow Be Used?"
        },
        {
            "location": "/integrate/oauth2grants/#security-properties",
            "text": "There are some security benefits to using this flow against\nauthenticating API calls with a username and password (via HTTP Basic\naccess authentication or similar) although the application has access to\nthe resource owner's password. With Basic authentication, an application\nneeds to have continuous access to the user\u2019s password in order to make\nAPI calls. If the user wants to revoke the access of the client, he must\nchange the password and re-enter the password in all the applications\nthat are allowed access to the resource.  However, if the OAuth Resource Owner Password flow is used, the\napplication only needs access to the user\u2019s credentials once: on first\nuse when the credentials are exchanged for an access token. This means\nthere\u2019s no requirement for the app to store these credentials within the\napplication or on the device, and revoking access is easy as well.",
            "title": "Security Properties"
        },
        {
            "location": "/integrate/oauth2grants/#user-experience",
            "text": "The user experience for this flow is identical to typical password-based\naccess requests. The application asks the user for their username and\npassword and the user provides the information. The application then\nmakes either a server-side or client-side request to the API provider\u2019s\nauthorization server, without any user-facing interface changes. If the\nAPI provider does not issue a refresh_token and the issued access_token\nis short-lived, the application will likely store the username and\npassword for future authentication attempts. Unfortunately, this defeats\nsome of the benefit of this flow.",
            "title": "User Experience"
        },
        {
            "location": "/integrate/oauth2grants/#example-flow_1",
            "text": "The following is an example showing the messages between the client and\nthe authorization server, also the example shows code fragments using\nthe oxAuth-Client.jar API to interact with the authorization server.  // Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Call the service\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execResourceOwnerPasswordCredentialsGrant(username, password, scope, clientId, clientSecret);\n\n// Handle response\nint status = response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken(); // 26d55e4b-6c61-40ea-9763-3282f5db0f0e\nTokenType tokenType = response.getTokenType(); // Enumeration: bearer\nString refreshToken = response.getRefreshToken(); // aba91bd9-aa10-4fca-952b-50a9a9afac28   Request   POST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\nHost: seed.gluu.org\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&scope=openid&username=mike&password=secret   Response   HTTP/1.1 200\nContent-Type: application/json\nCache-Control: no-store, private\nPragma: no-cache\n\n{\"access_token\":\"26d55e4b-6c61-40ea-9763-3282f5db0f0e\",\"token_type\":\"bearer\",\"expires_in\":3599,\"refresh_token\":\"aba91bd9-aa10-4fca-952b-50a9a9afac28\",\"scope\":\"openid\",\"id_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvc2VlZC5nbHV1Lm9yZyIsInVzZXJfaWQiOiJtaWtlIiwiYXVkIjoiQCExMTExITAwMDghRkY4MSEyRDM5IiwiZXhwIjoxMzM5MTk2ODgxMzAzLCJveEludW0iOiJAITExMTEhMDAwMCFENEU3Iiwib3hWYWxpZGF0aW9uVVJJIjoiaHR0cHM6XC9cL3NlZWQuZ2x1dS5vcmdcL294YXV0aFwvc2VhbVwvcmVzb3VyY2VcL3Jlc3R2MVwvb3hhdXRoXC9jaGVja19zZXNzaW9uIiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.SzWfJsmlz62qTRw1lEJZ8PygY9eRupgmsbXLCQwPVDQ\"}",
            "title": "Example Flow"
        },
        {
            "location": "/integrate/oauth2grants/#gluu-oauth2-access-management",
            "text": "[GAT][Gluu Access Token] is used for Gluu OAuth2 Access Management.",
            "title": "Gluu OAuth2 Access Management"
        },
        {
            "location": "/integrate/oauth2grants/#overview",
            "text": "Centralized Access Management needs a profile enabling a client ot obtain a token from the AS by explicitly specifyting the \nrequested scopes.",
            "title": "Overview"
        },
        {
            "location": "/integrate/oauth2grants/#gluu-access-token",
            "text": "GAT as plain json  {\n    \"exp\": 1256953732,\n    \"iat\": 1256912345,\n    \"scopes\" : {\n       \"view\", \"manage\"\n    }\n}  The [GAT][Gluu Access Token] is issued at a new endpoint which is published at  <hostname>/.well-known/uma-configuration  Important:  all requests/response to/from/between RP, RS, AS must contain \"GAT\" HTTP header with \"true\" value. In this way \nAS differentiante calls from normal UMA.  AS Respnse for RP  POST /gat HTTP/1.1\nHost: as.example.com\nAuthorization: Bearer jwfLG53^sad$#f\nGAT: true\n\n{\n \"scopes\": [\"view\", \"manage\"]\n}  AS Response for RP  GAT is returned in the  rpt  key as value.  HTTP/1.1 200 OK\nContent-Type: application/json\nGAT: true\n\n{\n  \"rpt\": \"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv\"\n}  RP Request Resource with GAT  GET /users/alice/album/photo.jpg HTTP/1.1\nAuthorization: Bearer vF9dft4qmT\nHost: photoz.example.com\nGAT: true",
            "title": "Gluu Access Token"
        },
        {
            "location": "/integrate/oauth2grants/#discovery",
            "text": "...\n   \"gat_endpoint\":\"https://<host>/<relative path>/gat\",\n   ...",
            "title": "Discovery"
        },
        {
            "location": "/api/scim-1.1/",
            "text": "SCIM 1.1\n\n\nSCIM 1.1 Specifications\n\n\nYou can see the detailed SCIM 1.1 specification documents\n\nhere\n.\n\n\nSCIM 1.1 Endpoints\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nUser Endpoint\n\n\n/seam/resource/restv1/Users\n\n\n\n\ngetUser\n\n\nGET\n \n/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\nReturns a user on the basis of provided id as path parameter. The\nresource MUST be already registered with the mentioned id.\n\n\nURL\n\n\nhttp://gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\n\nRequest\n\n\nParameters\n\n\n\n\nFollowing are the details about parameters:\n    \n\n        \n\n            \nParameter\n\n            \nLocation\n\n        \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nrsid\n\n        \npath\n\n        \nTRUE\n\n            \nResource set description ID\n\n            \nstring\n\n        \n\n    \n\n            \nAuthorization\n\n        \nheader\n\n        \nFALSE\n\n            \n\n            \nstring\n\n        \n\n    \n\n\n\n\nResponse\n\n\nContent Type:\n  application/json, application/xml\n\n\nSuccess\n\n\n\n\n\n        \n\n            \nStatus Code\n\n            \nReason\n\n            \nDescription\n\n        \n\n        \n\n            \n200\n\n            \nSuccessful Operation\n\n            \nResource returned successfully\n\n        \n\n    \n\n\n\n\nErrors\n\n\n\n\n\n        \n\n            \nStatus Code\n\n            \nReason\n\n            \nDescription\n\n        \n\n        \n\n            \n400\n\n            \nBAD REQUEST\n\n            \nRequest cannot be parsed, is syntactically incorrect, or violates schema.\n\n        \n\n        \n\n            \n401\n\n            \nUNAUTHORIZED\n\n            \nAuthorization header is invalid or missing.\n\n        \n\n        \n\n            \n403\n\n            \nFORBIDDEN\n\n            \nOperation is not permitted based on the supplied\nauthorization.\n\n        \n\n        \n\n            \n404\n\n            \nNOT FOUND\n\n            \nSpecified user does not exist.\n\n        \n\n    \n\n\n\n\n\n\nGroup Endpoint\n\n\n/seam/resource/restv1/Groups\n\n\n\n\ngetGroup\n\n\nGET\n \n/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\nReturns a group on the basis of the provided id as a path parameter. The\ngroup MUST be already registered with the mentioned id.\n\n\nURL\n\n\nhttp://gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\n\nRequest\n\n\nParameters\n\n\n\n\nFollowing are the details about parameters:\n    \n\n        \n\n            \nParameter\n\n            \nLocation\n\n        \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nrsid\n\n        \npath\n\n        \nTRUE\n\n            \nResource set description ID.\n\n            \nstring\n\n        \n\n    \n\n            \nAuthorization\n\n        \nheader\n\n        \nFALSE\n\n            \n\n            \nstring\n\n        \n\n    \n\n\n\n\nResponse\n\n\nContent Type:\n  application/json, application/xml\n\n\nSuccess\n\n\n\n\n\n        \n\n            \nStatus Code\n\n            \nReason\n\n            \nDescription\n\n        \n\n        \n\n            \n200\n\n            \nSuccessful Operation\n\n            \nGroup returned successfully.\n\n        \n\n    \n\n\n\n\nErrors\n\n\n\n\n\n        \n\n            \nStatus Code\n\n            \nReason\n\n            \nDescription\n\n        \n\n        \n\n            \n400\n\n            \nBad Request\n\n            \nRequest cannot be parsed, is syntactically incorrect, or violates schema.\n\n        \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n            \nAuthorization header is invalid or missing.\n\n        \n\n        \n\n            \n403\n\n            \nForbidden\n\n            \nOperation is not permitted based on the supplied authorization.\n\n        \n\n        \n\n            \n404\n\n            \nNot Found\n\n            \nSpecified user does not exist.\n\n        \n\n    \n\n\n\n\n\n\nBulk Operation Endpoint\n\n\n/seam/resource/restv1/scim/v1/Bulk\n\n\n\n\nBulk Operation\n\n\nSCIM Bulk Operation enables consumers to work with a potentially large\ncollection (bulk) of Resource operations in a single request. A body of\na bulk operation may contain a set of HTTP Resource operations using one\nof the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE.\n(see http://www.simplecloud.info/specs/draft-scim-api-01.html#bulk-resources\nfor more details.)\n\n\nSecurity\n\n\n\n\nAuthorization\n\n\n\n\nRequest\n\n\nContent-Type:\n application/json, application/xml\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring \n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nno\n\n        \nBulkRequest\n\n        \n - \n\n        \nBulkRequest\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type: \n application/json, application/xml\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\nDefinitions\n\n\nBulkOperation\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n        \n\n            \nbulkId\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nversion\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nmethod\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \npath\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nlocation\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \ndata\n\n            \nobject\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nstatus\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nresponse\n\n            \nobject\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n\n\n\nBulkRequest\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n        \n\n            \nschemes\n\n            \narray[string]\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nfailOnErrors\n\n            \ninteger (int32)\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \noperations\n\n            \narray[\nBulkOperation\n]\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n\n\n\nBulkResponse\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n        \n\n            \nschemes\n\n            \narray[string]\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \noperations\n\n            \narray[\nBulkOperation\n]\n\n            \noptional\n\n            \n-",
            "title": "SCIM 1.1"
        },
        {
            "location": "/api/scim-1.1/#scim-11",
            "text": "SCIM 1.1 Specifications  You can see the detailed SCIM 1.1 specification documents here .  SCIM 1.1 Endpoints   User Endpoint  Group Endpoint  Bulk Operation Endpoint",
            "title": "SCIM 1.1"
        },
        {
            "location": "/api/scim-1.1/#user-endpoint",
            "text": "/seam/resource/restv1/Users   getUser  GET   /host/seam/resource/restv1/scim/v1/Users{rsid}  Returns a user on the basis of provided id as path parameter. The\nresource MUST be already registered with the mentioned id.  URL  http://gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}  Request  Parameters   Following are the details about parameters:\n     \n         \n             Parameter \n             Location \n         Required \n             Description \n             Data Type \n         \n         \n             rsid \n         path \n         TRUE \n             Resource set description ID \n             string \n         \n     \n             Authorization \n         header \n         FALSE \n             \n             string \n         \n       Response  Content Type:   application/json, application/xml  Success   \n         \n             Status Code \n             Reason \n             Description \n         \n         \n             200 \n             Successful Operation \n             Resource returned successfully \n         \n       Errors   \n         \n             Status Code \n             Reason \n             Description \n         \n         \n             400 \n             BAD REQUEST \n             Request cannot be parsed, is syntactically incorrect, or violates schema. \n         \n         \n             401 \n             UNAUTHORIZED \n             Authorization header is invalid or missing. \n         \n         \n             403 \n             FORBIDDEN \n             Operation is not permitted based on the supplied\nauthorization. \n         \n         \n             404 \n             NOT FOUND \n             Specified user does not exist.",
            "title": "User Endpoint"
        },
        {
            "location": "/api/scim-1.1/#group-endpoint",
            "text": "/seam/resource/restv1/Groups   getGroup  GET   /host/seam/resource/restv1/scim/v1/Groups{rsid}  Returns a group on the basis of the provided id as a path parameter. The\ngroup MUST be already registered with the mentioned id.  URL  http://gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}  Request  Parameters   Following are the details about parameters:\n     \n         \n             Parameter \n             Location \n         Required \n             Description \n             Data Type \n         \n         \n             rsid \n         path \n         TRUE \n             Resource set description ID. \n             string \n         \n     \n             Authorization \n         header \n         FALSE \n             \n             string \n         \n       Response  Content Type:   application/json, application/xml  Success   \n         \n             Status Code \n             Reason \n             Description \n         \n         \n             200 \n             Successful Operation \n             Group returned successfully. \n         \n       Errors   \n         \n             Status Code \n             Reason \n             Description \n         \n         \n             400 \n             Bad Request \n             Request cannot be parsed, is syntactically incorrect, or violates schema. \n         \n         \n             401 \n             Unauthorized \n             Authorization header is invalid or missing. \n         \n         \n             403 \n             Forbidden \n             Operation is not permitted based on the supplied authorization. \n         \n         \n             404 \n             Not Found \n             Specified user does not exist.",
            "title": "Group Endpoint"
        },
        {
            "location": "/api/scim-1.1/#bulk-operation-endpoint",
            "text": "/seam/resource/restv1/scim/v1/Bulk   Bulk Operation  SCIM Bulk Operation enables consumers to work with a potentially large\ncollection (bulk) of Resource operations in a single request. A body of\na bulk operation may contain a set of HTTP Resource operations using one\nof the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE.\n(see http://www.simplecloud.info/specs/draft-scim-api-01.html#bulk-resources\nfor more details.)  Security   Authorization   Request  Content-Type:  application/json, application/xml  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         no \n         \n          -  \n         string  \n     \n     \n         body \n         body \n         no \n         BulkRequest \n          -  \n         BulkRequest \n       Response  Content-Type:   application/json, application/xml     Status Code  Reason  Response Model      200  successful operation  BulkResponse",
            "title": "Bulk Operation Endpoint"
        },
        {
            "location": "/api/scim-1.1/#definitions",
            "text": "",
            "title": "Definitions"
        },
        {
            "location": "/api/scim-1.1/#bulkoperation",
            "text": "name \n         type \n         required \n         description \n         example \n     \n\n         \n             bulkId \n             string \n             optional \n             - \n             \n         \n\n         \n             version \n             string \n             optional \n             - \n             \n         \n\n         \n             method \n             string \n             optional \n             - \n             \n         \n\n         \n             path \n             string \n             optional \n             - \n             \n         \n\n         \n             location \n             string \n             optional \n             - \n             \n         \n\n         \n             data \n             object \n             optional \n             - \n             \n         \n\n         \n             status \n             string \n             optional \n             - \n             \n         \n\n         \n             response \n             object \n             optional \n             -",
            "title": "BulkOperation"
        },
        {
            "location": "/api/scim-1.1/#bulkrequest",
            "text": "name \n         type \n         required \n         description \n         example \n     \n\n         \n             schemes \n             array[string] \n             optional \n             - \n             \n         \n\n         \n             failOnErrors \n             integer (int32) \n             optional \n             - \n             \n         \n\n         \n             operations \n             array[ BulkOperation ] \n             optional \n             -",
            "title": "BulkRequest"
        },
        {
            "location": "/api/scim-1.1/#bulkresponse",
            "text": "name \n         type \n         required \n         description \n         example \n     \n\n         \n             schemes \n             array[string] \n             optional \n             - \n             \n         \n\n         \n             operations \n             array[ BulkOperation ] \n             optional \n             -",
            "title": "BulkResponse"
        },
        {
            "location": "/api/scim-2.0/",
            "text": "SCIM 2.0\n\n\nSCIM 2.0 Specifications\n\n\nYou can see the detailed SCIM 2.0 specification documents here:\n\n\nSystem for Cross-domain Identity Management: Core Schema\n\n\nSystem for Cross-domain Identity Management: Protocol\n\n\nSCIM 2.0 Endpoints\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nSCIM 2.0 Definitions\n\n\n\n\nDefinitions\n\n\n\n\n\n\nUser Endpoint\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users\n\n\n\nGET\n\n\nSearch Users\n - searches users based on filter criteria\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nfilter\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nstartIndex\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \ncount\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortBy\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortOrder\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n\n\nCreate User\n - creates a user\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nUser\n\n        \n - \n\n        \nUser\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}\n\n\n\nGET\n\n\nFind User By ID\n - returns a user by id as path parameter\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/scim\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nPUT\n\n\nUpdate User\n - updates a user\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nUser\n\n        \n - \n\n        \nUser\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nDELETE\n\n\nDelete User\n - deletes a user\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/Search\n\n\n\nPOST\n\n\nSearch Users\n (\nDeprecated\n)\n - searches users by HTTP POST\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \n\n        \n - \n\n        \nScimPersonSearch\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\n\n\nGroup Endpoint\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups\n\n\n\nGET\n\n\nSearch Groups\n - searches groups based on filter criteria\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nfilter\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nstartIndex\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \ncount\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortBy\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortOrder\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n\n\nCreate Group\n - creates a group\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nGroup\n\n        \n - \n\n        \nGroup\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}\n\n\n\nGET\n\n\nFind Group By ID\n - returns a group by id as path parameter\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of group\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nPUT\n\n\nUpdate Group\n - updates a group\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of group\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nGroup\n\n        \n - \n\n        \nGroup\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nDELETE\n\n\nDelete Group\n - deletes a group\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of the group\n\n        \n - \n\n        \nstring \n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\n\n\nBulk Operation Endpoint\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Bulk\n\n\n\nPOST\n\n\nBulk Operations\n - bulk operations\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nBulkRequest\n\n        \n - \n\n        \nBulkRequest\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\nDefinitions\n\n\nAddress\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nformatted\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstreetAddress\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocality\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nregion\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npostalCode\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ncountry\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \nType\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkOperation\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nbulkId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nversion\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmethod\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npath\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndata\n\n        \n object \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstatus\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresponse\n\n        \n object \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkRequest\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nfailOnErrors\n\n        \n integer (int32) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \noperations\n\n        \n array[\nBulkOperation\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkResponse\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \noperations\n\n        \n array[\nBulkOperation\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nEmail\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nEntitlement\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n   \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nGroup\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \n \nMeta\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplayName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmembers\n\n        \n array[\nMemberRef\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nGroupRef\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nIm\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nListResponse\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \ntotalResults\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstartIndex\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nitemsPerPage\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \narray[string]\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresources\n\n        \narray[\nResource\n]\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nMemberRef\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nMeta\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \ncreated\n\n        \n string (date-time) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlastModified\n\n        \n string (date-time) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nversion\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nattributes\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresourceType\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nName\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nformatted\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nfamilyName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ngivenName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmiddleName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nhonorificPrefix\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nhonorificSuffix\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nPhoneNumber\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nPhoto\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nResource\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \nMeta\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \narray[string]\n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nRole\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nType\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n\n\n\nUser\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \n \nMeta\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nuserName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nname\n\n        \n \nName\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplayName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nnickName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprofileUrl\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntitle\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nuserType\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npreferredLanguage\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocale\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntimezone\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nactive\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npassword\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nemails\n\n        \n array[\nEmail\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nphoneNumbers\n\n        \n array[\nPhoneNumber\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nims\n\n        \n array[\nIm\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nphotos\n\n        \n array[\nPhoto\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \naddresses\n\n        \n array[\nAddress\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ngroups\n\n        \n array[\nGroupRef\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nentitlements\n\n        \n array[\nEntitlement\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nroles\n\n        \n array[\nRole\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nx509Certificates\n\n        \n array[\nX509Certificate\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nX509Certificate\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \nType\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nScimPersonSearch\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nattribute\n\n        \n string \n\n        \nrequired\n\n        \nUser Attribute Name\n\n        \nUsername\n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \nrequired\n\n        \nUser Attribute Value\n\n        \nMike",
            "title": "SCIM 2.0"
        },
        {
            "location": "/api/scim-2.0/#scim-20",
            "text": "SCIM 2.0 Specifications  You can see the detailed SCIM 2.0 specification documents here:  System for Cross-domain Identity Management: Core Schema  System for Cross-domain Identity Management: Protocol  SCIM 2.0 Endpoints   User Endpoint  Group Endpoint  Bulk Operation Endpoint   SCIM 2.0 Definitions   Definitions",
            "title": "SCIM 2.0"
        },
        {
            "location": "/api/scim-2.0/#user-endpoint",
            "text": "URL  <domain root>/identity/seam/resource/restv1/scim/v2/Users  GET  Search Users  - searches users based on filter criteria  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         filter \n         query \n         no \n         \n          -  \n         string \n     \n     \n         startIndex \n         query \n         no \n         \n          -  \n         string \n     \n     \n         count \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortBy \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortOrder \n         query \n         no \n         \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse     POST  Create User  - creates a user  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         User \n          -  \n         User \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  User     URL  <domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}  GET  Find User By ID  - returns a user by id as path parameter  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/scim     Status Code  Reason  Response Model      200  successful operation  User     PUT  Update User  - updates a user  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         User \n          -  \n         User \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  User     DELETE  Delete User  - deletes a user  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -     URL  <domain root>/identity/seam/resource/restv1/scim/v2/Users/Search  POST  Search Users  ( Deprecated )  - searches users by HTTP POST  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         \n          -  \n         ScimPersonSearch \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse",
            "title": "User Endpoint"
        },
        {
            "location": "/api/scim-2.0/#group-endpoint",
            "text": "URL  <domain root>/identity/seam/resource/restv1/scim/v2/Groups  GET  Search Groups  - searches groups based on filter criteria  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         filter \n         query \n         no \n         \n          -  \n         string \n     \n     \n         startIndex \n         query \n         no \n         \n          -  \n         string \n     \n     \n         count \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortBy \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortOrder \n         query \n         no \n         \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse     POST  Create Group  - creates a group  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         Group \n          -  \n         Group \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  Group     URL  <domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}  GET  Find Group By ID  - returns a group by id as path parameter  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of group \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group     PUT  Update Group  - updates a group  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of group \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         Group \n          -  \n         Group \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group     DELETE  Delete Group  - deletes a group  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of the group \n          -  \n         string  \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -",
            "title": "Group Endpoint"
        },
        {
            "location": "/api/scim-2.0/#bulk-operation-endpoint",
            "text": "URL  <domain root>/identity/seam/resource/restv1/scim/v2/Bulk  POST  Bulk Operations  - bulk operations  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         BulkRequest \n          -  \n         BulkRequest \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  BulkResponse",
            "title": "Bulk Operation Endpoint"
        },
        {
            "location": "/api/scim-2.0/#definitions",
            "text": "",
            "title": "Definitions"
        },
        {
            "location": "/api/scim-2.0/#address",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n         string \n         optional \n         - \n         \n     \n     \n         primary \n         boolean \n         optional \n         - \n         \n     \n     \n         formatted \n         string \n         optional \n         - \n         \n     \n     \n         streetAddress \n         string \n         optional \n         - \n         \n     \n     \n         locality \n         string \n         optional \n         - \n         \n     \n     \n         region \n         string \n         optional \n         - \n         \n     \n     \n         postalCode \n         string \n         optional \n         - \n         \n     \n     \n         country \n         string \n         optional \n         - \n         \n     \n     \n         type \n         Type \n         optional \n         - \n         \n     \n     \n         $ref \n         string \n         optional \n         -",
            "title": "Address"
        },
        {
            "location": "/api/scim-2.0/#bulkoperation",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         bulkId \n          string  \n         optional \n         - \n         \n     \n     \n         version \n          string  \n         optional \n         - \n         \n     \n     \n         method \n          string  \n         optional \n         - \n         \n     \n     \n         path \n          string  \n         optional \n         - \n         \n     \n     \n         location \n          string  \n         optional \n         - \n         \n     \n     \n         data \n          object  \n         optional \n         - \n         \n     \n     \n         status \n          string  \n         optional \n         - \n         \n     \n     \n         response \n          object  \n         optional \n         -",
            "title": "BulkOperation"
        },
        {
            "location": "/api/scim-2.0/#bulkrequest",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         schemas \n          array[string]  \n         optional \n         - \n         \n     \n     \n         failOnErrors \n          integer (int32)  \n         optional \n         - \n         \n     \n     \n         operations \n          array[ BulkOperation ]  \n         optional \n         -",
            "title": "BulkRequest"
        },
        {
            "location": "/api/scim-2.0/#bulkresponse",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         schemas \n          array[string]  \n         optional \n         - \n         \n     \n     \n         operations \n          array[ BulkOperation ]  \n         optional \n         -",
            "title": "BulkResponse"
        },
        {
            "location": "/api/scim-2.0/#email",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Email"
        },
        {
            "location": "/api/scim-2.0/#entitlement",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n    \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Entitlement"
        },
        {
            "location": "/api/scim-2.0/#group",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         id \n          string  \n         optional \n         - \n         \n     \n     \n         externalId \n          string  \n         optional \n         - \n         \n     \n     \n         meta \n           Meta   \n         optional \n         - \n         \n     \n     \n         schemas \n          array[string]  \n         required \n         - \n         \n     \n     \n         displayName \n          string  \n         optional \n         - \n         \n     \n     \n         members \n          array[ MemberRef ]  \n         optional \n         -",
            "title": "Group"
        },
        {
            "location": "/api/scim-2.0/#groupref",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "GroupRef"
        },
        {
            "location": "/api/scim-2.0/#im",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Im"
        },
        {
            "location": "/api/scim-2.0/#listresponse",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         totalResults \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         startIndex \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         itemsPerPage \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         schemas \n         array[string] \n         optional \n         - \n         \n     \n     \n         resources \n         array[ Resource ] \n         optional \n         -",
            "title": "ListResponse"
        },
        {
            "location": "/api/scim-2.0/#memberref",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "MemberRef"
        },
        {
            "location": "/api/scim-2.0/#meta",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         created \n          string (date-time)  \n         optional \n         - \n         \n     \n     \n         lastModified \n          string (date-time)  \n         optional \n         - \n         \n     \n     \n         location \n          string  \n         optional \n         - \n         \n     \n     \n         version \n          string  \n         optional \n         - \n         \n     \n     \n         attributes \n          array[string]  \n         optional \n         - \n         \n     \n     \n         resourceType \n          string  \n         optional \n         -",
            "title": "Meta"
        },
        {
            "location": "/api/scim-2.0/#name",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         formatted \n          string  \n         optional \n         - \n         \n     \n     \n         familyName \n          string  \n         optional \n         - \n         \n     \n     \n         givenName \n          string  \n         optional \n         - \n         \n     \n     \n         middleName \n          string  \n         optional \n         - \n         \n     \n     \n         honorificPrefix \n          string  \n         optional \n         - \n         \n     \n     \n         honorificSuffix \n          string  \n         optional \n         -",
            "title": "Name"
        },
        {
            "location": "/api/scim-2.0/#phonenumber",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "PhoneNumber"
        },
        {
            "location": "/api/scim-2.0/#photo",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Photo"
        },
        {
            "location": "/api/scim-2.0/#resource",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         id \n         string \n         optional \n         - \n         \n     \n     \n         externalId \n         string \n         optional \n         - \n         \n     \n     \n         meta \n         Meta \n         optional \n         - \n         \n     \n     \n         schemas \n         array[string] \n         required \n         -",
            "title": "Resource"
        },
        {
            "location": "/api/scim-2.0/#role",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Role"
        },
        {
            "location": "/api/scim-2.0/#type",
            "text": "name \n         type \n         required \n         description \n         example",
            "title": "Type"
        },
        {
            "location": "/api/scim-2.0/#user",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         id \n          string  \n         optional \n         - \n         \n     \n     \n         externalId \n          string  \n         optional \n         - \n         \n     \n     \n         meta \n           Meta   \n         optional \n         - \n         \n     \n     \n         schemas \n          array[string]  \n         required \n         - \n         \n     \n     \n         userName \n          string  \n         optional \n         - \n         \n     \n     \n         name \n           Name   \n         optional \n         - \n         \n     \n     \n         displayName \n          string  \n         optional \n         - \n         \n     \n     \n         nickName \n          string  \n         optional \n         - \n         \n     \n     \n         profileUrl \n          string  \n         optional \n         - \n         \n     \n     \n         title \n          string  \n         optional \n         - \n         \n     \n     \n         userType \n          string  \n         optional \n         - \n         \n     \n     \n         preferredLanguage \n          string  \n         optional \n         - \n         \n     \n     \n         locale \n          string  \n         optional \n         - \n         \n     \n     \n         timezone \n          string  \n         optional \n         - \n         \n     \n     \n         active \n          boolean  \n         optional \n         - \n         \n     \n     \n         password \n          string  \n         optional \n         - \n         \n     \n     \n         emails \n          array[ Email ]  \n         optional \n         - \n         \n     \n     \n         phoneNumbers \n          array[ PhoneNumber ]  \n         optional \n         - \n         \n     \n     \n         ims \n          array[ Im ]  \n         optional \n         - \n         \n     \n     \n         photos \n          array[ Photo ]  \n         optional \n         - \n         \n     \n     \n         addresses \n          array[ Address ]  \n         optional \n         - \n         \n     \n     \n         groups \n          array[ GroupRef ]  \n         optional \n         - \n         \n     \n     \n         entitlements \n          array[ Entitlement ]  \n         optional \n         - \n         \n     \n     \n         roles \n          array[ Role ]  \n         optional \n         - \n         \n     \n     \n         x509Certificates \n          array[ X509Certificate ]  \n         optional \n         -",
            "title": "User"
        },
        {
            "location": "/api/scim-2.0/#x509certificate",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n         string \n         optional \n         - \n         \n     \n     \n         value \n         string \n         optional \n         - \n         \n     \n     \n         display \n         string \n         optional \n         - \n         \n     \n     \n         primary \n         boolean \n         optional \n         - \n         \n     \n     \n         type \n         Type \n         optional \n         - \n         \n     \n     \n         $ref \n         string \n         optional \n         -",
            "title": "X509Certificate"
        },
        {
            "location": "/api/scim-2.0/#scimpersonsearch",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         attribute \n          string  \n         required \n         User Attribute Name \n         Username \n     \n     \n         value \n          string  \n         required \n         User Attribute Value \n         Mike",
            "title": "ScimPersonSearch"
        },
        {
            "location": "/integrate/oxd/",
            "text": "OXD\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nOXD\n\n\noxd is a mediator, a service demon that listens on localhost, providing easy APIs that can be called by a web application to simplify using an external OAuth2 server for authentication or authorization. oxd is not a proxy--sometimes it makes API calls on behalf of an application, but other times it just forms the right URLs and returns them to the application. \n\n\nOne significant advantage of using oxd over a native client library is that oxd consolidates the OAuth2 code in one package. If there are updates to the OAuth2 client code, you can update the oxd-server package, without changing the interface to the application.\n\n\nDocumentation\n\n\nThe complete documentation for oxd is made available in a separate address. Please see \nthis link\n for the OXD documentation.",
            "title": "oxd OAuth2 Client Software "
        },
        {
            "location": "/integrate/oxd/#oxd",
            "text": "oxd is a mediator, a service demon that listens on localhost, providing easy APIs that can be called by a web application to simplify using an external OAuth2 server for authentication or authorization. oxd is not a proxy--sometimes it makes API calls on behalf of an application, but other times it just forms the right URLs and returns them to the application.   One significant advantage of using oxd over a native client library is that oxd consolidates the OAuth2 code in one package. If there are updates to the OAuth2 client code, you can update the oxd-server package, without changing the interface to the application.",
            "title": "OXD"
        },
        {
            "location": "/integrate/oxd/#documentation",
            "text": "The complete documentation for oxd is made available in a separate address. Please see  this link  for the OXD documentation.",
            "title": "Documentation"
        },
        {
            "location": "/integrate/ubuntu-installation/",
            "text": "Installation\n\n\nApache Web Server\n\n\nSSL Configuration\n\n\nConfigure Apache to use SSL\n\n\nRestart Apache Manually\n\n\n\n\n\n\nAuthentication Module (auth_openidc)\n\n\n\n\n\n\nConfiguration\n\n\nApache Web Server\n\n\n\n\n\n\nClient Registration\n\n\nDynamic Client Registration\n\n\nPreparing auth_openidc Module\n\n\nLoad auth_openidc Module\n\n\nPreparing Protected Resource\n\n\nEnable Site\n\n\nAccess Site\n\n\n\n\n\n\nManual Client Registration\n\n\nPreparing auth_openidc Module\n\n\nPreparing Protected Resource\n\n\nEnable Site\n\n\nAccess Site\n\n\nGetting DN from Client ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\n\n\nThis is the installation guide for the Apache Module \nauth_openaidc\n.\n\n\nApache Web Server\n\n\nIt is assumed that all the hostnames will be dns resolvable; if not, then add the entries in \n/etc/hosts\n file. Run the following commands to install Apache2, enable SSL and restart the server:\n\n\nsudo apt-get install apache2\nservice apache2 restart\n\n\n\n\nSSL Configuration\n\n\nThe SSL Module is necessary for the Apache OpenID Connect Module. Please use the following commands to activate the \nssl module\n.\n\n\nsudo a2enmod ssl\nservice apache2 restart\n\n\n\n\nThe next step is to create a self-signed SSL Certificate.\n\n\n\n\n\n\nCreate a directory to put the ssl certificates\nsudo mkdir /etc/apache2/ssl\n\n\n\n\n\n\nGenerate the certificate\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt\n\n\n\n\n\n\nAnswer the questions that are asked. A template is given below\n\n\n\n\n\n\n    Country Name (2 letter code) [AU]:US\n    State or Province Name (full name) [Some-State]:Texas\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu Inc\n    Organizational Unit Name (eg, section) []:Gluu Test\n    Common Name (e.g. server FQDN or YOUR name) []:gluu.org\n    Email Address []:support@gluu.org\n\n\n\n\nConfigure Apache to use SSL\n\n\nThis section will guide you through the steps to configure apache to use the SSL module\n\n\n\n\n\n\nOpen the \ndefault-ssl.conf\n file\nsudo vim /etc/apache2/sites-available/default-ssl.conf\n\n\n\n\n\n\nUpdate the certificate locations with the newly created certificates \n/etc/apache2/ssl/apache.key\n and \n/etc/apache2/ssl/apache.crt\n\n\n\n\n\n\nActivate the SSl Virtual Host, if you are running \nauth_oidc\n and \nGluu Server\n in the same machine, and restart Apache Server\n\n\n\n\n\n\nsudo a2ensite default-ssl.conf\nsudo service apache2 restart\n\n\n\n\nRestart Apache Manually\n\n\nIf Apache Web Server fails and the following error is shown, then Apache Server needs to be stopped manually.\n\n\nRestarting web server apache2                                               [fail]\n\n\nRun the following commands to stop the Apache Server manually:\n\n\nsudo /etc/init.d/apache2 stop\nsudo killall apache2\nsudo netstat -l|grep www\nsudo /etc/init.d/apache2 restart\n\n\n\n\nAuthentication Module (auth_openidc)\n\n\nRun the following command to download and install the \nauth_openidc\n module:\n\n\n# wget http://ftp.us.debian.org/debian/pool/main/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n# dpkg -i libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n\n\n\n\nIf the package is not available, please check this \nGithub Page\n.\n\n\nNote:\n This module depends on \nlibhiredis0.10, libpcre3, & libjansson4\n package. If the dependencies are not met, please install them manually using the \napt-get\n command.\n\n\nConfiguration\n\n\nThis is the configuration guide for the Apache Module \nmod_auth_aidc\n.\n\n\nApache Web Server\n\n\nThe default ports for \nhttp\n and \nhttps\n are not used for \nauth_openidc\n module, therefore it is necessary to update three files. The changes are done to avoid a conflict with the Gluu Server's Apache ports. \nBut, if the Gluu Server and the Apache server are different, there is no need to change the ports. \n\n\nChange port numbers to \n44443\n (for SSL) and \n8000\n (for non-SSL) in these three files.\n\n\n\n\n\n\n/etc/apache2/ports.conf\n\n\n\n\n\n\n/etc/apache2/sites-available/000-default.conf\n\n\n\n\n\n\n/etc/apache2/sites-available/default-ssl.conf\n\n\n\n\n\n\nClient Registration\n\n\nThere are two methods for client registration:\n\n\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\n\n\nThe example configuration uses \ndynamic.gluu.org\n as the server name and \nce.gluu.org\n as the Gluu Server name.\n\n\nDynamic Client Registration\n\n\nThe following example shows the configuration for dynamic client registration. \n\n\nPreparing auth_openidc Module\n\n\nThe OpenID Connect module requires a folder to store the metadata, therefore create a metadata folder and change permission using the following commands.\n\n\n# mkdir /var/cache/apache2/metadata\n# chown -R www-data:www-data /var/cache/apache2/metadata\n\n\n\n\nPlease add the following lines in the \nauth_openidc.conf\n configuration file under \n/etc/apache2/mods-available/\n folder.\n\n\nOIDCMetadataDir /var/cache/apache2/mod_auth_openidc/metadata\nOIDCClientSecret secret\nOIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\nOIDCCryptoPassphrase secret\nOIDCSSLValidateServer Off\n\n\n\n\nLoad auth_openidc Module\n\n\nThe module can be enabled using the follwing command:\n\n\nsudo a2enmod auth_openidc\n\n\nThe Apache Web Server must be restarted to load this module. Pleae run the following command to restart the Apache Server:\n\n\nsudo service apache2 restart\n\n\nNote:\n Restart the server after configuring the module, else the server will not restart and it will throw errors. To check for errors, please chek the \nerrors.log\n file in \n/var/log/apache/\n folder.\n\n\nPreparing Protected Resource\n\n\nCreate a directory named \ndynamic\n inside the \n/var/www/html\n directory using the following command:\n\n\nsudo mkdir /var/www/html/dynamic\n\n\nCreate a file named \nindex.html\n in the \ndynamic\n folder and add the following content:\n\n\n<html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>\n\n\n\n\nChange the ownership of the \nhtml\n directory using the following command:\n\n\nsudo chown -R www-data:www-data /var/www/html\n\n\nCreate the apache configuration file named \ndynamic.conf\n in the \n/etc/apache2/sites-available/\n folder and add the following lines in the file:\n\n\n<VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/apache2/ssl/apache.crt\n    SSLCertificateKeyFile /etc/apache2/ssl/apache.key\n</VirtualHost>\n\n\n\n\nNote:\n The example uses a custom port, but if the Apache server is stand-alone in the server, the default \n443\n port can be used. \n\n\nEnable Site\n\n\nThe \ndynamic\n site is enabled using the \na2ensite\n command. Run the commands below to enable the site and restart Apache Server:\n\n\nsudo a2ensite dynamic.conf\n\n\nsudo service apache2 restart\n\n\nAccess Site\n\n\nThe \ndynamic\n site can be accessed from the following URL:\n\n\nhttps://dynamic.gluu.org:44443/dynamic\n\n\nAccessing the link will land you in the discovery page.\n\n\n\nThe usual choice as per present used uris is: \nadmin@ce.gluu.org\n. Note\nthat you have to use an existing user at the gluuCE along with an\nexisting uri. An example is \nexisting_user@your.gluu.ce.server\n.\n\n\nAfter this the \noxAuth\n page from gluuCE is displayed where you enter\nthe credentials for authentication.\n\n\n\n\nManual Client Registration\n\n\nThe following example shows the configuration for manual client registration.\n\n\nPreparing auth_openidc Module\n\n\nPlease add the following lines in the \nauth_openidc\n configuration file.\n\n\nAdd the following lines in \n/etc/apache2/mods-available/auth_openidc.conf\n\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n\n\n\nRun the following command to enable the module:\n\n\nsudo a2enmod auth_openidc\n\n\nPreparing Protected Resource\n\n\nCreate a directory named \nstatic\n inside the \n/var/www/html\n directory using the following command:\n\n\nsudo mkdir /var/www/html/static\n\n\nCreate a file named \nindex.html\n in the \nstatic\n folder and add the following content:\n\n\n<html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>\n\n\n\n\nChange the ownership of the html directory using the following command:\n\n\nsudo chown -R www-data:www-data /var/www/html\n\n\nCreate the apache configuration file named static.conf in the \n/etc/apache2/sites-available/\n folder and add the following lines in the file:\n\n\n<VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n</VirtualHost>\n\n\n\n\nEnable Site\n\n\nThe dynamic site is enabled using the \na2ensite\n command. Run the commands below to enable the site and restart Apache Server:\n\n\nsudo a2ensite static.conf\n\n\nsudo service apache2 restart\n\n\nAccess Site\n\n\nThe \nstatic\n site can be accessed from the following URL:\n\n\nhttps://static.gluu.org:44443/static\n\n\nThis link will lead to the oxAuth page from gluuCE where you enter the credentials for authentication.\n\n\n\nThere is a possibility that you will see the following error upon login:\n\n\nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.\n\n\n\n\nThe apache log will contain the following:\n\n\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n\n\n\n\nGetting DN from Client ID\n\n\nLog into the gluuCE server by running the following command:\n\n\nsudo service gluu-server login\n\n\nWe get the client id from the search performed in Gluu Server's Web UI. So, to get the DN part we perform the below command. The LDAP password can be stored in /root/.pw or at any other location that is convenient for you. In our case the command is:\n\n\n/opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'\n\n\nCreate a file named \nmod.ldif\n with the contents given below. The DN part to be used in mod.ldif is obtained from output of the command above:\n\n\ndn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n\n\n\n\nThen, run the \nldapmodify\n command to insert the \noxAuthSubjectIdentifier\n as below:\n\n\nsudo /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif\n\n\nThe command may vary depending upon your installation. Next, access \nthis page\n, and the success message should be visible or \n<hostname>:44443/static\n.",
            "title": "OpenID Connect RP in Ubuntu"
        },
        {
            "location": "/integrate/ubuntu-installation/#installation",
            "text": "This is the installation guide for the Apache Module  auth_openaidc .",
            "title": "Installation"
        },
        {
            "location": "/integrate/ubuntu-installation/#apache-web-server",
            "text": "It is assumed that all the hostnames will be dns resolvable; if not, then add the entries in  /etc/hosts  file. Run the following commands to install Apache2, enable SSL and restart the server:  sudo apt-get install apache2\nservice apache2 restart",
            "title": "Apache Web Server"
        },
        {
            "location": "/integrate/ubuntu-installation/#ssl-configuration",
            "text": "The SSL Module is necessary for the Apache OpenID Connect Module. Please use the following commands to activate the  ssl module .  sudo a2enmod ssl\nservice apache2 restart  The next step is to create a self-signed SSL Certificate.    Create a directory to put the ssl certificates sudo mkdir /etc/apache2/ssl    Generate the certificate sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt    Answer the questions that are asked. A template is given below        Country Name (2 letter code) [AU]:US\n    State or Province Name (full name) [Some-State]:Texas\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu Inc\n    Organizational Unit Name (eg, section) []:Gluu Test\n    Common Name (e.g. server FQDN or YOUR name) []:gluu.org\n    Email Address []:support@gluu.org  Configure Apache to use SSL  This section will guide you through the steps to configure apache to use the SSL module    Open the  default-ssl.conf  file sudo vim /etc/apache2/sites-available/default-ssl.conf    Update the certificate locations with the newly created certificates  /etc/apache2/ssl/apache.key  and  /etc/apache2/ssl/apache.crt    Activate the SSl Virtual Host, if you are running  auth_oidc  and  Gluu Server  in the same machine, and restart Apache Server    sudo a2ensite default-ssl.conf\nsudo service apache2 restart  Restart Apache Manually  If Apache Web Server fails and the following error is shown, then Apache Server needs to be stopped manually.  Restarting web server apache2                                               [fail]  Run the following commands to stop the Apache Server manually:  sudo /etc/init.d/apache2 stop\nsudo killall apache2\nsudo netstat -l|grep www\nsudo /etc/init.d/apache2 restart",
            "title": "SSL Configuration"
        },
        {
            "location": "/integrate/ubuntu-installation/#authentication-module-auth_openidc",
            "text": "Run the following command to download and install the  auth_openidc  module:  # wget http://ftp.us.debian.org/debian/pool/main/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n# dpkg -i libapache2-mod-auth-openidc_1.6.0-1_amd64.deb  If the package is not available, please check this  Github Page .  Note:  This module depends on  libhiredis0.10, libpcre3, & libjansson4  package. If the dependencies are not met, please install them manually using the  apt-get  command.",
            "title": "Authentication Module (auth_openidc)"
        },
        {
            "location": "/integrate/ubuntu-installation/#configuration",
            "text": "This is the configuration guide for the Apache Module  mod_auth_aidc .",
            "title": "Configuration"
        },
        {
            "location": "/integrate/ubuntu-installation/#apache-web-server_1",
            "text": "The default ports for  http  and  https  are not used for  auth_openidc  module, therefore it is necessary to update three files. The changes are done to avoid a conflict with the Gluu Server's Apache ports. \nBut, if the Gluu Server and the Apache server are different, there is no need to change the ports.   Change port numbers to  44443  (for SSL) and  8000  (for non-SSL) in these three files.    /etc/apache2/ports.conf    /etc/apache2/sites-available/000-default.conf    /etc/apache2/sites-available/default-ssl.conf",
            "title": "Apache Web Server"
        },
        {
            "location": "/integrate/ubuntu-installation/#client-registration",
            "text": "There are two methods for client registration:   Dynamic Client Registration  Manual Client Registration   The example configuration uses  dynamic.gluu.org  as the server name and  ce.gluu.org  as the Gluu Server name.",
            "title": "Client Registration"
        },
        {
            "location": "/integrate/ubuntu-installation/#dynamic-client-registration",
            "text": "The following example shows the configuration for dynamic client registration.   Preparing auth_openidc Module  The OpenID Connect module requires a folder to store the metadata, therefore create a metadata folder and change permission using the following commands.  # mkdir /var/cache/apache2/metadata\n# chown -R www-data:www-data /var/cache/apache2/metadata  Please add the following lines in the  auth_openidc.conf  configuration file under  /etc/apache2/mods-available/  folder.  OIDCMetadataDir /var/cache/apache2/mod_auth_openidc/metadata\nOIDCClientSecret secret\nOIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\nOIDCCryptoPassphrase secret\nOIDCSSLValidateServer Off  Load auth_openidc Module  The module can be enabled using the follwing command:  sudo a2enmod auth_openidc  The Apache Web Server must be restarted to load this module. Pleae run the following command to restart the Apache Server:  sudo service apache2 restart  Note:  Restart the server after configuring the module, else the server will not restart and it will throw errors. To check for errors, please chek the  errors.log  file in  /var/log/apache/  folder.  Preparing Protected Resource  Create a directory named  dynamic  inside the  /var/www/html  directory using the following command:  sudo mkdir /var/www/html/dynamic  Create a file named  index.html  in the  dynamic  folder and add the following content:  <html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>  Change the ownership of the  html  directory using the following command:  sudo chown -R www-data:www-data /var/www/html  Create the apache configuration file named  dynamic.conf  in the  /etc/apache2/sites-available/  folder and add the following lines in the file:  <VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/apache2/ssl/apache.crt\n    SSLCertificateKeyFile /etc/apache2/ssl/apache.key\n</VirtualHost>  Note:  The example uses a custom port, but if the Apache server is stand-alone in the server, the default  443  port can be used.   Enable Site  The  dynamic  site is enabled using the  a2ensite  command. Run the commands below to enable the site and restart Apache Server:  sudo a2ensite dynamic.conf  sudo service apache2 restart  Access Site  The  dynamic  site can be accessed from the following URL:  https://dynamic.gluu.org:44443/dynamic  Accessing the link will land you in the discovery page.  The usual choice as per present used uris is:  admin@ce.gluu.org . Note\nthat you have to use an existing user at the gluuCE along with an\nexisting uri. An example is  existing_user@your.gluu.ce.server .  After this the  oxAuth  page from gluuCE is displayed where you enter\nthe credentials for authentication.",
            "title": "Dynamic Client Registration"
        },
        {
            "location": "/integrate/ubuntu-installation/#manual-client-registration",
            "text": "The following example shows the configuration for manual client registration.  Preparing auth_openidc Module  Please add the following lines in the  auth_openidc  configuration file.  Add the following lines in  /etc/apache2/mods-available/auth_openidc.conf      OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off  Run the following command to enable the module:  sudo a2enmod auth_openidc  Preparing Protected Resource  Create a directory named  static  inside the  /var/www/html  directory using the following command:  sudo mkdir /var/www/html/static  Create a file named  index.html  in the  static  folder and add the following content:  <html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>  Change the ownership of the html directory using the following command:  sudo chown -R www-data:www-data /var/www/html  Create the apache configuration file named static.conf in the  /etc/apache2/sites-available/  folder and add the following lines in the file:  <VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n</VirtualHost>  Enable Site  The dynamic site is enabled using the  a2ensite  command. Run the commands below to enable the site and restart Apache Server:  sudo a2ensite static.conf  sudo service apache2 restart  Access Site  The  static  site can be accessed from the following URL:  https://static.gluu.org:44443/static  This link will lead to the oxAuth page from gluuCE where you enter the credentials for authentication.  There is a possibility that you will see the following error upon login:  Error:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.  The apache log will contain the following:  [Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri  Getting DN from Client ID  Log into the gluuCE server by running the following command:  sudo service gluu-server login  We get the client id from the search performed in Gluu Server's Web UI. So, to get the DN part we perform the below command. The LDAP password can be stored in /root/.pw or at any other location that is convenient for you. In our case the command is:  /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'  Create a file named  mod.ldif  with the contents given below. The DN part to be used in mod.ldif is obtained from output of the command above:  dn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650  Then, run the  ldapmodify  command to insert the  oxAuthSubjectIdentifier  as below:  sudo /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif  The command may vary depending upon your installation. Next, access  this page , and the success message should be visible or  <hostname>:44443/static .",
            "title": "Manual Client Registration"
        },
        {
            "location": "/integrate/centos-installation/",
            "text": "Installation\n\n\nAdd EPEL Repository\n\n\nApache Web Server\n\n\nConfigure SSL Module\n\n\nAuthentication Module (mod_auth_openidc)\n\n\nLoad Authentication Module\n\n\n\n\n\n\n\n\n\n\nClient Registration\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\nGetting DN from Client ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\n\n\nWe assume that all the hostnames will be dns resolvable. If not, then\nadd the according entries in \n/etc/hosts\n, please.\n\n\nAdd EPEL Repository\n\n\nRun the following command to \nAdd EPEL Repo\n.\n\n\n\n\nrpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n\n\n\n\nApache Web Server\n\n\nTo setup \nApache2 SSL\n, run the following commands:\n\n\nyum install httpd mod_ssl\nyum install curl hiredis jansson\n\n\n\n\nConfigure SSL Module\n\n\nThis section will guide you to create SSL certificates.\nUse the following commands to crete a  directory and generate the certificates.\n\n\nmkdir /etc/httpd/ssl\nopenssl req -new -x509 -sha256 -days 365 -nodes -out /etc/httpd/ssl/httpd.pem -keyout /etc/httpd/ssl/httpd.key\n\n\n\n\nYou will be prompted to enter some values such as company name, country etc. Please enter them and your certificate will be ready.\n\n\nThe next step is to configure Apache to use the certificates and use the following command to edit the vhost.conf file.\n\n\nvi /etc/httpd/conf.d/vhost.conf\n\n\n\n\nThe important part of the configuration is to enter the path to the created SSL certificates. The example is given below.\n\n\nNote:\n Please make sure to use the correct server name in the configuration file.\n\n\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n    ServerAdmin support@gluu.org\n    ServerName gluu.org\n\n\n\n\nRestart Apache Server and you are done configuring the SSL Module. Use the command below to restart the Apache Server.\n\n\nservice httpd restart\n\n\n\n\nAuthentication Module (mod_auth_openidc)\n\n\nRun the following command to install the \nmod_auth_openidc\n module:\n\n\nrpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm\n\n\n\n\nNote:\n If there are any difficulties installing \nhiredis\n and \njansson\n,\ntry to update the package database of your system using the following command:\n\n\nyum upgrade\n\n\n\n\nLoad Authentication Module\n\n\nPlease make sure that the following shared-object file exists by running the following command:\n\n\nls -l /usr/lib64/httpd/modules/mod_auth_openidc.so\n\n\n\n\nNext, create an \nApache \nconf\n file for loading this module.\n\n\necho -e \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\\nListen 44443\" > /etc/httpd/conf.d/mod_auth_openidc.conf\n\n\n\n\nThe file \n/etc/httpd/conf.d/mod_auth_openidc.conf\n will now contain\nthese two lines:\n\n\nLoadModule auth_openidc_module modules/mod_auth_openidc.so\nListen 44443\n\n\n\n\nThis Apache mod should now be listening on port \n44443\n. To enable\nthis, start the Apache service (running gluuCE at \nce.gluu.org\n):\n\n\nservice httpd start\n\n\n\n\nClient Registration\n\n\nThere are two methods for client registration:\n\n\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\n\n\nYou can use any of the methods to register the client.\n\n\nDynamic Client Registration\n\n\nFor dynamic client registration, we'll name the server: \ndynamic.gluu.org.\n\n\nCreate a directory named \ndynamic\n inside the directory \n/var/www/html\n, that is:\n\n\nmkdir /var/www/html/dynamic\n\n\n\n\nNow, create a file named \nindex.html\n, and add the following content:\n\n\n<html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>\n\n\n\n\nCreate another directory named \nmetadata\n inside the directory from\nabove to hold further metadata. Then, change the ownership of this\ndirectory using this command:\n\n\nchown -R apache:apache /var/www/html\n\n\n\n\nLet's create the Apache configuration file now. Create a file named\n\n/etc/httpd/conf.d/dynamic.conf\n with the content as below:\n\n\n<VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n</VirtualHost>\n\n\n\n\nHere, both certificate and key files already exist on the server. You\ncan use your own, too. Next, enable the site by running the\nfollowing command, and restart the Apache service as:\n\n\nln -s /etc/httpd/sites-available/dynamic.conf\nservice httpd restart\n\n\n\n\nNow, try to access \nthis page\n,\nand you'll be presented with a discovery page. To access this page,\nenter \nadmin@ce.gluu.org\n.\n\n\n\n\nThe usual choice as per present used uris is: \nadmin@ce.gluu.org\n. Note\nthat you have to use an existing user at the gluuCE along with an\nexisting uri. An example is \nexisting_user@your.gluu.ce.server\n.\n\n\nAfter this the \noxAuth\n page from gluuCE is displayed where you enter\nthe credentials for authentication.\n\n\n\n\nManual Client Registration\n\n\nConsidering the \nmanual client registration\n case, we will name the\nserver \nstatic.gluu.org\n, instead.\n\n\nCreate a directory named \n/var/www/html/static\n, i. e. with this\ncommand:\n\n\nmkdir /var/www/html/static\n\n\n\n\nNow, let's create another file named \nindex.html\n with this content:\n\n\n<html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Manual registration\n    </body>\n</html>\n\n\n\n\nThen, change the ownerships by using this command:\n\n\nchown -R apache:apache /var/www/html\n\n\n\n\nCreate a file named \n/etc/httpd/conf.d/static.conf\n with the contents as\nbelow:\n\n\n<VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n</VirtualHost>\n\n\n\n\nInstead of pre-existing cert and key files, feel free to use your own.\nNext, enable the static site by running the following command, and\nrestart the Apache service as below:\n\n\nln -s /etc/httpd/sites-available/sites-available/static.conf\nservice httpd restart\n\n\n\n\nNow, try to access \nthis page\n,\nand you should see the oxAuth page from gluuCE where you enter the\ncredentials for authentication.\n\n\n\n\nChances are there that you'll see this error after logging in: \n\n\nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.\n\n\n\n\nThe according Apache log looks like that:\n\n\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n\n\n\n\nTo solve this problem, log into the gluuCE server by running the\nfollowing command:\n\n\nservice gluu-server login\n\n\n\n\nGetting DN from Client ID\n\n\nWe get the client id from the search performed in Gluu Server's Web UI.\nSo, to get the DN part we perform the below command. The LDAP password\ncan be stored in \n/root/.pw\n or at any other location that is convenient\nfor you. In our case the command is:\n\n\n/opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'\n\n\n\n\nCreate a file named \nmod.ldif\n with the contents given below. The DN\npart to be used in \nmod.ldif\n is obtained from output of the command\nabove:\n\n\ndn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n\n\n\n\nThen, run the \nldapmodify\n command to insert the\n\noxAuthSubjectIdentifier\n as below:\n\n\n/opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif\n\n\n\n\nThe command may vary depending upon your installation. Next, access\n\nthis page\n or \n<hostname>:4443/static\n, and the success\nmessage should be visible.",
            "title": "OpenID Connect RP in CentOS"
        },
        {
            "location": "/integrate/centos-installation/#installation",
            "text": "We assume that all the hostnames will be dns resolvable. If not, then\nadd the according entries in  /etc/hosts , please.  Add EPEL Repository  Run the following command to  Add EPEL Repo .   rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm",
            "title": "Installation"
        },
        {
            "location": "/integrate/centos-installation/#apache-web-server",
            "text": "To setup  Apache2 SSL , run the following commands:  yum install httpd mod_ssl\nyum install curl hiredis jansson",
            "title": "Apache Web Server"
        },
        {
            "location": "/integrate/centos-installation/#configure-ssl-module",
            "text": "This section will guide you to create SSL certificates.\nUse the following commands to crete a  directory and generate the certificates.  mkdir /etc/httpd/ssl\nopenssl req -new -x509 -sha256 -days 365 -nodes -out /etc/httpd/ssl/httpd.pem -keyout /etc/httpd/ssl/httpd.key  You will be prompted to enter some values such as company name, country etc. Please enter them and your certificate will be ready.  The next step is to configure Apache to use the certificates and use the following command to edit the vhost.conf file.  vi /etc/httpd/conf.d/vhost.conf  The important part of the configuration is to enter the path to the created SSL certificates. The example is given below.  Note:  Please make sure to use the correct server name in the configuration file.      SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n    ServerAdmin support@gluu.org\n    ServerName gluu.org  Restart Apache Server and you are done configuring the SSL Module. Use the command below to restart the Apache Server.  service httpd restart",
            "title": "Configure SSL Module"
        },
        {
            "location": "/integrate/centos-installation/#authentication-module-mod_auth_openidc",
            "text": "Run the following command to install the  mod_auth_openidc  module:  rpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm  Note:  If there are any difficulties installing  hiredis  and  jansson ,\ntry to update the package database of your system using the following command:  yum upgrade  Load Authentication Module  Please make sure that the following shared-object file exists by running the following command:  ls -l /usr/lib64/httpd/modules/mod_auth_openidc.so  Next, create an  Apache  conf  file for loading this module.  echo -e \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\\nListen 44443\" > /etc/httpd/conf.d/mod_auth_openidc.conf  The file  /etc/httpd/conf.d/mod_auth_openidc.conf  will now contain\nthese two lines:  LoadModule auth_openidc_module modules/mod_auth_openidc.so\nListen 44443  This Apache mod should now be listening on port  44443 . To enable\nthis, start the Apache service (running gluuCE at  ce.gluu.org ):  service httpd start",
            "title": "Authentication Module (mod_auth_openidc)"
        },
        {
            "location": "/integrate/centos-installation/#client-registration",
            "text": "There are two methods for client registration:   Dynamic Client Registration  Manual Client Registration   You can use any of the methods to register the client.",
            "title": "Client Registration"
        },
        {
            "location": "/integrate/centos-installation/#dynamic-client-registration",
            "text": "For dynamic client registration, we'll name the server:  dynamic.gluu.org.  Create a directory named  dynamic  inside the directory  /var/www/html , that is:  mkdir /var/www/html/dynamic  Now, create a file named  index.html , and add the following content:  <html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>  Create another directory named  metadata  inside the directory from\nabove to hold further metadata. Then, change the ownership of this\ndirectory using this command:  chown -R apache:apache /var/www/html  Let's create the Apache configuration file now. Create a file named /etc/httpd/conf.d/dynamic.conf  with the content as below:  <VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n</VirtualHost>  Here, both certificate and key files already exist on the server. You\ncan use your own, too. Next, enable the site by running the\nfollowing command, and restart the Apache service as:  ln -s /etc/httpd/sites-available/dynamic.conf\nservice httpd restart  Now, try to access  this page ,\nand you'll be presented with a discovery page. To access this page,\nenter  admin@ce.gluu.org .   The usual choice as per present used uris is:  admin@ce.gluu.org . Note\nthat you have to use an existing user at the gluuCE along with an\nexisting uri. An example is  existing_user@your.gluu.ce.server .  After this the  oxAuth  page from gluuCE is displayed where you enter\nthe credentials for authentication.",
            "title": "Dynamic Client Registration"
        },
        {
            "location": "/integrate/centos-installation/#manual-client-registration",
            "text": "Considering the  manual client registration  case, we will name the\nserver  static.gluu.org , instead.  Create a directory named  /var/www/html/static , i. e. with this\ncommand:  mkdir /var/www/html/static  Now, let's create another file named  index.html  with this content:  <html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Manual registration\n    </body>\n</html>  Then, change the ownerships by using this command:  chown -R apache:apache /var/www/html  Create a file named  /etc/httpd/conf.d/static.conf  with the contents as\nbelow:  <VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n</VirtualHost>  Instead of pre-existing cert and key files, feel free to use your own.\nNext, enable the static site by running the following command, and\nrestart the Apache service as below:  ln -s /etc/httpd/sites-available/sites-available/static.conf\nservice httpd restart  Now, try to access  this page ,\nand you should see the oxAuth page from gluuCE where you enter the\ncredentials for authentication.   Chances are there that you'll see this error after logging in:   Error:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.  The according Apache log looks like that:  [Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri  To solve this problem, log into the gluuCE server by running the\nfollowing command:  service gluu-server login  Getting DN from Client ID  We get the client id from the search performed in Gluu Server's Web UI.\nSo, to get the DN part we perform the below command. The LDAP password\ncan be stored in  /root/.pw  or at any other location that is convenient\nfor you. In our case the command is:  /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'  Create a file named  mod.ldif  with the contents given below. The DN\npart to be used in  mod.ldif  is obtained from output of the command\nabove:  dn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650  Then, run the  ldapmodify  command to insert the oxAuthSubjectIdentifier  as below:  /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif  The command may vary depending upon your installation. Next, access this page  or  <hostname>:4443/static , and the success\nmessage should be visible.",
            "title": "Manual Client Registration"
        },
        {
            "location": "/integrate/oxray/",
            "text": "oxRay\n\n\nLifeRay\n OpenID Connect plugin to authenticate users using\nGluu IdP.\n[TOC]\n\n\nOverview\n\n\nThe oxAuth LifeRay plugin is used to authenticate and auto-log users\nfrom Gluu Server into \nLifeRay\n with the same credentials. It\nis built on top of oxAuth, the OpenID Connect provider by Gluu.\n\n\nThe oxAuth plugin intercepts any attempt to login from anywhere in the\nLifeRay and redirects the request and the user to an oxAuth server where\nthe identification takes place, actually. If the user has authorized the\nserver to share some of his basic information with the oxAuth plugin,\nthe user will be redirected back to the LifeRay CMS, and logged in,\nautomatically.\n\n\nThe goal of this project is to use the LifeRay CMS as the basis for an\norganizational personal data store service.\n\n\nNote: This plugin does not support auto-user creation from information\nsupplied by the oxAuth Plugin. Instead, it can be implemented by\nextending the plugin.\n\n\nDeployment\n\n\nThe plugin is provided in two variants--\nMaven\n and \nAnt\n.\nYou can either use Maven or the LifeRay plugin SDK to build and deploy\nthis plugin as a standard LifeRay hot deployable WAR file.\n\n\nDeploying WAR file using Maven\n\n\nThis requires a prerequisite: make sure that you have \nMaven\n\ninstalled on your system to build this plugin from source.\n\n\n\n\n\n\nCheckout the Maven source from the [oxRay Repository][https://github.com/GluuFederation/oxRay/tree/master/6.2.x/maven/gluu-openid-connect-hook].\n\n\n\n\n\n\nOpen the file \npom.xml\n in \ngluu-openid-connect-hook\n, and update\nyour local LifeRay Tomcat bundle path. This is required for building the\nWAR file and deploying to the LifeRay Tomcat bundle.\n\n\n\n\n\n\n\n\n\n\nRun the following command in the \ngluu/6.2.x/maven/gluu-openid-connect-hook\n \ndirectory:\n\n\n\n\nmvn clean install package liferay:deploy\n\n\n\n\nThis will take a few seconds to download the dependency \njar\n files, and\ngenerate the LifeRay-compiled deployable WAR file. It will be placed\nwithin your \n<liferay-bundle-folder>/deploy\n directory, and the hot\ndeployable process will start.\n\n\nUsing LifeRay Plugin SDK With Ant\n\n\nThis requires a prerequisite: we assume that you have the plugin SDK\nboth installed and configured with LifeRay bundle.\n\n\n\n\n\n\nCheckout the gluu-openid-connect-hook plugin source from the\nrepository, and place these files in your local directory for the plugin\nSDK. Usually, this is \nliferay-plugins-sdk-6.2.0-ce-ga1/hooks\n.\n\n\n\n\n\n\nRun the following command in the folder \nliferay-plugins-sdk-6.2.0-ce-ga1/hooks/gluu-openid-connect-hook\n:\n\n\n\n\n\n\nant clean deploy\n\n\n\n\nUsing Binary From Repository\n\n\nYou can also download a compiled binary as a standard LifeRay deployable\nWAR file from the following location:\n\n\noxRay LifeRay Deployable War File\n\n\nCopy this WAR file in your LifeRay bundle. Usually, this is located at\n\nliferay-portal-6.2.0-ce-ga1/deploy\n.\n\n\nOnce the plugin is deployed as a WAR file either using Maven or Ant, you\nwill see the following success message in your LifeRay Tomcat server:\n\n\n\n\nClient Registration\n\n\nA LifeRay application needs to be registered with the Authorization\nserver before initiating an authentication request/response with OAuth\nIdP server.\n\n\nThe following steps are necessary to obtain both a client id and a\nclient secret. These data will be used within the LifeRay portal\nproperties.\n\n\n\n\nGo to the location \nhttps://seed.gluu.org/oxauth-rp/home.seam\n.\n\n\nYou will see the Dynamic Client Registration Section.\n\n\nEnter the Registration Endpoint uri, for example\n\nhttps://idp.example.org/oxauth/seam/resource/restv1/oxauth/authorize\n.\n\n\nYou can derive this uri from your IdP auto-discovery uri which is\nlike that: \nhttps://<Your IDP Server Domain>/.well-known/openid-configuration\n.\n\n\nYou can search for the registration endpoint, and copy that uri here.\n\n\n\n\n\n\nEnter the redirect uris as \nhttp://localhost:8080/openidconnect/callback\n:\n\n\nReplace your domain name with \nlocalhost:8080\n\n\nThis will be your LifeRay handler for logging a user into LifeRay,\nautomatically, when a redirect comes back from the OAuth server.\n\n\n\n\n\n\nSelect the Response Types: CODE\n\n\nSelect the Application Type: WEB\n\n\nFor development purposes use: NATIVE (if you are testing on a local\nmachine with \nlocalhost:8080\n domain)\n\n\nEnter Client Name: LifeRay App (you can choose any name here).\n\n\nAll other options can be left as they are--please see the attached\nscreenshot:\n\n\n\n\n\n\n\n\nClick \nSubmit\n, and both the following \nRegistration Request\n and\n\nRegistration Response\n will be displayed:\n\n\n\n\n\n\n\n\nSave the Registration Response to your local system. The parameters\n\nclient_id\n and \nclient_secret\n are used in LifeRay when configuring\n\nportal-ext.properties\n.\n\n\n\n\nModifying portal.properties\n\n\nIt is necessary to modify \nportal-ext.properties\n file to reflect oxAuth\nserver client credentials and server's URL. It can be accomplished by\nnavigating into the \nliferay-portal-6.2.0-ce-ga1\n folder, where the file\n\nportal-ext.properties\n is stored.\n\n\nNote: To either activate or deactivate the oxAuth plugin put the value\n\ntrue\n (to activate) or \nfalse\n (to deactivate), respectively.\n\n\ngluu.openidconnect.auth.enabled=true\n\n\n\n\n\n\noxAuth client ID and client secret:\n\n\n\n\ngluu.openidconnect.client.id=@!1111!0008!51CE.1E59\ngluu.openidconnect.client.secret=65777eb7-87a8-4d60-9dbc-d31d43971f2b\n\n\n\n\n\n\nOAuth server domain\n\n\n\n\ngluu.openidconnect.idp.domain=https://idp.gluu.org`\n\n\n\n\n\n\nOAuth server auto discovery uri\n\n\n\n\ngluu.openidconnect.url.discovery=https://idp.gluu.org/.well-known/openid-configuration\n\n\n\n\n\n\nYour OAuth server logout uri (typically, this will be used to logout a\nuser from OAuth when a user logs out from LifeRay)\n\n\n\n\ngluu.openidconnect.idp.logout=https://idp.gluu.org/identity/logout\n\n\n\n\n\n\nLifeRay server callback uri that will be used as a handling response\nby the OAuth server after authentication:\n\n\nreplace the \nlocalhost:8080\n with your LifeRay domain name:\n\n\n\n\ngluu.openidconnect.client.redirect.url=http://localhost:8080/openidconnect/callback\n\n\n\n\n This page will be invoked when the user does not exist in the\n LifeRay database, but gets authenticated from the OAuth Server.\n\n\n\n\n\nTypically, create a LifeRay page with the name \n/no-such-user-found\n,\n  or redirect to the LifeRay registration page uri like that:\n\n\n\n\ngluu.openidconnect.no.such.user.redirect.url=http://localhost:8080/no-such-user-found\n\n\n\n\nRestart the LifeRay server after editing the file\n\nportal-ext.properties\n.\n\n\nLogin Using the LifeRay Front End\n\n\n\n\n\n\nServer Bootup\n\n\n\n\nOnce the LifeRay server is restarted, open your browser and\n  navigate to the uri \nhttp://localhost:8080\n.\n\n\n\n\n\n\n\n\nLogin uri\n\n\n\n\nOnce the LifeRay page successfully loaded navigate to the OpenID\n  connect page at \nhttp://localhost:8080/openidconnect/login\n.\n\n\n\n\n\n\n\n\nNote: you can edit the theme code, and link to the login uri as\n\nhttp://localhost:8080/openidconnect/login\n. In result the user will\nalways redirect to the OAuth server for authentication.\n\n\n\n\nOAuth authentication\n\n\nThe LifeRay login uri will redirect users to the OAuth IdP server\n  for user authentication. Internally, passing the oAuth client id \n  as the following screen:\n\n\n\n\n\n\n\n\n\n\n\n\nRequest for permission\n\n\nThis screen can be configured depending upon your OAuth Server\n  implementation.\n\n\n\n\n\n\n\n\n\n\n\n\nOAuth callback (user auto-login to LifeRay)\n\n\nAfter a successful authentication with the OAuth server, IdP will\nsend a callback to LifeRay with a specific code as a parameter:\n\n\n\n\n\n\n\n\nhttp://localhost:8080/openidconnect/callback?code=xxx`\n\n\n\n\nThis will be intercepted by our oxAuth LifeRay plugin. Upon validation\nof the token with the Gluu IdP, it will result in a login of the user to\nthe LifeRay. The user will be redirected to his respective start page.",
            "title": "OpenID Connect Liferay Plugin"
        },
        {
            "location": "/integrate/oxray/#oxray",
            "text": "LifeRay  OpenID Connect plugin to authenticate users using\nGluu IdP.\n[TOC]",
            "title": "oxRay"
        },
        {
            "location": "/integrate/oxray/#overview",
            "text": "The oxAuth LifeRay plugin is used to authenticate and auto-log users\nfrom Gluu Server into  LifeRay  with the same credentials. It\nis built on top of oxAuth, the OpenID Connect provider by Gluu.  The oxAuth plugin intercepts any attempt to login from anywhere in the\nLifeRay and redirects the request and the user to an oxAuth server where\nthe identification takes place, actually. If the user has authorized the\nserver to share some of his basic information with the oxAuth plugin,\nthe user will be redirected back to the LifeRay CMS, and logged in,\nautomatically.  The goal of this project is to use the LifeRay CMS as the basis for an\norganizational personal data store service.  Note: This plugin does not support auto-user creation from information\nsupplied by the oxAuth Plugin. Instead, it can be implemented by\nextending the plugin.",
            "title": "Overview"
        },
        {
            "location": "/integrate/oxray/#deployment",
            "text": "The plugin is provided in two variants-- Maven  and  Ant .\nYou can either use Maven or the LifeRay plugin SDK to build and deploy\nthis plugin as a standard LifeRay hot deployable WAR file.  Deploying WAR file using Maven  This requires a prerequisite: make sure that you have  Maven \ninstalled on your system to build this plugin from source.    Checkout the Maven source from the [oxRay Repository][https://github.com/GluuFederation/oxRay/tree/master/6.2.x/maven/gluu-openid-connect-hook].    Open the file  pom.xml  in  gluu-openid-connect-hook , and update\nyour local LifeRay Tomcat bundle path. This is required for building the\nWAR file and deploying to the LifeRay Tomcat bundle.      Run the following command in the  gluu/6.2.x/maven/gluu-openid-connect-hook  \ndirectory:   mvn clean install package liferay:deploy  This will take a few seconds to download the dependency  jar  files, and\ngenerate the LifeRay-compiled deployable WAR file. It will be placed\nwithin your  <liferay-bundle-folder>/deploy  directory, and the hot\ndeployable process will start.  Using LifeRay Plugin SDK With Ant  This requires a prerequisite: we assume that you have the plugin SDK\nboth installed and configured with LifeRay bundle.    Checkout the gluu-openid-connect-hook plugin source from the\nrepository, and place these files in your local directory for the plugin\nSDK. Usually, this is  liferay-plugins-sdk-6.2.0-ce-ga1/hooks .    Run the following command in the folder  liferay-plugins-sdk-6.2.0-ce-ga1/hooks/gluu-openid-connect-hook :    ant clean deploy  Using Binary From Repository  You can also download a compiled binary as a standard LifeRay deployable\nWAR file from the following location:  oxRay LifeRay Deployable War File  Copy this WAR file in your LifeRay bundle. Usually, this is located at liferay-portal-6.2.0-ce-ga1/deploy .  Once the plugin is deployed as a WAR file either using Maven or Ant, you\nwill see the following success message in your LifeRay Tomcat server:   Client Registration  A LifeRay application needs to be registered with the Authorization\nserver before initiating an authentication request/response with OAuth\nIdP server.  The following steps are necessary to obtain both a client id and a\nclient secret. These data will be used within the LifeRay portal\nproperties.   Go to the location  https://seed.gluu.org/oxauth-rp/home.seam .  You will see the Dynamic Client Registration Section.  Enter the Registration Endpoint uri, for example https://idp.example.org/oxauth/seam/resource/restv1/oxauth/authorize .  You can derive this uri from your IdP auto-discovery uri which is\nlike that:  https://<Your IDP Server Domain>/.well-known/openid-configuration .  You can search for the registration endpoint, and copy that uri here.    Enter the redirect uris as  http://localhost:8080/openidconnect/callback :  Replace your domain name with  localhost:8080  This will be your LifeRay handler for logging a user into LifeRay,\nautomatically, when a redirect comes back from the OAuth server.    Select the Response Types: CODE  Select the Application Type: WEB  For development purposes use: NATIVE (if you are testing on a local\nmachine with  localhost:8080  domain)  Enter Client Name: LifeRay App (you can choose any name here).  All other options can be left as they are--please see the attached\nscreenshot:     Click  Submit , and both the following  Registration Request  and Registration Response  will be displayed:     Save the Registration Response to your local system. The parameters client_id  and  client_secret  are used in LifeRay when configuring portal-ext.properties .   Modifying portal.properties  It is necessary to modify  portal-ext.properties  file to reflect oxAuth\nserver client credentials and server's URL. It can be accomplished by\nnavigating into the  liferay-portal-6.2.0-ce-ga1  folder, where the file portal-ext.properties  is stored.  Note: To either activate or deactivate the oxAuth plugin put the value true  (to activate) or  false  (to deactivate), respectively.  gluu.openidconnect.auth.enabled=true   oxAuth client ID and client secret:   gluu.openidconnect.client.id=@!1111!0008!51CE.1E59\ngluu.openidconnect.client.secret=65777eb7-87a8-4d60-9dbc-d31d43971f2b   OAuth server domain   gluu.openidconnect.idp.domain=https://idp.gluu.org`   OAuth server auto discovery uri   gluu.openidconnect.url.discovery=https://idp.gluu.org/.well-known/openid-configuration   Your OAuth server logout uri (typically, this will be used to logout a\nuser from OAuth when a user logs out from LifeRay)   gluu.openidconnect.idp.logout=https://idp.gluu.org/identity/logout   LifeRay server callback uri that will be used as a handling response\nby the OAuth server after authentication:  replace the  localhost:8080  with your LifeRay domain name:   gluu.openidconnect.client.redirect.url=http://localhost:8080/openidconnect/callback   This page will be invoked when the user does not exist in the\n LifeRay database, but gets authenticated from the OAuth Server.   Typically, create a LifeRay page with the name  /no-such-user-found ,\n  or redirect to the LifeRay registration page uri like that:   gluu.openidconnect.no.such.user.redirect.url=http://localhost:8080/no-such-user-found  Restart the LifeRay server after editing the file portal-ext.properties .  Login Using the LifeRay Front End    Server Bootup   Once the LifeRay server is restarted, open your browser and\n  navigate to the uri  http://localhost:8080 .     Login uri   Once the LifeRay page successfully loaded navigate to the OpenID\n  connect page at  http://localhost:8080/openidconnect/login .     Note: you can edit the theme code, and link to the login uri as http://localhost:8080/openidconnect/login . In result the user will\nalways redirect to the OAuth server for authentication.   OAuth authentication  The LifeRay login uri will redirect users to the OAuth IdP server\n  for user authentication. Internally, passing the oAuth client id \n  as the following screen:       Request for permission  This screen can be configured depending upon your OAuth Server\n  implementation.       OAuth callback (user auto-login to LifeRay)  After a successful authentication with the OAuth server, IdP will\nsend a callback to LifeRay with a specific code as a parameter:     http://localhost:8080/openidconnect/callback?code=xxx`  This will be intercepted by our oxAuth LifeRay plugin. Upon validation\nof the token with the Gluu IdP, it will result in a login of the user to\nthe LifeRay. The user will be redirected to his respective start page.",
            "title": "Deployment"
        },
        {
            "location": "/integrate/apache-saml/",
            "text": "Apache SAML\n\n\nConfiguring Apache Shibboleth SP in CentOS\n\n\nSystem Preparation\n\n\nAdd Shibboleth repository for CentOS\n\n\n\n\nThe file \nshib.repo\n contains the following entry:\n\n\n\n\n[security_shibboleth]\nname=Shibboleth (CentOS_CentOS-6)\ntype=rpm-md\nbaseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/\ngpgcheck=1\ngpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/repodata/repomd.xml.key\nenabled=1\n\n\n\n\n\n\nDownload the Shibboleth security repo key from here:\n\n\n\n\nhttp://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo\n\n\n\n\nShibboleth SP Installation\n\n\nTo install the Shibboleth SP, run the following commands in a terminal:\n\n\n# yum install shibboleth\n# service shibd start\n# chkconfig shibd on\n\n\n\n\nInstall and Configure httpd\n\n\nInstallation\n\n\nThe following commands will both install, and start the Apache web\nserver on your machine/Linux environment:\n\n\n# yum install httpd\n# service httpd start\n# service iptables stop \n\n\n\n\nConfiguration\n\n\nEdit the file \nhttpd.conf\n, and do the following changes:\n\n\n\n\n\n\nChange the \nServerName\n directive to the server name of the SP.\n\n\n\n\n\n\nSet \nUseCanonicalName On\n.\n\n\n\n\n\n\nRestart the httpd service using the command \nservice httpd restart\n.\n\n\n\n\n\n\nHttpd Testing\n\n\n\n\n\n\nCreate an \nindex.html\n file inside the directory \n/var/www/html\n.\n\n\n\n\n\n\nRestart the httpd service using the command \nservice httpd restart\n.\n\n\n\n\n\n\nCheck from your browser if the file \nindex.html\n is visible.\n\n\n\n\n\n\nSP Key Certificate\n\n\n\n\n\n\nCreate both a private key, and a certificate, and place those in the\n  file \n/etc/shibboleth\n.\n\n\n\n\n\n\nChange the permissions of these files so that the web server can read\n  the files.\n\n\n\n\n\n\nShibboleth SP Configuration\n\n\nThis section describes how to configure the file \nshibboleth2.xml\n.\n\n\n\n\n\n\nProvide the \nentityID\n of the according SP in:\n\n\n\n\n<ApplicationDefaults entityID=\"http://sp.example.org/Shibboleth\"> section\n\n\n\n\n\n\n\n\nProvide the \nentityID\n of the IdP in:\n\n\n\n\n<SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"> section\n\n\n\n\n\n\n\n\nAdjust the entry of the metadata provider. In most cases this is the\n  Gluu IdP metadata link:\n\n\n\n\n<MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"> section\n\n\n\n\n\n\n\n\nProvide both the key and certificate of the SP in:\n\n\n\n\n<CredentialResolver type=\"File\" key=\"spkey.key\" certificate=\"spcrt.crt\"> section\n\n\n\n\n\n\n\n\nShibboleth Manual Configuration (one Physical SP):\n\n\n\n\n\n\nCreate a directory named under \n/var/www/secure\n.\n\n\n\n\n\n\nChange the permissions for that directory \nsecure\n to\n  \napache:apache\n (owner and group of the web server).\n\n\n\n\n\n\nhttpd.conf\n\n\n\n\n\n\nchange the ServerName \n<hostname_of_server>\n\n\n\n\n\n\nDefine the Location, and the authorization type:\n\n\n<Location /secure>\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n</Location>\n\n\n\n\n\n\n\n\n\n\nconfigure \nshibboleth2.xml\n\n\n\n\n\n\nSet the EntityID of the SP: \nApplicationDefaults entityID=\"http://hostname/secure\"\n\n\n\n\n\n\nProvide the EntityID of the IDP: \nSSO entityID=\"https://idp.gluu.org/idp/shibboleth\"\n\n\n\n\n\n\nSet both the Metadata Provider, and the IDP: \nMetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"\n\n\n\n\n\n\n\n\n\n\nRestart both shibd and Apache2 using these lines:\n\n\n\n\n\n\nservice shibd restart\nservice httpd restart\n\n\n\n\n\n\nCreate a Trust Relationship for this SP in your desired IdP.",
            "title": "SAML SP in CentOS"
        },
        {
            "location": "/integrate/apache-saml/#apache-saml",
            "text": "",
            "title": "Apache SAML"
        },
        {
            "location": "/integrate/apache-saml/#configuring-apache-shibboleth-sp-in-centos",
            "text": "System Preparation  Add Shibboleth repository for CentOS   The file  shib.repo  contains the following entry:   [security_shibboleth]\nname=Shibboleth (CentOS_CentOS-6)\ntype=rpm-md\nbaseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/\ngpgcheck=1\ngpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/repodata/repomd.xml.key\nenabled=1   Download the Shibboleth security repo key from here:   http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo  Shibboleth SP Installation  To install the Shibboleth SP, run the following commands in a terminal:  # yum install shibboleth\n# service shibd start\n# chkconfig shibd on  Install and Configure httpd  Installation  The following commands will both install, and start the Apache web\nserver on your machine/Linux environment:  # yum install httpd\n# service httpd start\n# service iptables stop   Configuration  Edit the file  httpd.conf , and do the following changes:    Change the  ServerName  directive to the server name of the SP.    Set  UseCanonicalName On .    Restart the httpd service using the command  service httpd restart .    Httpd Testing    Create an  index.html  file inside the directory  /var/www/html .    Restart the httpd service using the command  service httpd restart .    Check from your browser if the file  index.html  is visible.    SP Key Certificate    Create both a private key, and a certificate, and place those in the\n  file  /etc/shibboleth .    Change the permissions of these files so that the web server can read\n  the files.    Shibboleth SP Configuration  This section describes how to configure the file  shibboleth2.xml .    Provide the  entityID  of the according SP in:   <ApplicationDefaults entityID=\"http://sp.example.org/Shibboleth\"> section     Provide the  entityID  of the IdP in:   <SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"> section     Adjust the entry of the metadata provider. In most cases this is the\n  Gluu IdP metadata link:   <MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"> section     Provide both the key and certificate of the SP in:   <CredentialResolver type=\"File\" key=\"spkey.key\" certificate=\"spcrt.crt\"> section     Shibboleth Manual Configuration (one Physical SP):    Create a directory named under  /var/www/secure .    Change the permissions for that directory  secure  to\n   apache:apache  (owner and group of the web server).    httpd.conf    change the ServerName  <hostname_of_server>    Define the Location, and the authorization type:  <Location /secure>\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n</Location>      configure  shibboleth2.xml    Set the EntityID of the SP:  ApplicationDefaults entityID=\"http://hostname/secure\"    Provide the EntityID of the IDP:  SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"    Set both the Metadata Provider, and the IDP:  MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"      Restart both shibd and Apache2 using these lines:    service shibd restart\nservice httpd restart   Create a Trust Relationship for this SP in your desired IdP.",
            "title": "Configuring Apache Shibboleth SP in CentOS"
        },
        {
            "location": "/integrate/ubuntu-shib-apache/",
            "text": "Super Quick Ubuntu Shib Apache Install\n\n\nNeed to protect a test Apache folder using SAML on an Ubuntu server?\nHate to read? This article is for you. Replace both \nminnow\n and\n\nminnow.gluu.info\n with your desired website hostname.\n\n\nConfigure Apache\n\n\nThese are the steps to configure your Apache webserver properly:\n\n\n# apt-get install apache2 libshibsp6 libapache2-mod-shib2\n# a2enmod cgi\n# a2enmod ssl\n# a2enmod shib2\n# a2ensite default-ssl\n# mkdir /etc/certs\n# cd /etc/certs\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt\n# shib-metagen -c /etc/certs/minnow.crt -h minnow.gluu.info > /etc/shibboleth/minnow-metadata.xml\n# service apache2 start\n# service shibd start\n\n\n\n\nDownload \nminnow-metadata.xml\n to your machine. You will need this file\nlater when you create the Trust Relationship in the Gluu Server.\n\n\n# mkdir protected\n# touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py\n\n\n\n\nEdit the default site at \n/etc/apache2/sites-available/default-ssl.conf\n, \nand add this part:\n\n\nScriptAlias /protected/ /var/www/protected/\n<Directory /var/www/protected>\n    AddHandler cgi-script .py\n    Options +ExecCGI\n    SSLOptions +StdEnvVars\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    Require valid-user\n</Directory>\n\n\n\n\nEdit \nprintHeaders.py\n, and add this simple script. It will show you the\nHTTP headers:\n\n\n#!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"\n\n\n\n\nConfigure the Shibboleth SP\n\n\nUse this for \nshibboleth2.xml\n and replace \nsquid.gluu.info\n with the\nhostname of your SP, and \nalbacore.gluu.info\n with the hostname of your\nIDP.\n\n\n<SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"squid.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://squid.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/squid.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>\n\n\n\n\nCopy this file into \n/etc/shibboleth/attribute-map.xml\n:\n\n\n\n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>\n\n\n\n\nNow you need to create a Trust Relationship in your Gluu Server. Login,\ngo to SAML / Trust Relationships, and \"Add Relationship\":\n\n\n\n\nThen, configure for SAML2SSO profile. Click on the checkbox to\n\"Configure specific RelyingParty\":\n\n\n\n\nThen, click to add the SAML2SSO profile:\n\n\n\n\nThen \"Save\" and \"Update.\" Wait 5 minutes for the Shibboleth IDP to detect reload the metadata or\nstop and start tomcat.\n\n\nTest\n\n\nTest the CGI script at \nhttps://minnow.gluu.info/protected/printHeaders.py\n.\nEnter both the valid username and password (like \nadmin\n and your\ninitial admin password). The output will contain something like this:\n\n\n**Environment Variables**\n\nAUTH_TYPE: shibboleth\nCONTEXT_DOCUMENT_ROOT: /var/www/protected/\nCONTEXT_PREFIX: /protected/\nDOCUMENT_ROOT: /var/www/html\nGATEWAY_INTERFACE: CGI/1.1\nHTTPS: on\nHTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nHTTP_ACCEPT_ENCODING: gzip, deflate, sdch\nHTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8\nHTTP_CONNECTION: keep-alive\nHTTP_COOKIE: _shibsession_64656661756c7468747470733a2f2f6d696e6e6f772e676c75752e696e666f2f73686962626f6c657468=_6aab7e287072bcc123989d8bf5f0ed5e\nHTTP_DNT: 1\nHTTP_HOST: minnow.gluu.info\nHTTP_UPGRADE_INSECURE_REQUESTS: 1\nHTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nQUERY_STRING:\nREMOTE_ADDR: 192.168.88.1\nREMOTE_PORT: 52140\nREMOTE_USER: mike\nREQUEST_METHOD: GET\nREQUEST_SCHEME: https\nREQUEST_URI: /protected/printHeaders.py\nSCRIPT_FILENAME: /var/www/protected/printHeaders.py\nSCRIPT_NAME: /protected/printHeaders.py\nSERVER_ADDR: 192.168.88.133\nSERVER_ADMIN: webmaster@localhost\nSERVER_NAME: minnow.gluu.info\nSERVER_PORT: 443\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SIGNATURE:\nApache/2.4.7 (Ubuntu) Server at minnow.gluu.info Port 443\nSERVER_SOFTWARE: Apache/2.4.7 (Ubuntu)\nSHIB_Shib_Application_ID: default\nSHIB_Shib_Authentication_Instant: 2015-09-17T01:13:23.278Z\nSHIB_Shib_Authentication_Method: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_AuthnContext_Class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_Identity_Provider: https://brookie.gluu.info/idp/shibboleth\nSHIB_Shib_Session_ID: _6aab7e287072bcc123989d8bf5f0ed5e\nSHIB_Shib_Session_Index: _40e4b17668a13e0d406e41cc9f6bf116\nSHIB_displayName: Mike Schwartz\nSHIB_givenName: Michael\nSHIB_mail: mike@gmail.com\nSHIB_sn: Schwartz\nSHIB_uid: mike\nSSL_CIPHER: ECDHE-RSA-AES128-GCM-SHA256\nSSL_CIPHER_ALGKEYSIZE: 128\nSSL_CIPHER_EXPORT: false\nSSL_CIPHER_USEKEYSIZE: 128\nSSL_CLIENT_VERIFY: NONE\nSSL_COMPRESS_METHOD: NULL\nSSL_PROTOCOL: TLSv1.2\nSSL_SECURE_RENEG: true\nSSL_SERVER_A_KEY: rsaEncryption\nSSL_SERVER_A_SIG: sha256WithRSAEncryption\nSSL_SERVER_I_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_I_DN_C: US\nSSL_SERVER_I_DN_CN: minnow.gluu.info\nSSL_SERVER_I_DN_Email: mike@gmail.com\nSSL_SERVER_I_DN_L: Austin\nSSL_SERVER_I_DN_O: Gluu\nSSL_SERVER_I_DN_ST: TX\nSSL_SERVER_M_SERIAL: 9F5E4F891590BB53\nSSL_SERVER_M_VERSION: 1\nSSL_SERVER_S_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_S_DN_C: US\nSSL_SERVER_S_DN_CN: minnow.gluu.info\nSSL_SERVER_S_DN_Email: mike@gmail.com\nSSL_SERVER_S_DN_L: Austin\nSSL_SERVER_S_DN_O: Gluu\nSSL_SERVER_S_DN_ST: TX\nSSL_SERVER_V_END: Sep 10 18:46:32 2016 GMT\nSSL_SERVER_V_START: Sep 11 18:46:32 2015 GMT\nSSL_SESSION_RESUMED: Initial\nSSL_TLS_SNI: minnow.gluu.info\nSSL_VERSION_INTERFACE: mod_ssl/2.4.7\nSSL_VERSION_LIBRARY: OpenSSL/1.0.1f\n\n\n\nTroubleshooting\n\n\n\n\n\n\nMake sure you update your hosts file on the Gluu Server, Apache\n   server, and your workstation--this won't work with IP addresses,\n   only.\n\n\n\n\n\n\nCheck the Shibboleth log file \n/opt/idp/logs/idp-process.log\n if you\n   don't see the headers or REMOTE_USER environment variables. Also,\n   restart the Apache Tomcat service by \nservice tomcat restart\n to \n   make sure the new Shibboleth IDP xml files were loaded.\n\n\n\n\n\n\nClear the cookies in your web browser for both the Apache site, and \n   the Gluu Server if you are logging in and logging out a lot with \n   lots of server restarts.",
            "title": "SAML SP in Ubuntu"
        },
        {
            "location": "/integrate/ubuntu-shib-apache/#super-quick-ubuntu-shib-apache-install",
            "text": "Need to protect a test Apache folder using SAML on an Ubuntu server?\nHate to read? This article is for you. Replace both  minnow  and minnow.gluu.info  with your desired website hostname.",
            "title": "Super Quick Ubuntu Shib Apache Install"
        },
        {
            "location": "/integrate/ubuntu-shib-apache/#configure-apache",
            "text": "These are the steps to configure your Apache webserver properly:  # apt-get install apache2 libshibsp6 libapache2-mod-shib2\n# a2enmod cgi\n# a2enmod ssl\n# a2enmod shib2\n# a2ensite default-ssl\n# mkdir /etc/certs\n# cd /etc/certs\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt\n# shib-metagen -c /etc/certs/minnow.crt -h minnow.gluu.info > /etc/shibboleth/minnow-metadata.xml\n# service apache2 start\n# service shibd start  Download  minnow-metadata.xml  to your machine. You will need this file\nlater when you create the Trust Relationship in the Gluu Server.  # mkdir protected\n# touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py  Edit the default site at  /etc/apache2/sites-available/default-ssl.conf , \nand add this part:  ScriptAlias /protected/ /var/www/protected/\n<Directory /var/www/protected>\n    AddHandler cgi-script .py\n    Options +ExecCGI\n    SSLOptions +StdEnvVars\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    Require valid-user\n</Directory>  Edit  printHeaders.py , and add this simple script. It will show you the\nHTTP headers:  #!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"",
            "title": "Configure Apache"
        },
        {
            "location": "/integrate/ubuntu-shib-apache/#configure-the-shibboleth-sp",
            "text": "Use this for  shibboleth2.xml  and replace  squid.gluu.info  with the\nhostname of your SP, and  albacore.gluu.info  with the hostname of your\nIDP.  <SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"squid.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://squid.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/squid.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>  Copy this file into  /etc/shibboleth/attribute-map.xml :  \n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>  Now you need to create a Trust Relationship in your Gluu Server. Login,\ngo to SAML / Trust Relationships, and \"Add Relationship\":   Then, configure for SAML2SSO profile. Click on the checkbox to\n\"Configure specific RelyingParty\":   Then, click to add the SAML2SSO profile:   Then \"Save\" and \"Update.\" Wait 5 minutes for the Shibboleth IDP to detect reload the metadata or\nstop and start tomcat.",
            "title": "Configure the Shibboleth SP"
        },
        {
            "location": "/integrate/ubuntu-shib-apache/#test",
            "text": "Test the CGI script at  https://minnow.gluu.info/protected/printHeaders.py .\nEnter both the valid username and password (like  admin  and your\ninitial admin password). The output will contain something like this:  **Environment Variables**\n\nAUTH_TYPE: shibboleth\nCONTEXT_DOCUMENT_ROOT: /var/www/protected/\nCONTEXT_PREFIX: /protected/\nDOCUMENT_ROOT: /var/www/html\nGATEWAY_INTERFACE: CGI/1.1\nHTTPS: on\nHTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nHTTP_ACCEPT_ENCODING: gzip, deflate, sdch\nHTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8\nHTTP_CONNECTION: keep-alive\nHTTP_COOKIE: _shibsession_64656661756c7468747470733a2f2f6d696e6e6f772e676c75752e696e666f2f73686962626f6c657468=_6aab7e287072bcc123989d8bf5f0ed5e\nHTTP_DNT: 1\nHTTP_HOST: minnow.gluu.info\nHTTP_UPGRADE_INSECURE_REQUESTS: 1\nHTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nQUERY_STRING:\nREMOTE_ADDR: 192.168.88.1\nREMOTE_PORT: 52140\nREMOTE_USER: mike\nREQUEST_METHOD: GET\nREQUEST_SCHEME: https\nREQUEST_URI: /protected/printHeaders.py\nSCRIPT_FILENAME: /var/www/protected/printHeaders.py\nSCRIPT_NAME: /protected/printHeaders.py\nSERVER_ADDR: 192.168.88.133\nSERVER_ADMIN: webmaster@localhost\nSERVER_NAME: minnow.gluu.info\nSERVER_PORT: 443\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SIGNATURE:\nApache/2.4.7 (Ubuntu) Server at minnow.gluu.info Port 443\nSERVER_SOFTWARE: Apache/2.4.7 (Ubuntu)\nSHIB_Shib_Application_ID: default\nSHIB_Shib_Authentication_Instant: 2015-09-17T01:13:23.278Z\nSHIB_Shib_Authentication_Method: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_AuthnContext_Class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_Identity_Provider: https://brookie.gluu.info/idp/shibboleth\nSHIB_Shib_Session_ID: _6aab7e287072bcc123989d8bf5f0ed5e\nSHIB_Shib_Session_Index: _40e4b17668a13e0d406e41cc9f6bf116\nSHIB_displayName: Mike Schwartz\nSHIB_givenName: Michael\nSHIB_mail: mike@gmail.com\nSHIB_sn: Schwartz\nSHIB_uid: mike\nSSL_CIPHER: ECDHE-RSA-AES128-GCM-SHA256\nSSL_CIPHER_ALGKEYSIZE: 128\nSSL_CIPHER_EXPORT: false\nSSL_CIPHER_USEKEYSIZE: 128\nSSL_CLIENT_VERIFY: NONE\nSSL_COMPRESS_METHOD: NULL\nSSL_PROTOCOL: TLSv1.2\nSSL_SECURE_RENEG: true\nSSL_SERVER_A_KEY: rsaEncryption\nSSL_SERVER_A_SIG: sha256WithRSAEncryption\nSSL_SERVER_I_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_I_DN_C: US\nSSL_SERVER_I_DN_CN: minnow.gluu.info\nSSL_SERVER_I_DN_Email: mike@gmail.com\nSSL_SERVER_I_DN_L: Austin\nSSL_SERVER_I_DN_O: Gluu\nSSL_SERVER_I_DN_ST: TX\nSSL_SERVER_M_SERIAL: 9F5E4F891590BB53\nSSL_SERVER_M_VERSION: 1\nSSL_SERVER_S_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_S_DN_C: US\nSSL_SERVER_S_DN_CN: minnow.gluu.info\nSSL_SERVER_S_DN_Email: mike@gmail.com\nSSL_SERVER_S_DN_L: Austin\nSSL_SERVER_S_DN_O: Gluu\nSSL_SERVER_S_DN_ST: TX\nSSL_SERVER_V_END: Sep 10 18:46:32 2016 GMT\nSSL_SERVER_V_START: Sep 11 18:46:32 2015 GMT\nSSL_SESSION_RESUMED: Initial\nSSL_TLS_SNI: minnow.gluu.info\nSSL_VERSION_INTERFACE: mod_ssl/2.4.7\nSSL_VERSION_LIBRARY: OpenSSL/1.0.1f",
            "title": "Test"
        },
        {
            "location": "/integrate/ubuntu-shib-apache/#troubleshooting",
            "text": "Make sure you update your hosts file on the Gluu Server, Apache\n   server, and your workstation--this won't work with IP addresses,\n   only.    Check the Shibboleth log file  /opt/idp/logs/idp-process.log  if you\n   don't see the headers or REMOTE_USER environment variables. Also,\n   restart the Apache Tomcat service by  service tomcat restart  to \n   make sure the new Shibboleth IDP xml files were loaded.    Clear the cookies in your web browser for both the Apache site, and \n   the Gluu Server if you are logging in and logging out a lot with \n   lots of server restarts.",
            "title": "Troubleshooting"
        },
        {
            "location": "/integrate/iis-saml/",
            "text": "IIS SAML Configuration\n\n\nIIS Configuration in Windows 7\n\n\n\n\n\n\nStart --> Control Panel --> Programs --> \"Turn Windows features on or off\"\n\n\n\n\n\n\nSelect (i) IIS (ii) Web Management Tools (iii) II6 Management Compatibility (iv) IIS Management Console (v) IIS Management Scripts and Tools (vi) IIS Management Service\n\n\n\n\n\n\nSelect (i) World Wide Web Services (ii) CGI (iii) ISAPI Filters (iv) ISAPI Extensions --> Press OK.\n\n\n\n\n\n\n\nTest IIS to see if it is installed in your system with \"127.0.0.1\" in the web browser. For our test case, we used IIS7.\n\n\n\n\n\n\n\nISAPI Filter Configuration\n\n\n\n\n\n\nOpen IIS Manager (Start --> Administrative Tools --> Internet Information Service/IIS Manager)\n\n\n\n\n\n\nDouble click on \"ISAPI and CGI Restrictions\"\n\n\n\n\n\n\n\nAdd a new Filter\n\n\n\n\n\n\na. Click Actions --> Add (upper right corner)\n\n\nb. Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\nc. Description: \"Shibboleth\"\n\n\nd. Click \"Allow\" (from the right hand side)\n\n\n\n\ne. Back to IIS Manager --> ISAPI Filters\n\n\n\n\n    1. Click \"Add\" (upper right corner)\n\n    2. Filter Name: Shibboleth\n\n    3. Executable: \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\n\n\n\nf. SSO file extension mapping\n\n\n    1. Click on \"Handler Mapping\" from main page\n\n\n\n\n\n    2. Click \"Add Script Map\" from Action\n\n\n\n\n\n    3. Request Path :\".sso\"\n\n    4. Executable should be pointed to \"isapi_shib.dll\"\n\n\n\n\n\ng. Restart IIS\n\n\nh. Check Status\n\n\nCheck Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.\n\n\n\nShibboleth SP Setup in Windows 2008 R2 with IIS7\n\n\n\n\nOpen up \"Server Manager\", scroll down and click on \"Add Roles\".\n\n\n\n\n\n\n\n\nHit \"Next\"\n\n\n\n\n\n\n\n\nSelect \"Web Server (IIS)\", hit \"Next\"\n\n\n\n\n\n\n\n\nSelect (i) CGI\n\n\n\n\n(ii) ISAPI Extensions\n\n\n(iii) ISAPI Filters\n\n\n(iv) Management Tools\n\n\n(a) IIS Management Console\n\n\n(b) IIS Management Scripts and Tools\n\n\n(c) Management Service\n\n\n(v) All IIS6 Management Compatibility\n\n\n\n\n\n\n\n\nHit \"Next\", for the confirmation, check the list of plugins.\n\n\n\n\n\n\n\n\n\n\nHit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.\n\n\n\n\n\n\n7.Test IIS7 setup from the Internet.\n\n\n\n\nShibboleth SP 2.5.x Setup\n\n\n\n\n\n\nDown the \nShibboleth SP 2.5.x\n\n\n\n\n\n\nStart the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\".\n\n\n\n\n\n\n\n\n\n\nAfter the completion of the installation, the system will ask to reboot the system; hit \"Yes\".\n\n\n\n\n\n\n\n\nTest the Shibboleth SP installation from the SP VM using the URL \"localhost/Shibboleth.sso/Status\" in the address bar of the Web Browser.\n\n\n\n\n\n\nTrust Relationship in IdP\n\n\n\n\nCreate a Trust Relationship for the new SP in the IdP. It is necessary to upload the Public Certificate of the new SP in the IdP. Please note that the CN of the public certificate MUST BE the same as \nHostname\n of the SP. Hit \"Add\".\n\n\n\n\n\n\n\n\nDownload the IdP generated configuration files for Shib SP modification.\n\n\n\n\n\n\nSP Configuration\n\n\n\n\n\n\nThe files from the IdP must be placed in the SP Configuration.\n\n\n\n\n\n\nBefore placing them inside the SP Configuration please check\n\n\n\n\n\n\n(a) The \"spcert.crt\" file has the CN same as the SP hostname.\n\n\n(b) The \"spcert.crt\" and \"spkey.key\" has the same \nmd5sum\n value.\n\n\n(c) The IdP-metadata is perfectly placed inside the SP Configuration.\n\n\n(d) The downloaded \"shibboleth2.xml\" file has values resembling the file content below.\n\n\n\n\nFor testing purpose, we are going to protect a directory named \"secure\" with the IdP.  Create a folder/directory in the IIS Root Directory and restart Shibd and IIS.\n\n\n\n\n\n\nSSO Testing\n\n\n\n\n\n\nPlace the following URL in the web browser: \"https://SP_Name/secure\"\n\n\n\n\n\n\nIt will redirect the user to the IdP for authentication.\n\n\n\n\n\n\nAfter the authentication is complete, the user will be shown the protected page. For this case, the page is the IIS7 index page.\n\n\n      xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n      logger=\"syslog.logger\" clockSkew=\"180\">\n\n\n\n      \n\n      \n\n\n\n      \n\n        \n\n              \n\n        \n\n      \n\n\n\n      \n\n      \n\n\n\n      \n\n      \n\n      \n\n      \n\n\n\n      \n\n        \n\n                \n\n                \n\n                \n\n        \n\n      \n\n\n\n  \n\n\n<!--\n    Controls session lifetimes, address checks, cookie handling, and the protocol handlers.\n    You MUST supply an effectively unique handlerURL value for each of your applications.\n    The value can be a relative path, a URL with no hostname (https:///path) or a full URL.\n    The system can compute a relative value based on the virtual host. Using handlerSSL=\"true\"\n    will force the protocol to be https. You should also add a cookieProps setting of \"; path=/; secure\"\n    in that case. Note that while we default checkAddress to \"false\", this has a negative\n    impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.\n    -->\n<Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"false\"\n            handlerURL=\"https://SP_HOSTNAME/Shibboleth.sso\" handlerSSL=\"false\"\n            exportLocation=\"http://localhost/Shibboleth.sso/GetAssertion\" exportACL=\"127.0.0.1\"\n            idpHistory=\"false\" idpHistoryDays=\"7\" cookieProps=\"; path=/; secure; httpOnly\">\n\n    <!--\n            SessionInitiators handle session requests and relay them to a Discovery page,\n            or to an IdP if possible. Automatic session setup will use the default or first\n            element (or requireSessionWith can specify a specific id to use).\n            -->\n\n    <!-- Default example directs to a specific IdPs SSO service (favoring SAML 2 over Shib 1). -->\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"gluu\"\n                    relayState=\"cookie\" entityID=\"https://IDP_HOSTNAME/idp/shibboleth\">\n               <SessionInitiator type=\"SAML2\" acsIndex=\"1\" template=\"bindingTemplate.html\"/>\n               <SessionInitiator type=\"Shib1\" acsIndex=\"5\"/>\n            </SessionInitiator>\n\n    <!--\n            md:AssertionConsumerService locations handle specific SSO protocol bindings,\n            such as SAML 2.0 POST or SAML 1.1 Artifact. The isDefault and index attributes\n            are used when sessions are initiated to determine how to tell the IdP where and\n            how to return the response.\n            -->\n    <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/Artifact\" index=\"3\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/ECP\" index=\"4\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\"/>\n            <md:AssertionConsumerService Location=\"/SAML/POST\" index=\"5\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:browser-post\"/>\n            <md:AssertionConsumerService Location=\"/SAML/Artifact\" index=\"6\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:artifact-01\"/>\n\n    <!-- LogoutInitiators enable SP-initiated local or global/single logout of sessions. -->\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\" relayState=\"cookie\">\n            <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n    <!-- md:SingleLogoutService locations handle single logout (SLO) protocol messages. -->\n            <md:SingleLogoutService Location=\"/SLO/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:SingleLogoutService Location=\"/SLO/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!-- md:ManageNameIDService locations handle NameID management (NIM) protocol messages. -->\n            <md:ManageNameIDService Location=\"/NIM/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:ManageNameIDService Location=\"/NIM/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:ManageNameIDService Location=\"/NIM/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:ManageNameIDService Location=\"/NIM/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!--\n            md:ArtifactResolutionService locations resolve artifacts issued when using the\n            SAML 2.0 HTTP-Artifact binding on outgoing messages, generally uses SOAP.\n            -->\n            <md:ArtifactResolutionService Location=\"/Artifact/SOAP\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n\n    <!-- Extension service that generates \"approximate\" metadata based on SP configuration. -->\n            <Handler type=\"MetadataGenerator\" Location=\"/Metadata\" signing=\"false\"/>\n\n            <!-- Status reporting service. -->\n            <Handler type=\"Status\" Location=\"/Status\" acl=\"127.0.0.1\"/>\n\n            <!-- Session diagnostic service. -->\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n\n</Sessions>\n\n<!--\n    Allows overriding of error template filenames. You can also add attributes with values\n    that can be plugged into the templates.\n    -->\n    <Errors supportContact=\"support@gluu.org\"\n            logoLocation=\"/shibboleth-sp/logo.jpg\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n<!-- Uncomment and modify to tweak settings for specific IdPs or groups. -->\n    <RelyingParty Name=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\" keyName=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\"/>\n\n<!-- Chains together all your metadata sources. -->\n    <MetadataProvider type=\"Chaining\">\n    <MetadataProvider type=\"XML\" file=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\idp-metadata.xml\"/>\n    </MetadataProvider>\n\n<!-- Chain the two built-in trust engines together. -->\n    <TrustEngine type=\"Chaining\">\n            <TrustEngine type=\"ExplicitKey\"/>\n            <TrustEngine type=\"PKIX\"/>\n    </TrustEngine>\n\n<!-- Map to extract attributes from SAML assertions. -->\n    <AttributeExtractor type=\"XML\" validate=\"true\" path=\"attribute-map.xml\"/>\n\n    <!-- Use a SAML query if no attributes are supplied during SSO. -->\n    <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n\n    <!-- Default filtering policy for recognized attributes, lets other data pass. -->\n    <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n\n<!-- Simple file-based resolver for using a single keypair. -->\n    <!-- <CredentialResolver type=\"File\" key=\"sp-key.pem\" certificate=\"sp-cert.pem\"/> -->\n\n    <!-- TODO is password needed? -->\n    <CredentialResolver type=\"File\" key=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spkey.key\"\n                    certificate=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spcert.crt\" />\n\n</ApplicationDefaults>\n\n<!-- Each policy defines a set of rules to use to secure messages. -->\n    <SecurityPolicies>\n    <!--\n    The predefined policy enforces replay/freshness, standard\n    condition processing, and permits signing and client TLS.\n    -->\n<Policy id=\"default\" validate=\"false\">\n            <PolicyRule type=\"MessageFlow\" checkReplay=\"true\" expires=\"60\"/>\n            <PolicyRule type=\"Conditions\">\n                <PolicyRule type=\"Audience\"/>\n                <!-- Enable Delegation rule to permit delegated access. -->\n                <!-- <PolicyRule type=\"Delegation\"/> -->\n            </PolicyRule>\n            <PolicyRule type=\"ClientCertAuth\" errorFatal=\"true\"/>\n            <PolicyRule type=\"XMLSigning\" errorFatal=\"true\"/>\n            <PolicyRule type=\"SimpleSigning\" errorFatal=\"true\"/>\n    </Policy>\n    </SecurityPolicies>",
            "title": "SAML SP in IIS7"
        },
        {
            "location": "/integrate/iis-saml/#iis-saml-configuration",
            "text": "",
            "title": "IIS SAML Configuration"
        },
        {
            "location": "/integrate/iis-saml/#iis-configuration-in-windows-7",
            "text": "Start --> Control Panel --> Programs --> \"Turn Windows features on or off\"    Select (i) IIS (ii) Web Management Tools (iii) II6 Management Compatibility (iv) IIS Management Console (v) IIS Management Scripts and Tools (vi) IIS Management Service    Select (i) World Wide Web Services (ii) CGI (iii) ISAPI Filters (iv) ISAPI Extensions --> Press OK.    Test IIS to see if it is installed in your system with \"127.0.0.1\" in the web browser. For our test case, we used IIS7.",
            "title": "IIS Configuration in Windows 7"
        },
        {
            "location": "/integrate/iis-saml/#isapi-filter-configuration",
            "text": "Open IIS Manager (Start --> Administrative Tools --> Internet Information Service/IIS Manager)    Double click on \"ISAPI and CGI Restrictions\"    Add a new Filter    a. Click Actions --> Add (upper right corner)  b. Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"  c. Description: \"Shibboleth\"  d. Click \"Allow\" (from the right hand side)   e. Back to IIS Manager --> ISAPI Filters       1. Click \"Add\" (upper right corner)\n\n    2. Filter Name: Shibboleth\n\n    3. Executable: \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"   f. SSO file extension mapping      1. Click on \"Handler Mapping\" from main page       2. Click \"Add Script Map\" from Action       3. Request Path :\".sso\"\n\n    4. Executable should be pointed to \"isapi_shib.dll\"   g. Restart IIS  h. Check Status  Check Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.",
            "title": "ISAPI Filter Configuration"
        },
        {
            "location": "/integrate/iis-saml/#shibboleth-sp-setup-in-windows-2008-r2-with-iis7",
            "text": "Open up \"Server Manager\", scroll down and click on \"Add Roles\".     Hit \"Next\"     Select \"Web Server (IIS)\", hit \"Next\"     Select (i) CGI   (ii) ISAPI Extensions  (iii) ISAPI Filters  (iv) Management Tools  (a) IIS Management Console  (b) IIS Management Scripts and Tools  (c) Management Service  (v) All IIS6 Management Compatibility     Hit \"Next\", for the confirmation, check the list of plugins.      Hit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.    7.Test IIS7 setup from the Internet.   Shibboleth SP 2.5.x Setup    Down the  Shibboleth SP 2.5.x    Start the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\".      After the completion of the installation, the system will ask to reboot the system; hit \"Yes\".     Test the Shibboleth SP installation from the SP VM using the URL \"localhost/Shibboleth.sso/Status\" in the address bar of the Web Browser.    Trust Relationship in IdP   Create a Trust Relationship for the new SP in the IdP. It is necessary to upload the Public Certificate of the new SP in the IdP. Please note that the CN of the public certificate MUST BE the same as  Hostname  of the SP. Hit \"Add\".     Download the IdP generated configuration files for Shib SP modification.    SP Configuration    The files from the IdP must be placed in the SP Configuration.    Before placing them inside the SP Configuration please check    (a) The \"spcert.crt\" file has the CN same as the SP hostname.  (b) The \"spcert.crt\" and \"spkey.key\" has the same  md5sum  value.  (c) The IdP-metadata is perfectly placed inside the SP Configuration.  (d) The downloaded \"shibboleth2.xml\" file has values resembling the file content below.   For testing purpose, we are going to protect a directory named \"secure\" with the IdP.  Create a folder/directory in the IIS Root Directory and restart Shibd and IIS.    SSO Testing    Place the following URL in the web browser: \"https://SP_Name/secure\"    It will redirect the user to the IdP for authentication.    After the authentication is complete, the user will be shown the protected page. For this case, the page is the IIS7 index page.        xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n      logger=\"syslog.logger\" clockSkew=\"180\">  \n       \n        \n       \n         \n               \n         \n        \n       \n        \n       \n       \n       \n        \n       \n         \n                 \n                 \n                 \n         \n        \n    <!--\n    Controls session lifetimes, address checks, cookie handling, and the protocol handlers.\n    You MUST supply an effectively unique handlerURL value for each of your applications.\n    The value can be a relative path, a URL with no hostname (https:///path) or a full URL.\n    The system can compute a relative value based on the virtual host. Using handlerSSL=\"true\"\n    will force the protocol to be https. You should also add a cookieProps setting of \"; path=/; secure\"\n    in that case. Note that while we default checkAddress to \"false\", this has a negative\n    impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.\n    -->\n<Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"false\"\n            handlerURL=\"https://SP_HOSTNAME/Shibboleth.sso\" handlerSSL=\"false\"\n            exportLocation=\"http://localhost/Shibboleth.sso/GetAssertion\" exportACL=\"127.0.0.1\"\n            idpHistory=\"false\" idpHistoryDays=\"7\" cookieProps=\"; path=/; secure; httpOnly\">\n\n    <!--\n            SessionInitiators handle session requests and relay them to a Discovery page,\n            or to an IdP if possible. Automatic session setup will use the default or first\n            element (or requireSessionWith can specify a specific id to use).\n            -->\n\n    <!-- Default example directs to a specific IdPs SSO service (favoring SAML 2 over Shib 1). -->\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"gluu\"\n                    relayState=\"cookie\" entityID=\"https://IDP_HOSTNAME/idp/shibboleth\">\n               <SessionInitiator type=\"SAML2\" acsIndex=\"1\" template=\"bindingTemplate.html\"/>\n               <SessionInitiator type=\"Shib1\" acsIndex=\"5\"/>\n            </SessionInitiator>\n\n    <!--\n            md:AssertionConsumerService locations handle specific SSO protocol bindings,\n            such as SAML 2.0 POST or SAML 1.1 Artifact. The isDefault and index attributes\n            are used when sessions are initiated to determine how to tell the IdP where and\n            how to return the response.\n            -->\n    <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/Artifact\" index=\"3\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/ECP\" index=\"4\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\"/>\n            <md:AssertionConsumerService Location=\"/SAML/POST\" index=\"5\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:browser-post\"/>\n            <md:AssertionConsumerService Location=\"/SAML/Artifact\" index=\"6\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:artifact-01\"/>\n\n    <!-- LogoutInitiators enable SP-initiated local or global/single logout of sessions. -->\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\" relayState=\"cookie\">\n            <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n    <!-- md:SingleLogoutService locations handle single logout (SLO) protocol messages. -->\n            <md:SingleLogoutService Location=\"/SLO/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:SingleLogoutService Location=\"/SLO/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!-- md:ManageNameIDService locations handle NameID management (NIM) protocol messages. -->\n            <md:ManageNameIDService Location=\"/NIM/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:ManageNameIDService Location=\"/NIM/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:ManageNameIDService Location=\"/NIM/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:ManageNameIDService Location=\"/NIM/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!--\n            md:ArtifactResolutionService locations resolve artifacts issued when using the\n            SAML 2.0 HTTP-Artifact binding on outgoing messages, generally uses SOAP.\n            -->\n            <md:ArtifactResolutionService Location=\"/Artifact/SOAP\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n\n    <!-- Extension service that generates \"approximate\" metadata based on SP configuration. -->\n            <Handler type=\"MetadataGenerator\" Location=\"/Metadata\" signing=\"false\"/>\n\n            <!-- Status reporting service. -->\n            <Handler type=\"Status\" Location=\"/Status\" acl=\"127.0.0.1\"/>\n\n            <!-- Session diagnostic service. -->\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n\n</Sessions>\n\n<!--\n    Allows overriding of error template filenames. You can also add attributes with values\n    that can be plugged into the templates.\n    -->\n    <Errors supportContact=\"support@gluu.org\"\n            logoLocation=\"/shibboleth-sp/logo.jpg\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n<!-- Uncomment and modify to tweak settings for specific IdPs or groups. -->\n    <RelyingParty Name=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\" keyName=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\"/>\n\n<!-- Chains together all your metadata sources. -->\n    <MetadataProvider type=\"Chaining\">\n    <MetadataProvider type=\"XML\" file=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\idp-metadata.xml\"/>\n    </MetadataProvider>\n\n<!-- Chain the two built-in trust engines together. -->\n    <TrustEngine type=\"Chaining\">\n            <TrustEngine type=\"ExplicitKey\"/>\n            <TrustEngine type=\"PKIX\"/>\n    </TrustEngine>\n\n<!-- Map to extract attributes from SAML assertions. -->\n    <AttributeExtractor type=\"XML\" validate=\"true\" path=\"attribute-map.xml\"/>\n\n    <!-- Use a SAML query if no attributes are supplied during SSO. -->\n    <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n\n    <!-- Default filtering policy for recognized attributes, lets other data pass. -->\n    <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n\n<!-- Simple file-based resolver for using a single keypair. -->\n    <!-- <CredentialResolver type=\"File\" key=\"sp-key.pem\" certificate=\"sp-cert.pem\"/> -->\n\n    <!-- TODO is password needed? -->\n    <CredentialResolver type=\"File\" key=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spkey.key\"\n                    certificate=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spcert.crt\" />\n\n</ApplicationDefaults>\n\n<!-- Each policy defines a set of rules to use to secure messages. -->\n    <SecurityPolicies>\n    <!--\n    The predefined policy enforces replay/freshness, standard\n    condition processing, and permits signing and client TLS.\n    -->\n<Policy id=\"default\" validate=\"false\">\n            <PolicyRule type=\"MessageFlow\" checkReplay=\"true\" expires=\"60\"/>\n            <PolicyRule type=\"Conditions\">\n                <PolicyRule type=\"Audience\"/>\n                <!-- Enable Delegation rule to permit delegated access. -->\n                <!-- <PolicyRule type=\"Delegation\"/> -->\n            </PolicyRule>\n            <PolicyRule type=\"ClientCertAuth\" errorFatal=\"true\"/>\n            <PolicyRule type=\"XMLSigning\" errorFatal=\"true\"/>\n            <PolicyRule type=\"SimpleSigning\" errorFatal=\"true\"/>\n    </Policy>\n    </SecurityPolicies>",
            "title": "Shibboleth SP Setup in Windows 2008 R2 with IIS7"
        },
        {
            "location": "/integrate/saml-windows/",
            "text": "Configuring Apache Shibboleth SP in Windows\n\n\nShibboleth SP Installation\n\n\n\n\n\n\nDownload the MSI of Shibboleth-SP from:\n   http://www.shibboleth.net/downloads/service-provider/latest/ .\n\n\n\n\n\n\nStart the installation\n\n\n\n\n\n\n\n\n\n\nDefine the destination folder (by default it is: C:\\opt\\shibboleth-sp).\n\n\n\n\n\n\n\n\nSelect the Shibboleth Daemon port. By default it is 1600, and you may\n   keep it for testing it, locally.\n\n\n\n\n\n\n\n\n\n\nNow, there are two options. According to your target you will have to\nchoose one.\n\n\n\n\n\n\nOption 1: If you install Shibboleth for the Apache Web Server\n\n\n\n\n\n\nOption 2: If you install Shibboleth for Microsoft IIS Web Server\n\n\na. For the Microsoft IIS Web Server, CHECK \u201cInstall ISAPI filter\nand configure IIS\u201d. Remember to put the file Extension \u201d.sso\u201d --\nthis is necessary.\n\n\n\n\n\n\n\n\n\n\n\n\n    b. For the Apache Web Server, UNCHECK \"Install ISAPI filter and\n    configure IIS\".\n\n\n\n\n\n3. UAC of Windows 7 may block this program, so allow it.\n\n\n\n\n\nApache Configuration\n\n\n\n\nDownload the Apache HTTP server MSI Installer with OpenSSL:\n   http://httpd.apache.org/download.cgi#apache22 .\n\n\n\n\n\n\n\n\nSelect the destination. You can keep the default destination for your\nlocal testing. But, make sure that there is no other \u201cApache Software\nFoundation\u201d directory in your current \u201cC:\\Program Files\\\u201d location.\n\n\n\n\n\n\n\n\nProvide the Server Information. For local testing you can use\n   \nlocaldomain/localhost\n.\n\n\n\n\n\n\n\n\nTest whether the Apache web server is installed or not. Open your web\nbrowser and use \nlocalhost\n. If you see something like the image shown\nbelow--you are done!\n\n\n\n\na\n\n\nShibboleth and Apache Configuration\n\n\n\n\n\n\nChange the permission of the Apache installation directory, and\n   provide \u201cwrite\u201d access.\n\n\n\n\n\n\nhttpd.conf\n configuration\n\n\n\n\n\n\nChange \u201cServerName localhost:80\u201d (for your local testing)\n\n\n\n\n\n\nCopy \napache22.conf\n from the Shibboleth directory to \n~/apache/conf/extra/\n\n\n\n\n\n\n\n\n\n\nShibboleth2.xml\n configuration\n\n\n\n\n\n\nChange: Host name=\u201clocalhost\u201d (for local testing)\n\n\n\n\n\n\nChange: entityID=\u201chttps://localhost/shibboleth\u201d (for local testing)\n\n\n\n\n\n\nChange: ApplicationOverride id=\u201cadmin\u201d entityID=\u201chttps://localhost/shibboleth/\u201d\n\n\n\n\n\n\n\n\n\n\nReboot your windows machine.\n\n\n\n\n\n\nTest SP Installation with Windows and Apache\n\n\n\n\nOpen the web browser, and provide the address:\n   \nlocalhost/Shibboleth.sso/Status\n\n\nIf you can see some XML page like the one shown below--you are done\n   with your SP installation in Windows through Apache2.\n\n\n\n\na",
            "title": "SAML SP in Windows"
        },
        {
            "location": "/integrate/saml-windows/#configuring-apache-shibboleth-sp-in-windows",
            "text": "",
            "title": "Configuring Apache Shibboleth SP in Windows"
        },
        {
            "location": "/integrate/saml-windows/#shibboleth-sp-installation",
            "text": "Download the MSI of Shibboleth-SP from:\n   http://www.shibboleth.net/downloads/service-provider/latest/ .    Start the installation      Define the destination folder (by default it is: C:\\opt\\shibboleth-sp).     Select the Shibboleth Daemon port. By default it is 1600, and you may\n   keep it for testing it, locally.      Now, there are two options. According to your target you will have to\nchoose one.    Option 1: If you install Shibboleth for the Apache Web Server    Option 2: If you install Shibboleth for Microsoft IIS Web Server  a. For the Microsoft IIS Web Server, CHECK \u201cInstall ISAPI filter\nand configure IIS\u201d. Remember to put the file Extension \u201d.sso\u201d --\nthis is necessary.           b. For the Apache Web Server, UNCHECK \"Install ISAPI filter and\n    configure IIS\".   3. UAC of Windows 7 may block this program, so allow it.",
            "title": "Shibboleth SP Installation"
        },
        {
            "location": "/integrate/saml-windows/#apache-configuration",
            "text": "Download the Apache HTTP server MSI Installer with OpenSSL:\n   http://httpd.apache.org/download.cgi#apache22 .     Select the destination. You can keep the default destination for your\nlocal testing. But, make sure that there is no other \u201cApache Software\nFoundation\u201d directory in your current \u201cC:\\Program Files\\\u201d location.     Provide the Server Information. For local testing you can use\n    localdomain/localhost .     Test whether the Apache web server is installed or not. Open your web\nbrowser and use  localhost . If you see something like the image shown\nbelow--you are done!   a  Shibboleth and Apache Configuration    Change the permission of the Apache installation directory, and\n   provide \u201cwrite\u201d access.    httpd.conf  configuration    Change \u201cServerName localhost:80\u201d (for your local testing)    Copy  apache22.conf  from the Shibboleth directory to  ~/apache/conf/extra/      Shibboleth2.xml  configuration    Change: Host name=\u201clocalhost\u201d (for local testing)    Change: entityID=\u201chttps://localhost/shibboleth\u201d (for local testing)    Change: ApplicationOverride id=\u201cadmin\u201d entityID=\u201chttps://localhost/shibboleth/\u201d      Reboot your windows machine.",
            "title": "Apache Configuration"
        },
        {
            "location": "/integrate/saml-windows/#test-sp-installation-with-windows-and-apache",
            "text": "Open the web browser, and provide the address:\n    localhost/Shibboleth.sso/Status  If you can see some XML page like the one shown below--you are done\n   with your SP installation in Windows through Apache2.   a",
            "title": "Test SP Installation with Windows and Apache"
        },
        {
            "location": "/integrate/google-saml/",
            "text": "Using SAML To Get SSO With Google Apps\n\n\nGoogle Apps will work as a Service Provider (SP) and we need to\n\"introduce\" Gluu Server with Google Apps as Gluu Server so that it can\nwork as an Identity Provider (IDP).\n\n\nNOTE: It is highly recommended to use Google staging apps setup before\nGoogle production migration. If you have any question or confusion,\nplease feel free to let us know.\n\n\nWe need to configure Google Apps and Gluu Server so that both parties\ncan talk to each other.\n\n\nConfiguring Google Apps With Google Dashboard:\n\n\n\n\nLogin to dashboard.\n\n\n\n\n\n\n\n\n\n\nFrom the list of options choose the \"Security\" tab.\n\n\n\n\n\n\nA new page will open. Select \nSet up single sign-on(SSO)\n from the\noptions.\n\n\n\n\n\n\n\n\n\n\nFinally, the Single Sign-On setting page will appear. \n\n\n\n\n\n\nThis page contains a number of selection, and entry fields.\n\n\n\n\n\n\nSetup SSO with third party Identity Provider\n: This\n     refers to your Gluu Server instance. Enable this box.\n\n\n\n\n\n\nSign-in Page URL\n: Enter the uri of the sign-in page, for\n     example \nhttps://idp_hostname/idp/profile/SAML2/Redirect/SSO\n.\n\n\n\n\n\n\nSign-out Page URL\n: Enter the uri of the logout page, for\n     example \nhttps://idp_hostname/idp/logout.jsp\n.\n\n\n\n\n\n\nChange Password URL\n: The uri an user is redirected if he wants\n     to change his password. It is recommended that an organization \n     provides such a link for its end users.\n\n\n\n\n\n\nVerification certificate\n: Upload the SAML certificate of your\n     Gluu Server. The SAML certificates are available in the \n/etc/certs\n folder inside the Gluu Server \nchroot\n environment.\n\n\n\n\n\n\nUse a domain specific issuer\n: Enable this box to use a\n     domain-specific issuer.\n\n\n\n\n\n\nSave your data using the \nSave changes\n button on the lower right\n     of the page.\n\n\n\n\n\n\nIf you want to know more about Google SSO,\n\nthis\n helps you.\n\n\nConfiguration In Gluu Server:\n\n\nNow we need to create a Trust Relationship in Gluu Server. Trust\nRelationships are created so that the IdP can authorize/authenticate the\nuser to the service provider (SP). In this specific case, the SP is\nGoogle Apps, and the protocol used is SAML.\n\n\nIn order to create a Trust Relationship, we need to grab the metadata of\nGoogle Apps. This metadata can be collected from Google. It's generally\nspecific to an organization account. The following is a template of the Google metadata.\n\n\n<EntityDescriptor entityID=\"google.com/a/domain.com\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n<SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n<NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\n<AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\nLocation=\"https://www.google.com/a/domain.com/acs\" ></AssertionConsumerService>\n</SPSSODescriptor>\n</EntityDescriptor>\n\n\n\n\nGot the metadata? Great, we are ready to move forward. \n\n\n\n\n\n\nCreate Trust Relationship for Google Apps: \n\n\n\n\n\n\nHow to create a trust relationship can be found \nhere\n. We need to follow the \"File\" method for Google Apps trust relationship.\n\n\n\n\nRequired attributes: Generally a nameID attributes is required. \nHere\n is how you can create custom nameID in Gluu Server. \n\n\nRelying Party Configuration: Yes, SAML2SSO should be configured. \n\n\nincludeAttributeStatement: check\n\n\nassertionLifetime: default \n\n\nassertionProxyCount: default\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never",
            "title": "Google SSO"
        },
        {
            "location": "/integrate/google-saml/#using-saml-to-get-sso-with-google-apps",
            "text": "Google Apps will work as a Service Provider (SP) and we need to\n\"introduce\" Gluu Server with Google Apps as Gluu Server so that it can\nwork as an Identity Provider (IDP).  NOTE: It is highly recommended to use Google staging apps setup before\nGoogle production migration. If you have any question or confusion,\nplease feel free to let us know.  We need to configure Google Apps and Gluu Server so that both parties\ncan talk to each other.",
            "title": "Using SAML To Get SSO With Google Apps"
        },
        {
            "location": "/integrate/google-saml/#configuring-google-apps-with-google-dashboard",
            "text": "Login to dashboard.      From the list of options choose the \"Security\" tab.    A new page will open. Select  Set up single sign-on(SSO)  from the\noptions.      Finally, the Single Sign-On setting page will appear.     This page contains a number of selection, and entry fields.    Setup SSO with third party Identity Provider : This\n     refers to your Gluu Server instance. Enable this box.    Sign-in Page URL : Enter the uri of the sign-in page, for\n     example  https://idp_hostname/idp/profile/SAML2/Redirect/SSO .    Sign-out Page URL : Enter the uri of the logout page, for\n     example  https://idp_hostname/idp/logout.jsp .    Change Password URL : The uri an user is redirected if he wants\n     to change his password. It is recommended that an organization \n     provides such a link for its end users.    Verification certificate : Upload the SAML certificate of your\n     Gluu Server. The SAML certificates are available in the  /etc/certs  folder inside the Gluu Server  chroot  environment.    Use a domain specific issuer : Enable this box to use a\n     domain-specific issuer.    Save your data using the  Save changes  button on the lower right\n     of the page.    If you want to know more about Google SSO, this  helps you.",
            "title": "Configuring Google Apps With Google Dashboard:"
        },
        {
            "location": "/integrate/google-saml/#configuration-in-gluu-server",
            "text": "Now we need to create a Trust Relationship in Gluu Server. Trust\nRelationships are created so that the IdP can authorize/authenticate the\nuser to the service provider (SP). In this specific case, the SP is\nGoogle Apps, and the protocol used is SAML.  In order to create a Trust Relationship, we need to grab the metadata of\nGoogle Apps. This metadata can be collected from Google. It's generally\nspecific to an organization account. The following is a template of the Google metadata.  <EntityDescriptor entityID=\"google.com/a/domain.com\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n<SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n<NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\n<AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\nLocation=\"https://www.google.com/a/domain.com/acs\" ></AssertionConsumerService>\n</SPSSODescriptor>\n</EntityDescriptor>  Got the metadata? Great, we are ready to move forward.     Create Trust Relationship for Google Apps:     How to create a trust relationship can be found  here . We need to follow the \"File\" method for Google Apps trust relationship.   Required attributes: Generally a nameID attributes is required.  Here  is how you can create custom nameID in Gluu Server.   Relying Party Configuration: Yes, SAML2SSO should be configured.   includeAttributeStatement: check  assertionLifetime: default   assertionProxyCount: default  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never",
            "title": "Configuration In Gluu Server:"
        },
        {
            "location": "/integrate/office365/",
            "text": "Office 365 Integration with Gluu Server\n\n\nThis guide is created to use Microsoft Office 365 Single-Sign-On with Gluu Server.\nIt is assumed that an Office 365 subscription is available/registered.\n\n\nNote:\n The attributes \nObjectGUID\n and \nIDPEmail\n are mandatory for O365 SSO. The domain of \nIDPEmail\n must match the registered domain as well.\n\n\nOffice 365 Configuration\n\n\n\n\n\n\nPlease create a test user from Office365 Admin Panel\n\n   Alternatively, use \nthis doc\n to connect backend Azure Active Directory (AD) \n\n\n\n\n\n\nRegister the domain from the Office365 (O365) Admin Panel from \nSettings --> Domains\n\n\n\n\nVerify\n the domain\n\n\n\n\n\n\n\n\nRegister Gluu Server in O365\n\n\n\n\n\n\nInstall/Use Windows Server 2012 R2\n\n\n\n\n\n\nInstall and Configure\n Windows Powershell \ncmdlets\n\n\n\n\n\n\nCreate a script named \ngluu1.ps1\n with the following template changing domain, hostname of Gluu Server and Certificate\n\n\n\n\n\n\n\n\n\n\n Connect-MsolService\n\n$dom = \"company.org\"\n$url = \"https://test.gluu.org/idp/profile/SAML2/POST/SSO\"\n$uri = \"https://test.gluu.org/idp/shibboleth\"\n$logouturl = \"https://test.gluu.org/idp/logout.jsp\"\n$cert = \"Mx....SAML_cert_of_your_Gluu_Server...Tdsg9R0XO3AnBeHRtGmAA=\"\n\nSet-MsolDomainAuthentication -DomainName $dom -FederationBrandName $dom -Authentication Federated  -PassiveLogOnUri $url -SigningCertificate $cert -IssuerUri $uri -LogOffUri $logouturl -PreferredAuthenticationProtocol SAMLP \n\n\n\n\n\n\nRun the \ngluu.ps1\n script from Windows Server 2012 R2\n\n\n\n\nGluu Server Configuration\n\n\nCustom Attributes\n\n\nThe configuration begins by creating a few custom attributes named \nIDPEmail\n, \nImmutableID\n and \nobjectguid\n.\nPlease see \nthis doc\n to create custom attributes.\n\n\n\n\n\n\nIDPEmail\n Custom Attribute\n\n\n\n\n\n\n\nImmutableID\n Custom Attribute\n\n\n\n\n\n\n\nobjectguid\n Custom Attribute\n\n\n\n\n\n\n\nOpenDJ Configuration\n\n\n\n\n\n\nEdit the \n100-user.ldif\n file under \n/opt/opendj/config/schema\n folder.\n\n\n\n\n\n\nRemove the \nobhectGUID\n entry from the file\n\n\n\n\n\n\nAdd the following new entry\n\n\n\n\n\n\n\n\n\n\nattributeTypes: ( 1454676848732 NAME 'objectGUID' SYNTAX 1.3.6.1.4.1.1466.115.121.1.5 USAGE userApplications X-ORIGIN 'gluu' ) \n\n\n\n\n* Restart OpenDJ\n\n\n\n\n\n\n\nEdit the \nattribute-resolver.xml.vm\n file under \n/opt/tomcat/conf/shibboleth2/idp\n folder\n\n\n\n\nAdd \n$attribute.name.equals('ImmutableID')\n with the existing \n($attribute.name.equals('transientId')\n to look like the snippet below\n\n\n\n\n\n\n\n\n#if(!($attribute.name.equals('transientId')or$attribute.name.equals('ImmutableID'))) \n\n\n\n\n* Add `IDPEmail` attribute definition\n\n\n\n <resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"UserId\" sourceAttributeID=\"IDPEmail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" name=\"IDPEmail\" friendlyName=\"UserId\" />\n        </resolver:AttributeDefinition> \n\n\n\n\n* Add `ImmutableID` attribute definition\n\n\n\n <resolver:AttributeDefinition id=\"ImmutableID\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"objectguid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition> \n\n\n\n\nIdentity Mapping\n\n\nThe cache refresh mechanism is used to populate the Gluu Server LDAP with data from a backend LDAP/AD. The \nobjectGUID\n attribute must be pulled from the backend data source to Gluu Server.\n\n\n\n\nEdit the \nox-ldap.properties\n, \noxauth-ldap.properties\n and \noxidp-ldap.properties\n files to add the following\n\n\n\n\nbinaryAttributes=objectGUID,objectguid \n\n\n\n\nNote:\n'objectGUID' (the first one) is the attribute which contains binary values in the backend AD and 'objectguid' (the second one) is the Gluu Server binary attribute name which will pull value from 'objectGUID' attribute\n\n\n\n\nRestart Tomcat\n\n\n\n\nCreate Trust Relationship\n\n\nPlease see \nthis doc\n to create trust relationships.\n\n\n\n\nConfigure Relaying Party like the following screenshot",
            "title": "Office 365 SSO"
        },
        {
            "location": "/integrate/office365/#office-365-integration-with-gluu-server",
            "text": "This guide is created to use Microsoft Office 365 Single-Sign-On with Gluu Server.\nIt is assumed that an Office 365 subscription is available/registered.  Note:  The attributes  ObjectGUID  and  IDPEmail  are mandatory for O365 SSO. The domain of  IDPEmail  must match the registered domain as well.",
            "title": "Office 365 Integration with Gluu Server"
        },
        {
            "location": "/integrate/office365/#office-365-configuration",
            "text": "Please create a test user from Office365 Admin Panel \n   Alternatively, use  this doc  to connect backend Azure Active Directory (AD)     Register the domain from the Office365 (O365) Admin Panel from  Settings --> Domains   Verify  the domain     Register Gluu Server in O365    Install/Use Windows Server 2012 R2    Install and Configure  Windows Powershell  cmdlets    Create a script named  gluu1.ps1  with the following template changing domain, hostname of Gluu Server and Certificate       Connect-MsolService\n\n$dom = \"company.org\"\n$url = \"https://test.gluu.org/idp/profile/SAML2/POST/SSO\"\n$uri = \"https://test.gluu.org/idp/shibboleth\"\n$logouturl = \"https://test.gluu.org/idp/logout.jsp\"\n$cert = \"Mx....SAML_cert_of_your_Gluu_Server...Tdsg9R0XO3AnBeHRtGmAA=\"\n\nSet-MsolDomainAuthentication -DomainName $dom -FederationBrandName $dom -Authentication Federated  -PassiveLogOnUri $url -SigningCertificate $cert -IssuerUri $uri -LogOffUri $logouturl -PreferredAuthenticationProtocol SAMLP    Run the  gluu.ps1  script from Windows Server 2012 R2",
            "title": "Office 365 Configuration"
        },
        {
            "location": "/integrate/office365/#gluu-server-configuration",
            "text": "Custom Attributes  The configuration begins by creating a few custom attributes named  IDPEmail ,  ImmutableID  and  objectguid .\nPlease see  this doc  to create custom attributes.    IDPEmail  Custom Attribute    ImmutableID  Custom Attribute    objectguid  Custom Attribute    OpenDJ Configuration    Edit the  100-user.ldif  file under  /opt/opendj/config/schema  folder.    Remove the  obhectGUID  entry from the file    Add the following new entry      attributeTypes: ( 1454676848732 NAME 'objectGUID' SYNTAX 1.3.6.1.4.1.1466.115.121.1.5 USAGE userApplications X-ORIGIN 'gluu' )   * Restart OpenDJ    Edit the  attribute-resolver.xml.vm  file under  /opt/tomcat/conf/shibboleth2/idp  folder   Add  $attribute.name.equals('ImmutableID')  with the existing  ($attribute.name.equals('transientId')  to look like the snippet below     #if(!($attribute.name.equals('transientId')or$attribute.name.equals('ImmutableID')))   * Add `IDPEmail` attribute definition   <resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"UserId\" sourceAttributeID=\"IDPEmail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" name=\"IDPEmail\" friendlyName=\"UserId\" />\n        </resolver:AttributeDefinition>   * Add `ImmutableID` attribute definition   <resolver:AttributeDefinition id=\"ImmutableID\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"objectguid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition>   Identity Mapping  The cache refresh mechanism is used to populate the Gluu Server LDAP with data from a backend LDAP/AD. The  objectGUID  attribute must be pulled from the backend data source to Gluu Server.   Edit the  ox-ldap.properties ,  oxauth-ldap.properties  and  oxidp-ldap.properties  files to add the following   binaryAttributes=objectGUID,objectguid   Note: 'objectGUID' (the first one) is the attribute which contains binary values in the backend AD and 'objectguid' (the second one) is the Gluu Server binary attribute name which will pull value from 'objectGUID' attribute   Restart Tomcat   Create Trust Relationship  Please see  this doc  to create trust relationships.   Configure Relaying Party like the following screenshot",
            "title": "Gluu Server Configuration"
        },
        {
            "location": "/integrate/hobsons-saml/",
            "text": "SAML Trust Relationship with Hobsons Education Solutions Co\n\n\nThis guide has been prepared to connect the Hobsons Service Provider\n(SP) with the Gluu Server for SP-initiated SSO. The connection is\nestablished through the creation of a Trust Relationship using the Gluu\nServer UI, oxTrust.\n\n\nCreating Hobsons Trust Relationship\n\n\n\n\n\n\nLog in to your Gluu Server using your admin credentials.\n\n\n\n\n\n\nNext, click on the SAML tab, and select the option Trust\nRelationships. Then, click on the \nAdd Relationship\n button.\n\n\n\n\n\n\n\n\n\n\nThe button \nAdd Relationship\n will open the following page, the trust\nrelationship can be created easily using the following form.\n\n\n\n\n\n\n1. __Display Name__: This field contains the display name of the \nTrust Relationship. In the example below we use \u201cTest Hobsons-Radius TR\u201d.\n\n2. __Description__: A small description of Hobsons can be input here.\n\n3. __Metadata Type__: Please select the uri from the dropdown menu.\n\n4. __SP Metadata URL__: The metadata uri provided by Hobsons goes here.\n\n5. __SP Logout URL__: This uri is meant to be supplied by the\nHobsons staff. If you did not receiv any logout uri yet, leave it blank.\n\n6. __Released__: The two necessary attributes--`Transientid` and the\n`eduPersonPrincipalName`--were selected from the attribute list.\n\n\n\n\n\n7. Finally, click \"Add\" to finish creating the Trust Relationship.\n\n\n\nConfiguring Hobsons Trust Relationship\n\n\nPlease ensure that the new Trust Relationship status is \"active\".\nOtherwise click on the Trust Relationship, and activate it before\nconfiguring it.\n\n\n\n\nThe configuration screen opens by clicking on the Hobsons Trust Relationship.\n\n\n\n\n\n\nConfigure Metadata Filters\n: Do not make any changes.\n\n\n\n\n\n\nConfigure specific Relying Party\n: Check this option and a link \"Configure Relying Party\" will appear.\n\n\n\n\n\n\nConfigure Relying Party\n: Click on the link, and a new window opens:\n\n\n\n\n\n\nSelect SAML2SSO from the list and click on the \"Add\" button.\n\n\n\n\n\n\nSet \"signResponses\", \"signAssertions\", \"signRequests\" and\n\"encryptAssertions\" to \nConditional\n from the drop-down menu.\n\n\n\n\n\n\nSet \"encryptNameIds\" to \nNever\n from the drop-down menu, and click\n\"Save\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick \"Update\" to finish the configuration of the Trust Relationship.",
            "title": "Hobsons Education Solution SSO"
        },
        {
            "location": "/integrate/hobsons-saml/#saml-trust-relationship-with-hobsons-education-solutions-co",
            "text": "This guide has been prepared to connect the Hobsons Service Provider\n(SP) with the Gluu Server for SP-initiated SSO. The connection is\nestablished through the creation of a Trust Relationship using the Gluu\nServer UI, oxTrust.",
            "title": "SAML Trust Relationship with Hobsons Education Solutions Co"
        },
        {
            "location": "/integrate/hobsons-saml/#creating-hobsons-trust-relationship",
            "text": "Log in to your Gluu Server using your admin credentials.    Next, click on the SAML tab, and select the option Trust\nRelationships. Then, click on the  Add Relationship  button.      The button  Add Relationship  will open the following page, the trust\nrelationship can be created easily using the following form.    1. __Display Name__: This field contains the display name of the \nTrust Relationship. In the example below we use \u201cTest Hobsons-Radius TR\u201d.\n\n2. __Description__: A small description of Hobsons can be input here.\n\n3. __Metadata Type__: Please select the uri from the dropdown menu.\n\n4. __SP Metadata URL__: The metadata uri provided by Hobsons goes here.\n\n5. __SP Logout URL__: This uri is meant to be supplied by the\nHobsons staff. If you did not receiv any logout uri yet, leave it blank.\n\n6. __Released__: The two necessary attributes--`Transientid` and the\n`eduPersonPrincipalName`--were selected from the attribute list.   7. Finally, click \"Add\" to finish creating the Trust Relationship.",
            "title": "Creating Hobsons Trust Relationship"
        },
        {
            "location": "/integrate/hobsons-saml/#configuring-hobsons-trust-relationship",
            "text": "Please ensure that the new Trust Relationship status is \"active\".\nOtherwise click on the Trust Relationship, and activate it before\nconfiguring it.   The configuration screen opens by clicking on the Hobsons Trust Relationship.    Configure Metadata Filters : Do not make any changes.    Configure specific Relying Party : Check this option and a link \"Configure Relying Party\" will appear.    Configure Relying Party : Click on the link, and a new window opens:    Select SAML2SSO from the list and click on the \"Add\" button.    Set \"signResponses\", \"signAssertions\", \"signRequests\" and\n\"encryptAssertions\" to  Conditional  from the drop-down menu.    Set \"encryptNameIds\" to  Never  from the drop-down menu, and click\n\"Save\".        Click \"Update\" to finish the configuration of the Trust Relationship.",
            "title": "Configuring Hobsons Trust Relationship"
        },
        {
            "location": "/integrate/salesforce-sso/",
            "text": "SAML integration of Salesforce.com with Gluu Server\n\n\nBy default Salesforce suggest deployers to implement IDP-initiated SSO.\nThe initialization of IDP-initiated SSO is little bit complex as it\nrequires a big hostname which includes IDP's SSO link as well as SP's\nlogin uri. So we prefer SP-initiated SSO and here in this documentation\nwe are presenting a very simple SP-initiated SSO steps with Salesforce\nand Gluu Server. Still, you can go for IDP-initiated SSO if you prefer.\nFurther documentation is available at the Salesforce.com site.\n\n\nPrepare Salesforce.com\n\n\n\n\nLog into Salesforce.com with your administrative account.\n\n\nClick on \nSetup\n in the right upper corner of the page.\n\n\nYou need to add a custom domain name for your Salesforce.com site if\n  you do not have any yet.\n\n\nGo to \nDomain Management\n \u2013> \nMy Domain\n\n\nAdd your custom domain\n\n\nWait for some time. Salesforce.com will register this domain name\n  for you. As an example we use \ntestgluu-dev-ed.my.salesforce.com\n here.\n\n\n\n\n\n\n\n\nRegister your Gluu Server information in Salesforce.com\n\n\nGo to \nSecurity Controls\n \u2013> \nSingle Sign On Settings\n\n\nClick \nNew\n\n\n\n\n\n\n\n\n\n\nNow you need to add the information of your Gluu Server here\n\n\n\n\nName\n: Anything, whichever is easier for you to recognize this\n   setup, i.e. \nGluu Server\n\n\nAPI Name\n: Gluu Server.\n\n\nIssuer\n: EntityID of your Gluu Server, i.e. \nhttps://test.gluu.org/idp/shibboleth\n\n\nEntityID\n: Your Salesforce.com custom domain name as chosen\n   above, i.e. \nhttps://testgluu-dev-ed.my.salesforce.com\n\n\nIdentity Provider Certificate\n: Grab your Gluu Server's SAML\n   certificate. SAML certificate can be grabbed from your Gluu Sever's\n   metadata. Save the certificate and upload it.\n\n\nRequest Signing Certificate\n: Default certificate\n\n\nRequest Signature Method\n: RSA-SHA1\n\n\nAssertion Decryption Certificate\n: Assertion not encrypted.\n\n\nSAML Identity Type\n: Assertion contains user's Salesforce.com username\n\n\nSAML Identity Location\n: Identity is in an Attribute element\n\n\nAttribute Name\n: Provide 'SAML2 URI' of your attribute. For our test case we are using Gluu Server's Email attribute. How to check the information of your attribute is available \nhere\n.\n\n\nNameID Format\n: Leave this field empty.\n\n\nIdentity Provider Login URL\n: \nhttps://test.gluu.org/idp/profile/SAML2/Redirect/SSO\n\n\nService Provider Initiated Request Binding\n: HTTP-Redirect\n\n\nHere is how our example setup looks like:\n\n\n\n\n\n\n\n\n\n\nPrepare Gluu Server\n\n\n\n\nHow to create SAML trust relationship is available \nhere\n. \n\n\nGrab Salesforce.com metadata from the Salesforce.com website. There is\n  an option named 'Download Metadata':\n\n\nModify Salesforce.com metadata a bit:\n\n\nRemove \nAuthnRequestsSigned=\u201ctrue\u201d\n from metadata.\n\n\nSave metadata\n\n\n\n\n\n\nCreate Trust Relationship:\n\n\nDisplay Name\n: Anything, whichever is easier for you to recognize this trust relationship.\n\n\nDescription\n: Anything, whichever is easier for you to recognize this trust relationship\n\n\nMetadata Type\n: 'File'\n\n\nUpload salesforce's metadata (your modified one)\n\n\nReleases attributes: TransientID and Email\n\n\n'Add' this trust\n\n\nConfigure Specific Relying: It can be done from Gluu Server's GUI (named: oxTrust)\n\n\nSelect 'SAML2SSO'\n\n\nincludeAttributeStatement: Enabled\n\n\nassertionLifetime: keep the default one\n\n\nassertionProxyCount: keep the default one\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never\n\n\nSave it\n\n\n\n\n\n\n\n\n\n\n'Update' the trust relationship\n\n\nHere is how it looks like in our example setup:\n\n\n\n\n\n\nTest SSO\n\n\n\n\nGo back to Salesforce.com setup\n\n\nSecurity Controls \u2013> Single Sign On Settings\n\n\nEnable 'Federated Single Sign-On Using SAML'\n\n\nGo to 'Domain Management'\n\n\nConfigure 'Authentication Configuration'\n\n\nSelect 'Gluu Server'\n\n\nSave it\n\n\nHere is how the 'Authentication Configuration' looks like:\n\n\n\n\n\n\n\n\n\n\nThis is SP-initiate SSO. So hit your Salesforce.com website link to\ninitiate the SSO.\n\n\n\n\n\n\nHere\n\nis a video link of this SSO.",
            "title": "Salesforce SSO"
        },
        {
            "location": "/integrate/salesforce-sso/#saml-integration-of-salesforcecom-with-gluu-server",
            "text": "By default Salesforce suggest deployers to implement IDP-initiated SSO.\nThe initialization of IDP-initiated SSO is little bit complex as it\nrequires a big hostname which includes IDP's SSO link as well as SP's\nlogin uri. So we prefer SP-initiated SSO and here in this documentation\nwe are presenting a very simple SP-initiated SSO steps with Salesforce\nand Gluu Server. Still, you can go for IDP-initiated SSO if you prefer.\nFurther documentation is available at the Salesforce.com site.",
            "title": "SAML integration of Salesforce.com with Gluu Server"
        },
        {
            "location": "/integrate/salesforce-sso/#prepare-salesforcecom",
            "text": "Log into Salesforce.com with your administrative account.  Click on  Setup  in the right upper corner of the page.  You need to add a custom domain name for your Salesforce.com site if\n  you do not have any yet.  Go to  Domain Management  \u2013>  My Domain  Add your custom domain  Wait for some time. Salesforce.com will register this domain name\n  for you. As an example we use  testgluu-dev-ed.my.salesforce.com  here.     Register your Gluu Server information in Salesforce.com  Go to  Security Controls  \u2013>  Single Sign On Settings  Click  New      Now you need to add the information of your Gluu Server here   Name : Anything, whichever is easier for you to recognize this\n   setup, i.e.  Gluu Server  API Name : Gluu Server.  Issuer : EntityID of your Gluu Server, i.e.  https://test.gluu.org/idp/shibboleth  EntityID : Your Salesforce.com custom domain name as chosen\n   above, i.e.  https://testgluu-dev-ed.my.salesforce.com  Identity Provider Certificate : Grab your Gluu Server's SAML\n   certificate. SAML certificate can be grabbed from your Gluu Sever's\n   metadata. Save the certificate and upload it.  Request Signing Certificate : Default certificate  Request Signature Method : RSA-SHA1  Assertion Decryption Certificate : Assertion not encrypted.  SAML Identity Type : Assertion contains user's Salesforce.com username  SAML Identity Location : Identity is in an Attribute element  Attribute Name : Provide 'SAML2 URI' of your attribute. For our test case we are using Gluu Server's Email attribute. How to check the information of your attribute is available  here .  NameID Format : Leave this field empty.  Identity Provider Login URL :  https://test.gluu.org/idp/profile/SAML2/Redirect/SSO  Service Provider Initiated Request Binding : HTTP-Redirect  Here is how our example setup looks like:",
            "title": "Prepare Salesforce.com"
        },
        {
            "location": "/integrate/salesforce-sso/#prepare-gluu-server",
            "text": "How to create SAML trust relationship is available  here .   Grab Salesforce.com metadata from the Salesforce.com website. There is\n  an option named 'Download Metadata':  Modify Salesforce.com metadata a bit:  Remove  AuthnRequestsSigned=\u201ctrue\u201d  from metadata.  Save metadata    Create Trust Relationship:  Display Name : Anything, whichever is easier for you to recognize this trust relationship.  Description : Anything, whichever is easier for you to recognize this trust relationship  Metadata Type : 'File'  Upload salesforce's metadata (your modified one)  Releases attributes: TransientID and Email  'Add' this trust  Configure Specific Relying: It can be done from Gluu Server's GUI (named: oxTrust)  Select 'SAML2SSO'  includeAttributeStatement: Enabled  assertionLifetime: keep the default one  assertionProxyCount: keep the default one  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never  Save it      'Update' the trust relationship  Here is how it looks like in our example setup:",
            "title": "Prepare Gluu Server"
        },
        {
            "location": "/integrate/salesforce-sso/#test-sso",
            "text": "Go back to Salesforce.com setup  Security Controls \u2013> Single Sign On Settings  Enable 'Federated Single Sign-On Using SAML'  Go to 'Domain Management'  Configure 'Authentication Configuration'  Select 'Gluu Server'  Save it  Here is how the 'Authentication Configuration' looks like:      This is SP-initiate SSO. So hit your Salesforce.com website link to\ninitiate the SSO.    Here \nis a video link of this SSO.",
            "title": "Test SSO"
        },
        {
            "location": "/integrate/dropbox/",
            "text": "Dropbox SSO with Gluu Server\n\n\nThis document is a step-by-step guide to setting up Dropbox SSO in Gluu Server.\nThis SSO requires setting a custom \nnameid\n called \nemailnid\n.\n\n\nCustom NameID\n\n\nPlease see \nthis doc\n on how to create custom attributes.\n\n\nThe new attribute screen should look like the screenshot below\n\n\n\nThe custom \nnameid\n needs to be defined in the \nattribute-resolver\n template file.\n\n\n\n\n\n\nPlease edit the \nattribute-resolver.xml.vm\n file  under the \n/opt/tomcat/conf/shibboleth2/idp\n folder\n\n\n\n\n\n\nAdd the \n$attribute.name.equals('emailnid')\n with the existing \n#if( ! ($attribute.name.equals('transientId')\n to look like the snippet below\n\n\n\n\n\n\n#if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('emailnid') ) ) \n\n\n\n\n\n\nAdd \nnameid\n definition \n\n\n\n\n <resolver:AttributeDefinition id=\"emailnid\"\n                                xsi:type=\"Simple\"\n                                xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                                sourceAttributeID=\"mail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />\n</resolver:AttributeDefinition> \n\n\n\n\n\n\nAdd \nemailAddress\n in Principal Connector\n\n\n\n\n <resolver:PrincipalConnector xsi:type=\"pc:Transient\" id=\"saml2Transient\" nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" /> \n\n\n\n\n\n\nRestart Tomcat service\n\n\n\n\nTrust Relationship\n\n\nPlease see \nthis doc\n to create trust relationship and fill up the form with the following info\n\n\nThe metadata for Dropbox is necessary to create trust relationship. Please use the following snippet so create the \ndropbox_metadata.xml\n.\n\n\n <EntityDescriptor entityID=\"Dropbox\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n    <SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\n        <AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://www.dropbox.com/saml_login\" />\n    </SPSSODescriptor>\n</EntityDescriptor> \n\n\n\n\n\n\nDisplay Name: Dropbox\n\n\nDescription: External SP / File method\n\n\nMetadata Type: File\n\n\nSP Metadata File: Upload the 'dropbox_metadata.xml' which you just created\n\n\nConfigure Specific RelyiningParty: Yes\n\n\n\n\nsignResponses: conditional\nsignAssertions: never\nsignRequests: conditional\nencryptAssertions: never\nencryptNameIds: never\n\n\n\n\n\n\n\n\nReleased attribute: emailnid\n\n\n\n\n\nConfigure Gluu Server as IdP in Dropbox\n\n\n\n\nLog into Dropbox\n\n\nClick on \nAdmin Console\n\n\nClick \nAuthentication\n\n\nClick on the checkbox labeled \nEnable single-sign-on\n\n\n\n\nOptional/Required according to necessity\n\n\n\n\n\n\nSign in URL\n\nhttps://<hostname_of_Gluu_server>/idp/profile/SAML2/Redirect/SSO\n\n\n\n\n\n\nX.509 certificate \n\n\n\n\n\n\n\n\n\n\n    Get `shibIDP.crt` from Gluu Server `chroot` environment under `/etc/certs/` folder and upload it\n\n\n\n\n\n\n\n\nSave configuration\n\n\n\n\nTest SSO\n\n\n\n\n\n\nPlease go to https://www.dropbox.com and click on the \nSign In\n button\n\n\n\n\n\n\nIf the account is configured for SSO, then a screen similar to the screenshot below will appear after entering the email address.\n\n\n\n\n\n\n\nClick \nContinue\n and the website will redirect to Gluu Server for authentication.",
            "title": "Dropbox SSO"
        },
        {
            "location": "/integrate/dropbox/#dropbox-sso-with-gluu-server",
            "text": "This document is a step-by-step guide to setting up Dropbox SSO in Gluu Server.\nThis SSO requires setting a custom  nameid  called  emailnid .  Custom NameID  Please see  this doc  on how to create custom attributes.  The new attribute screen should look like the screenshot below  The custom  nameid  needs to be defined in the  attribute-resolver  template file.    Please edit the  attribute-resolver.xml.vm  file  under the  /opt/tomcat/conf/shibboleth2/idp  folder    Add the  $attribute.name.equals('emailnid')  with the existing  #if( ! ($attribute.name.equals('transientId')  to look like the snippet below    #if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('emailnid') ) )    Add  nameid  definition     <resolver:AttributeDefinition id=\"emailnid\"\n                                xsi:type=\"Simple\"\n                                xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                                sourceAttributeID=\"mail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />\n</resolver:AttributeDefinition>    Add  emailAddress  in Principal Connector    <resolver:PrincipalConnector xsi:type=\"pc:Transient\" id=\"saml2Transient\" nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />    Restart Tomcat service   Trust Relationship  Please see  this doc  to create trust relationship and fill up the form with the following info  The metadata for Dropbox is necessary to create trust relationship. Please use the following snippet so create the  dropbox_metadata.xml .   <EntityDescriptor entityID=\"Dropbox\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n    <SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\n        <AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://www.dropbox.com/saml_login\" />\n    </SPSSODescriptor>\n</EntityDescriptor>    Display Name: Dropbox  Description: External SP / File method  Metadata Type: File  SP Metadata File: Upload the 'dropbox_metadata.xml' which you just created  Configure Specific RelyiningParty: Yes   signResponses: conditional\nsignAssertions: never\nsignRequests: conditional\nencryptAssertions: never\nencryptNameIds: never    Released attribute: emailnid   Configure Gluu Server as IdP in Dropbox   Log into Dropbox  Click on  Admin Console  Click  Authentication  Click on the checkbox labeled  Enable single-sign-on   Optional/Required according to necessity    Sign in URL https://<hostname_of_Gluu_server>/idp/profile/SAML2/Redirect/SSO    X.509 certificate           Get `shibIDP.crt` from Gluu Server `chroot` environment under `/etc/certs/` folder and upload it    Save configuration   Test SSO    Please go to https://www.dropbox.com and click on the  Sign In  button    If the account is configured for SSO, then a screen similar to the screenshot below will appear after entering the email address.    Click  Continue  and the website will redirect to Gluu Server for authentication.",
            "title": "Dropbox SSO with Gluu Server"
        },
        {
            "location": "/integrate/test-shib2/",
            "text": "TestShib2 Testing For Gluu Server\n\n\nTrust Relationship in IdP\n\n\nIt is necessary to create a Trust Relationship in the IdP for TestShib2.\n\n\n\n\n\n\nLog into the Gluu IdP as an admin user.\n\n\n\n\n\n\nClick on SAML --> Trust Relationships\n\n\n\n\n\n\n\n\n\n\nTo create a new Trust Relationship, click on the \"Add Relationship\" button.\n\n\n\n\n\n\n(a) Configuration\n\n\n  i. Display Name: TestShib2 testing\n\n ii. Description: TestShib2 TR\n\niii. Metadata type: URL\n\n iv. Provide TestShib2 XML metadata link: http://www.testshib.org/metadata/testshib-providers.xml\n\n  v. Release Attributes: First Name, Username, \"eduPerson TargetedID\" if required and released in IdP.\n\n vi. Click \"Add\".\n\n\n\n\n\nGluu IdP Configuration in Testshib Site\n\n\n\n\n\n\nGo to the TestShib website by typing \"http://www.testshib.org/\" in the web browser.\n\n\n\n\n\n\nClick on \"Register\".\n\n\n\n\n\n\nUpload the metadata of the IdP in the testshib webpage.\n\n\n(a) To collect the metadata of Gluu IdP, please go to \"https://support.gluu.org/view/application-integration/how-can-i-get-my-idps-metadata/216\".\n\n\n\n\n\n\n\n\n(b) After successful update, TestShib will present a confirmation page.\n\n\n\n\n\nIdP SSO Testing\n\n\n\n\n\n\nClick on \"TEST\" in the TestShib website.\n\n\n\n\n\n\nHit the \"https://sp.testshib.org\" link.\n\n\n\n\n\n\n\n\n\n\nProvide the entityID of the IdP in the input box. The entityID for Gluu IdP is \"https://host_name_of_IdP/idp/shibboleth\".\n\n\n\n\n\n\n\n\nClick \"Go\" and the user will be forwarded to the IdP for authentication. If the authentication is successful, then the browser will show a shibboleth protected TestShib page.",
            "title": "TestShib2 SSO"
        },
        {
            "location": "/integrate/test-shib2/#testshib2-testing-for-gluu-server",
            "text": "",
            "title": "TestShib2 Testing For Gluu Server"
        },
        {
            "location": "/integrate/test-shib2/#trust-relationship-in-idp",
            "text": "It is necessary to create a Trust Relationship in the IdP for TestShib2.    Log into the Gluu IdP as an admin user.    Click on SAML --> Trust Relationships      To create a new Trust Relationship, click on the \"Add Relationship\" button.    (a) Configuration    i. Display Name: TestShib2 testing\n\n ii. Description: TestShib2 TR\n\niii. Metadata type: URL\n\n iv. Provide TestShib2 XML metadata link: http://www.testshib.org/metadata/testshib-providers.xml\n\n  v. Release Attributes: First Name, Username, \"eduPerson TargetedID\" if required and released in IdP.\n\n vi. Click \"Add\".",
            "title": "Trust Relationship in IdP"
        },
        {
            "location": "/integrate/test-shib2/#gluu-idp-configuration-in-testshib-site",
            "text": "Go to the TestShib website by typing \"http://www.testshib.org/\" in the web browser.    Click on \"Register\".    Upload the metadata of the IdP in the testshib webpage.  (a) To collect the metadata of Gluu IdP, please go to \"https://support.gluu.org/view/application-integration/how-can-i-get-my-idps-metadata/216\".     (b) After successful update, TestShib will present a confirmation page.",
            "title": "Gluu IdP Configuration in Testshib Site"
        },
        {
            "location": "/integrate/test-shib2/#idp-sso-testing",
            "text": "Click on \"TEST\" in the TestShib website.    Hit the \"https://sp.testshib.org\" link.      Provide the entityID of the IdP in the input box. The entityID for Gluu IdP is \"https://host_name_of_IdP/idp/shibboleth\".     Click \"Go\" and the user will be forwarded to the IdP for authentication. If the authentication is successful, then the browser will show a shibboleth protected TestShib page.",
            "title": "IdP SSO Testing"
        },
        {
            "location": "/integrate/asimba/",
            "text": "Testing Asimba with Gluu Server 2.4.4\n\n\nRequired Setup\n\n\nhttps://sp.gluu.org Setup\n\n\nhttps://upgrade.gluu.org setup\n\n\nAdd IdP\n\n\nAdd SP\n\n\n\n\n\n\nhttps://test.gluu.org setup\n\n\n\n\n\n\n\n\n\n\nTesting Asimba with Gluu Server 2.4.4\n\n\nThis guide outlines how to test Asimba with Gluu Server 2.4.4\nThe authentication flow for this test is as follows\n\n[https://sp.gluu.org] --> [https://upgrade.gluu.org] -->[https://test.gluu.org] -->[https://upgrade.gluu.org] -->[https://sp.gluu.org]\n\n\nRequired Setup\n\n\n\n\n\n\n\n\nSetup hostname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhttps://sp.gluu.org\n\n\nThis is a shibboleth SP connected to \nhttps://upgrade.gluu.org\n\n\n\n\n\n\nhttps://upgrade.gluu.org\n\n\nThis is a Gluu Server 2.4.4 SAML IdP with Asimba\n\n\n\n\n\n\nhttps://test.gluu.org\n\n\nThis is a second Gluu Server 2.4.4 SAML IdP connected to \nhttps://upgrade.gluu.org\n\n\n\n\n\n\n\n\nNote:\n Ideally all SPs and IdPs should be connected to Asimba server. In this case we are following that rule as well.\n\n\nhttps://sp.gluu.org Setup\n\n\nPlease follow the following steps to setup https://sp.gluu.org.\n\n\n\n\n\n\nInstall Shibboleth SP following the guides available for \nCentOS\n or \nUbuntu\n.\n\n\n\n\n\n\nConfigure \nshibboleth2.xml\n to include the metadata and metadata link for the Asimba Server, in this case \nhttps://upgrade.gluu.org\n\nTwo code snippets are given below \n\n\n\n\n\n\n<SSO entityID=\"https://upgrade.gluu.org/asimba/profiles/saml2\"\n\n\n\n\n<MetadataProvider type=\"XML\" validate=\"true\" file=\"/etc/shibboleth/asimba_metadata.xml\"/>\n\n\n\n\nNote:\n Deployer need to download Asimba server's metadata inside SP and provide the absolute path in \nMetadataProvider\n section\n\n\nhttps://upgrade.gluu.org setup\n\n\n\n\nInstall Gluu Server 2.4.4 with Asimba following the \nDeployment Guide\n and select 'Asimba' durning installation. \n\n\n\n\nAdd IdP\n\n\n\n\nAdd \nhttps://upgrade.gluu.org\n, as self IdP, and \nhttps://test.gluu.org\n, as remote IdP, inside Asimba\nserver as authentication servers. \nN.B.:\n In the screenshot given below, \nhttps://upgrade.gluu.org/idp/shibboleth\n is added as one of\nthe authentication servers. Follow this template to add \nhttps://test.gluu.org\n as well.\n\n\n\n\n\nNote:\n The certificates below can be found in the \n/etc/certs/\n folder in the Gluu Server CE environment\n\n\n\n\nConvert \nshibIDP.crt\n to \nshibIDP.der\n\n\n\n\ncode: \nopenssl x509 -outform der -in shibIDP.crt -out shibIDP.der\n\n\n\n\n\n\nImport abvoe DER into the \nasimbaIDP.jks\n\n\n\n\n\n\ncode: \nkeytool -importcert -file shibIDP.der -keystore asimbaIDP.jks -alias <entityID_of_ID>\n\n\n\n\n\n\nRestart Tomcat Service\n\n\n\n\n\n\nAdd SP\n\n\n\n\n\n\nNavigate to SP Requestors from the left hand menu \n\n\n\n\n\n\n\n\nClick on Add SP Requestor \n\n\n\n\n\n\n\n\nDownload the SP Metadata from \nhttps://sp.gluu.org\n and provide the absolute path link in the Metadata File location \n\n\n\n\n\n\n\n\nClick \nUpdate\n and Restart Tomcat Server\n\n\n\n\n\n\nhttps://test.gluu.org setup\n\n\nIn this Gluu Server, add the Asimba Server, \nhttps://upgrade.gluu.org\n as a trusted party through a Trust Relationship.\n\n\n\n\n\n\nClick on Add Trust Relationship \n\n\n\n\n\n\n\n\nSetup the Trust Relationship as given below in the screenshot \n\n\n\n\n\n\n\n\nConfigure Relaying Party",
            "title": "Asimba & Gluu CE"
        },
        {
            "location": "/integrate/asimba/#testing-asimba-with-gluu-server-244",
            "text": "This guide outlines how to test Asimba with Gluu Server 2.4.4\nThe authentication flow for this test is as follows [https://sp.gluu.org] --> [https://upgrade.gluu.org] -->[https://test.gluu.org] -->[https://upgrade.gluu.org] -->[https://sp.gluu.org]",
            "title": "Testing Asimba with Gluu Server 2.4.4"
        },
        {
            "location": "/integrate/asimba/#required-setup",
            "text": "Setup hostname  Description      https://sp.gluu.org  This is a shibboleth SP connected to  https://upgrade.gluu.org    https://upgrade.gluu.org  This is a Gluu Server 2.4.4 SAML IdP with Asimba    https://test.gluu.org  This is a second Gluu Server 2.4.4 SAML IdP connected to  https://upgrade.gluu.org     Note:  Ideally all SPs and IdPs should be connected to Asimba server. In this case we are following that rule as well.",
            "title": "Required Setup"
        },
        {
            "location": "/integrate/asimba/#httpsspgluuorg-setup",
            "text": "Please follow the following steps to setup https://sp.gluu.org.    Install Shibboleth SP following the guides available for  CentOS  or  Ubuntu .    Configure  shibboleth2.xml  to include the metadata and metadata link for the Asimba Server, in this case  https://upgrade.gluu.org \nTwo code snippets are given below     <SSO entityID=\"https://upgrade.gluu.org/asimba/profiles/saml2\"  <MetadataProvider type=\"XML\" validate=\"true\" file=\"/etc/shibboleth/asimba_metadata.xml\"/>  Note:  Deployer need to download Asimba server's metadata inside SP and provide the absolute path in  MetadataProvider  section",
            "title": "https://sp.gluu.org Setup"
        },
        {
            "location": "/integrate/asimba/#httpsupgradegluuorg-setup",
            "text": "Install Gluu Server 2.4.4 with Asimba following the  Deployment Guide  and select 'Asimba' durning installation.    Add IdP   Add  https://upgrade.gluu.org , as self IdP, and  https://test.gluu.org , as remote IdP, inside Asimba\nserver as authentication servers.  N.B.:  In the screenshot given below,  https://upgrade.gluu.org/idp/shibboleth  is added as one of\nthe authentication servers. Follow this template to add  https://test.gluu.org  as well.   Note:  The certificates below can be found in the  /etc/certs/  folder in the Gluu Server CE environment   Convert  shibIDP.crt  to  shibIDP.der   code:  openssl x509 -outform der -in shibIDP.crt -out shibIDP.der    Import abvoe DER into the  asimbaIDP.jks    code:  keytool -importcert -file shibIDP.der -keystore asimbaIDP.jks -alias <entityID_of_ID>    Restart Tomcat Service    Add SP    Navigate to SP Requestors from the left hand menu      Click on Add SP Requestor      Download the SP Metadata from  https://sp.gluu.org  and provide the absolute path link in the Metadata File location      Click  Update  and Restart Tomcat Server",
            "title": "https://upgrade.gluu.org setup"
        },
        {
            "location": "/integrate/asimba/#httpstestgluuorg-setup",
            "text": "In this Gluu Server, add the Asimba Server,  https://upgrade.gluu.org  as a trusted party through a Trust Relationship.    Click on Add Trust Relationship      Setup the Trust Relationship as given below in the screenshot      Configure Relaying Party",
            "title": "https://test.gluu.org setup"
        },
        {
            "location": "/fine-tuning/",
            "text": "Fine Tuning Gluu Server\n\n\nLDAP Server\n\n\nApache Tomcat\n\n\nGluu Server\n\n\nGluu Server Benchmark\n\n\n\n\n\n\nUseful Links\n\n\n\n\n\n\nFine Tuning Gluu Server\n\n\nGluu Server has a stateless architecture, it scales quite easy. However\nto get high-performant server it must be tuned accordingly.\n\n\nTuning consists of:\n\n\n\n\nLDAP Server (OpenDJ, OpenLDAP)\n\n\nWeb Application Container (Tomcat, Jetty, JBoss)\n\n\nGluu Server configuration Tuning\n\n\n\n\nLDAP Server\n\n\n(For convenience all samples stick to OpenDJ however general recommendations are the same for other LDAP Servers)\n\n\n\n\nMaximum number of allowed connections\n\n\n\n\nIf there are not enough connections to serve the client, a connection is\nput \"on hold\" and waits. To avoid delays it's recommended to provide\nexpected maximum allowed connections.\n\n\nmax-allowed-client-connections=1000\n\n\n\n\n\n\nProvide enough resources to LDAP Server\n\n\n\n\nFor example OpenDJ use JVM for running, for high performance it's\nrecommended to give enough memory via JVM system properties.\n\n\n\n\nAllow LDAP Server use cache as much as possible.\n\n\n\n\ndsconfig -n set-backend-prop --backend-name userRoot --set db-cache-percent:50\n\n\n\n\nApache Tomcat\n\n\n\n\nSet maximum for parallel requests.\n\n\n\n\nConnector parameters in \nserver.xml\n:\n\n\n\n\nmaxThreads=\"10000\"\n\n\n\n\nmaxConnections=\"10000\"\n\n\n\n\n\n\nSet memory settings via JAVA_OPTS\n\n\n\n\n\n\nset \"JAVA_OPTS=-Xms1456m -Xmx7512m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"\n\n\n\n\nOperating time\n\n\n\n\nCheck via Tomcat monitor whether requests are handled or just \"hangs\"\nbecause there are not enough resources. Here is sample when processing\ntime increase due to lack of resources:\n\n\n\n\nGluu Server\n\n\n\n\n\n\noxauth-ldap.properties - Increase ldap connection pool size\n\n\nmaxconnections: 1000\n\n\n\n\n\n\nGluu Server Benchmark\n\n\nBenchmarking based on Authentication Implicit Flow: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth\n\n\nMeasures were made on single machine with Gluu Server, LDAP Server and test runner (clients). Therefore here is quite \nsubjective\n results\n\n\n\n  \n\n    \nInvocations \u00a0\u00a0\n\n    \nParallel threads \u00a0\u00a0\n\n    \nTime\n\n    \nComments\n\n  \n\n  \n\n    \n100\n\n    \n100\n\n    \n8 seconds \n\n    \n\n  \n\n  \n\n    \n1000\n\n    \n100\n\n    \n-\n\n    \n\n  \n\n  \n\n    \n1000\n\n    \n200\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n  \n\n    \n2000\n\n    \n100\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n  \n\n    \n2000\n\n    \n200\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n  \n\n    \n10000\n\n    \n300\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n  \n\n    \n1000000\n\n    \n300\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n\n\n\n\nUseful Links\n\n\n\n\nOpenDJ Performance Tuning\n\n\nOpenDJ Global configuration",
            "title": "Tuning LDAP, Tomcat"
        },
        {
            "location": "/fine-tuning/#fine-tuning-gluu-server",
            "text": "Gluu Server has a stateless architecture, it scales quite easy. However\nto get high-performant server it must be tuned accordingly.  Tuning consists of:   LDAP Server (OpenDJ, OpenLDAP)  Web Application Container (Tomcat, Jetty, JBoss)  Gluu Server configuration Tuning",
            "title": "Fine Tuning Gluu Server"
        },
        {
            "location": "/fine-tuning/#ldap-server",
            "text": "(For convenience all samples stick to OpenDJ however general recommendations are the same for other LDAP Servers)   Maximum number of allowed connections   If there are not enough connections to serve the client, a connection is\nput \"on hold\" and waits. To avoid delays it's recommended to provide\nexpected maximum allowed connections.  max-allowed-client-connections=1000   Provide enough resources to LDAP Server   For example OpenDJ use JVM for running, for high performance it's\nrecommended to give enough memory via JVM system properties.   Allow LDAP Server use cache as much as possible.   dsconfig -n set-backend-prop --backend-name userRoot --set db-cache-percent:50",
            "title": "LDAP Server"
        },
        {
            "location": "/fine-tuning/#apache-tomcat",
            "text": "Set maximum for parallel requests.   Connector parameters in  server.xml :   maxThreads=\"10000\"   maxConnections=\"10000\"    Set memory settings via JAVA_OPTS    set \"JAVA_OPTS=-Xms1456m -Xmx7512m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"   Operating time   Check via Tomcat monitor whether requests are handled or just \"hangs\"\nbecause there are not enough resources. Here is sample when processing\ntime increase due to lack of resources:",
            "title": "Apache Tomcat"
        },
        {
            "location": "/fine-tuning/#gluu-server",
            "text": "oxauth-ldap.properties - Increase ldap connection pool size  maxconnections: 1000",
            "title": "Gluu Server"
        },
        {
            "location": "/fine-tuning/#gluu-server-benchmark",
            "text": "Benchmarking based on Authentication Implicit Flow: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth  Measures were made on single machine with Gluu Server, LDAP Server and test runner (clients). Therefore here is quite  subjective  results  \n   \n     Invocations \u00a0\u00a0 \n     Parallel threads \u00a0\u00a0 \n     Time \n     Comments \n   \n   \n     100 \n     100 \n     8 seconds  \n     \n   \n   \n     1000 \n     100 \n     - \n     \n   \n   \n     1000 \n     200 \n     - \n     Not representable: CPU 100% \n   \n   \n     2000 \n     100 \n     - \n     Not representable: CPU 100% \n   \n   \n     2000 \n     200 \n     - \n     Not representable: CPU 100% \n   \n   \n     10000 \n     300 \n     - \n     Not representable: CPU 100% \n   \n   \n     1000000 \n     300 \n     - \n     Not representable: CPU 100%",
            "title": "Gluu Server Benchmark"
        },
        {
            "location": "/fine-tuning/#useful-links",
            "text": "OpenDJ Performance Tuning  OpenDJ Global configuration",
            "title": "Useful Links"
        },
        {
            "location": "/gluu-defaults/policy/",
            "text": "Gluu Default Policy\n\n\nThis page contains the policy for gluu components.\n\n\nTomcat\n\n\nPlease remember to restart Tomcat Server on updating any \nlib\n or library. It extends to \n.war\n files too. If any resource is updated, it is not necessary to restart tomcat.",
            "title": "Gluu Policy"
        },
        {
            "location": "/gluu-defaults/policy/#gluu-default-policy",
            "text": "This page contains the policy for gluu components.",
            "title": "Gluu Default Policy"
        },
        {
            "location": "/gluu-defaults/policy/#tomcat",
            "text": "Please remember to restart Tomcat Server on updating any  lib  or library. It extends to  .war  files too. If any resource is updated, it is not necessary to restart tomcat.",
            "title": "Tomcat"
        },
        {
            "location": "/gluu-defaults/config/",
            "text": "Default Configuration wihtin Gluu Server\n\n\nThis page contains the default configurations for Gluu Server Community Edition. The defaults are not recommended and can be changed according to the internal policy of the organization. This page will also be helpful in understanding the defaults and changing them.\n\n\nOpenID Connect\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndynamicRegistrationExpirationTime\n\n\nExpiration of client secret\n\n\n86400 seconds\n\n\n\n\n\n\nsessionIdUnusedLifetime\n\n\nExpiration of session for authenticated user\n\n\n86400 seconds\n\n\n\n\n\n\nsessionIdUnauthenticatedUnusedLifetime\n\n\nExpiration of session for unauthenticated user\n\n\n120 seconds\n\n\n\n\n\n\nwebKeysStorage\n\n\nSet to \nkeystore\n to use a JKS file for private key storage. Set to \npkcs11\n to use SoftHSMv2 storage (PKCS #11 interface) through oxEleven REST Services\n\n\nkeystore\n\n\n\n\n\n\n\n\n\n\nThe \nclientSecretExpiresAt\n parameter is used to determine the expiration time of the client secret while registring any client with Gluu Server. This parameter sent along with the register request to Gluu Server.",
            "title": "Configurations"
        },
        {
            "location": "/gluu-defaults/config/#default-configuration-wihtin-gluu-server",
            "text": "This page contains the default configurations for Gluu Server Community Edition. The defaults are not recommended and can be changed according to the internal policy of the organization. This page will also be helpful in understanding the defaults and changing them.",
            "title": "Default Configuration wihtin Gluu Server"
        },
        {
            "location": "/gluu-defaults/config/#openid-connect",
            "text": "Attribute  Description  Default      dynamicRegistrationExpirationTime  Expiration of client secret  86400 seconds    sessionIdUnusedLifetime  Expiration of session for authenticated user  86400 seconds    sessionIdUnauthenticatedUnusedLifetime  Expiration of session for unauthenticated user  120 seconds    webKeysStorage  Set to  keystore  to use a JKS file for private key storage. Set to  pkcs11  to use SoftHSMv2 storage (PKCS #11 interface) through oxEleven REST Services  keystore      The  clientSecretExpiresAt  parameter is used to determine the expiration time of the client secret while registring any client with Gluu Server. This parameter sent along with the register request to Gluu Server.",
            "title": "OpenID Connect"
        },
        {
            "location": "/gluu-defaults/certificates/",
            "text": "Certificates\n\n\nAsimba\n\n\nApache\n\n\nUpdating Apache Certificate\n\n\nInstalling Intermediate Certificates\n\n\n\n\n\n\nOpenDJ\n\n\noxAuth\n\n\nShibboleth IDP\n\n\n\n\n\n\n\n\n\n\nCertificates\n\n\nMany of the components of the Gluu Server have cryptographic keys and\nX.509 certificates. There are many key formats, and keystore formats.\nNavigate to the sections below to find what you need for each of the\n\n\nAsimba\n\n\nasimba.crt\n, \nasimba.csr\n, \nasimba.key\n, \nasimba.key.orig\n,\n\nasimba.pkcs12\n and \nasimbaIDP.jks\n are associated with the\nAsimba SAML Proxy Server. If you install the server \nin your Gluu Server, you have to deal with these certificates\nand keys.\n\n\nApache\n\n\nhttpd.crt\n, \nhttpd.csr\n, \nhttpd.key\n, \nhttpd.key.orig\n are Apache SSL\nrelated certificates and keys. If you want to update your Apache SSL\ncertificate do not worry about the file extension \n.csr\n and \n.key.orig\n.\n\n\nUpdating Apache Certificate\n\n\nIf you are using the Gluu Server CE binaries or latest Gluu Servers, you\nneed to manually update certificates and keys from the file\n\n/etc/certs/\n. Please note that your private key cannot be password\nprotected, and the public key should be base64 X.509. It's recommended to\nbackup your full \n/etc/certs\n directory and \ncacerts\n file before\nproceeding, as well as to remove previous versions of certificates\nyou are about to update from the \ncacerts\n storage.\n\n\nFor example, follow these steps in order to update the Apache SSL cert:\n\n\n\n\nsave both the latest SSL httpd key and certificate in the file \n  \n/etc/certs\n.\n\n\nrename them to \nhttpd.key\n and \nhttpd.crt\n, respectively.\n\n\nimport 'httpd.der' into java keystore\n\n\nConvertion to DER, command: \nopenssl x509 -outform der -in httpd.crt -out httpd.der\n\n\nImport this DER into java keystore (cacerts), command: \nkeytool -importcert -file httpd.der -keystore cacerts -alias <hostname_of_your_Gluu_Server>_httpd\n\n\nrestart LDAP server, apache2/httpd and tomcat.\n\n\n\n\nYou may find more info on certificates Gluu CE uses, as well as detailed steps to update them, in \nthis article\n\n\nInstalling Intermediate Certificates\n\n\nTo install intermediate certificates follow these steps:\n\n\n\n\nLog into your Gluu Server container.\n\n\nKeep your intermediate certificate in the file \n/etc/certs/\n.\n\n\nModify \n/etc/httpd/conf.d/https_gluu.conf\n, and add\n   \nSSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt\n.\n\n\nRestart the service of the httpd server.\n\n\n\n\nOpenDJ\n\n\nopendj.crt\n is the public certificate being used by oxAuth to make a\nconnection to the internal Gluu-LDAP.\n\n\noxAuth\n\n\noxauth-web-keys.json\n is being used by Gluu's OpenID Connect & UMA\nserver.\n\n\nShibboleth IDP\n\n\nshibIDP.crt\n, \nshibIDP.csr\n, \nshibIDP.jks\n, \nshibIDP.key\n,\n\nshibIDP.key.orig\n, \nshibIDP.pkcs12\n are required if you use the Gluu\nServer's Shibboleth SAML server for SAML transactions.",
            "title": "Certificates"
        },
        {
            "location": "/gluu-defaults/certificates/#certificates",
            "text": "Many of the components of the Gluu Server have cryptographic keys and\nX.509 certificates. There are many key formats, and keystore formats.\nNavigate to the sections below to find what you need for each of the",
            "title": "Certificates"
        },
        {
            "location": "/gluu-defaults/certificates/#asimba",
            "text": "asimba.crt ,  asimba.csr ,  asimba.key ,  asimba.key.orig , asimba.pkcs12  and  asimbaIDP.jks  are associated with the\nAsimba SAML Proxy Server. If you install the server \nin your Gluu Server, you have to deal with these certificates\nand keys.",
            "title": "Asimba"
        },
        {
            "location": "/gluu-defaults/certificates/#apache",
            "text": "httpd.crt ,  httpd.csr ,  httpd.key ,  httpd.key.orig  are Apache SSL\nrelated certificates and keys. If you want to update your Apache SSL\ncertificate do not worry about the file extension  .csr  and  .key.orig .  Updating Apache Certificate  If you are using the Gluu Server CE binaries or latest Gluu Servers, you\nneed to manually update certificates and keys from the file /etc/certs/ . Please note that your private key cannot be password\nprotected, and the public key should be base64 X.509. It's recommended to\nbackup your full  /etc/certs  directory and  cacerts  file before\nproceeding, as well as to remove previous versions of certificates\nyou are about to update from the  cacerts  storage.  For example, follow these steps in order to update the Apache SSL cert:   save both the latest SSL httpd key and certificate in the file \n   /etc/certs .  rename them to  httpd.key  and  httpd.crt , respectively.  import 'httpd.der' into java keystore  Convertion to DER, command:  openssl x509 -outform der -in httpd.crt -out httpd.der  Import this DER into java keystore (cacerts), command:  keytool -importcert -file httpd.der -keystore cacerts -alias <hostname_of_your_Gluu_Server>_httpd  restart LDAP server, apache2/httpd and tomcat.   You may find more info on certificates Gluu CE uses, as well as detailed steps to update them, in  this article  Installing Intermediate Certificates  To install intermediate certificates follow these steps:   Log into your Gluu Server container.  Keep your intermediate certificate in the file  /etc/certs/ .  Modify  /etc/httpd/conf.d/https_gluu.conf , and add\n    SSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt .  Restart the service of the httpd server.",
            "title": "Apache"
        },
        {
            "location": "/gluu-defaults/certificates/#opendj",
            "text": "opendj.crt  is the public certificate being used by oxAuth to make a\nconnection to the internal Gluu-LDAP.",
            "title": "OpenDJ"
        },
        {
            "location": "/gluu-defaults/certificates/#oxauth",
            "text": "oxauth-web-keys.json  is being used by Gluu's OpenID Connect & UMA\nserver.",
            "title": "oxAuth"
        },
        {
            "location": "/gluu-defaults/certificates/#shibboleth-idp",
            "text": "shibIDP.crt ,  shibIDP.csr ,  shibIDP.jks ,  shibIDP.key , shibIDP.key.orig ,  shibIDP.pkcs12  are required if you use the Gluu\nServer's Shibboleth SAML server for SAML transactions.",
            "title": "Shibboleth IDP"
        },
        {
            "location": "/gluu-defaults/ldap/",
            "text": "LDAP Namespace\n\n\nLDAP Configuration\n\n\nIndexing\n\n\nOpenDJ Indexing\n\n\n389DS Indexing\n\n\nOpenLDAP Indexing\n\n\nConfiguring LDAP indexing to improve OX applications performance\n\n\noxAuth filters\n\n\nDetermining what needs indexing\n\n\nSample commands to add indexes\n\n\n\n\n\n\nReplication\n\n\nOpenDJ\n\n\nOpenLDAP\n\n\n389DS\n\n\n\n\n\n\n\n\n\n\nLDAP Namespace\n\n\nThe LDAP Namespace, or Directory Information Tree (DIT) structure, is\nthe convention for naming entries in LDAP so that they form a\nhierarchical tree structure.\n\n\nIn general, the Gluu Server tries to keep the data pretty flat. But at\ntimes, we use the namespace to store information that is relative to a\ncertain entry.\n\n\nThere are two root namespaces in the Gluu Server: \no=gluu\n and \no=site\n.\nThe \no=gluu\n namespace is used to store all the important configuration\nand entity data. The \no=site\n DIT is used only when identities are being\nsynchronized from an external LDAP server using the Gluu Server Cache\nRefresh feature.\n\n\nThe following table has a list of all the major branches of the tree\nunder \no=gluu\n:\n\n\n\n\n\n\n\n\nbase DN\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\no=gluu\n\n\norganization entry, IPv6 style id by default\n\n\n\n\n\n\n@!.....\n\n\nBasic info with inum\n\n\n\n\n\n\nou=clients\n\n\nOAuth2 client entities\n\n\n\n\n\n\nou=federation\n\n\nOAuth2 federation metadata\n\n\n\n\n\n\nou=groups\n\n\nGroup entities\n\n\n\n\n\n\nou=hosts\n\n\nHosts\n\n\n\n\n\n\nou=oxasimba\n\n\nAsimba configuration is stored in this branch\n\n\n\n\n\n\nou=oxProx\n\n\noxProx configuration data\n\n\n\n\n\n\nou=people\n\n\nUser entities\n\n\n\n\n\n\nou=push\n\n\nMobile device metadata used by oxPush\n\n\n\n\n\n\nou=scopes\n\n\nOauth2 scope entities\n\n\n\n\n\n\nou=scripts\n\n\nCustom scripts are stored in this branch\n\n\n\n\n\n\nou=session\n\n\noxAuth Session data (if persistent sessions are enabled)\n\n\n\n\n\n\nou=u2f\n\n\nThe U2F authentication requests, registration requests and registered devices are stored in this branch\n\n\n\n\n\n\nou=uma\n\n\nUMA policies, scopes, and resource sets\n\n\n\n\n\n\n\n\nLDAP Configuration\n\n\nThis section has information about how the Gluu Server uses LDAP, and\nother LDAP recommendations.\n\n\nThe Gluu Server uses LDAP for persistence to store information about\nthings like configuration, user claims, and client claims. Currently\nGluu ships with a forked version of OpenDJ. However, we hope to bolster\nsupport for OpenLDAP and 389DS. If you are an LDAP guru please help us\nby contributing documentation details!\n\n\nIndexing\n\n\nAll databases need proper indexing to function. This is particularly\ntrue for LDAP servers. There should never be any \nsub\n or \none\n scoped\nsearches to the LDAP server that are not properly indexed. Because\nindexing is implementation specific, the following guidelines should\nprovide a good starting point. The LDAP server logs should be\nperiodically analyzed to identify un-indexed searches. The exact\nindexing requirements may vary based on custom attributes, and custom\nauthentication and authorization requirements.\n\n\nOpenDJ Indexing\n\n\nIndexing Attribute Values\n\n\n389DS Indexing\n\n\nIndexing Architecture\n\n\nOpenLDAP Indexing\n\n\nOpenLDAP Tuning\n\n\nRecommended Indexes for OX\n\n\nIndexed attributes in OpenDS on seed.gluu.org server:\n\n\n| cn               | equality, substring | default | \n| --               | ------------------- | ------- | \n| entryUUID        | equality            | default | \n| givenName        | equality, substring | default | \n| mail             | equality, substring | default | \n| member           | equality            | default | \n| sn               | equality, substring | default | \n| telephoneNumber  | equality, substring | default | \n| uid              | equality            | default | \n| uniqueMember     | equality            | default | \n| uniqueIdentifier | equality            | Gluu    | \n| inum             | equality            | Gluu    | \n| oxid             | equality            | Gluu    | \n| lastModifiedTime | ordering            | Gluu    | \n| oxAuthExpiration | ordering            | Gluu    |\n\n\n\nFor o=site cache refresh will search on the 'Primary Key'. So it will\nnot be possible for us to know which attributes need to be indexed until\nconfiguration time.\n\n\nConfiguring LDAP indexing to improve OX applications performance\n\n\nIn order to keep optimal server load it is necessary to configure\nindexing for OpenDJ LDAP server. OpenDJ support these index types:\napproximate, equality, ordering, presence, substring, virtual list view,\nextensible matching rule. There is more information about index types in\n\nOpenDJ Admin\nGuide\n.\nIt is possible to add them for any LDAP attribute. OpenDJ will use them\nduring searching result entries.\n\n\nDefault OpenDJ installation has few preconfigured indexes for these\nattributes: aci, cn, dn2id, ds-sync-conflict, ds-sync-hist, entryUUID,\ngivenName, id2children, id2subtree, mail, member, objectClass, sn,\ntelephone\u00adNumber, uid, unique\u00adMember. This table contains definition of\nthese indexes: \ndefault\nIndexes\n.\n\n\noxAuth filters\n\n\noxAuth has a few parts which allows custom LDAP filters:\n\n\n`<auth-filters-enabled>`true`</auth-filters-enabled>`\n`<auth-filters>`\n    `<auth-filter>`\n        `<!--filter>`(&amp;(associatedClient=*{0}*)(myPinCode={1}))`</filter-->`\n        `<filter>`(&amp;(mail=*{0}*)(inum={1}))`</filter>`\n        `<!-- If bind=true oxAuth should try to bind to entry which it found by filter specified above -->`\n        `<bind>`false`</bind>`\n        `<base-dn>`o=gluu`</base-dn>`\n    `</auth-filter>`\n\n    `<auth-filter>`\n        `<filter>`uid={0}`</filter>`\n        `<bind>`true`</bind>`\n        `<bind-password-attribute>`pwd`</bind-password-attribute>`\n        `<base-dn>`o=gluu`</base-dn>`\n    `</auth-filter>`\n`</auth-filters>`\n\n`<!-- Custom client filters to be able identify client by custom id. -->`\n`<client-auth-filters-enabled>`true`</client-auth-filters-enabled>`\n`<client-auth-filters>`\n    `<client-auth-filter>`\n        `<filter>`myCustomAttr1={0}`</filter>`\n        `<base-dn>`ou=clients,o=@!1111,o=gluu`</base-dn>`\n    `</client-auth-filter>`\n    `<!--client-auth-filter>`\n        `<filter>`(&amp;(myCustomAttr1={0})(myCustomAttr2={0}))`</filter>`\n        `<base-dn>`ou=clients,o=@!1111,o=gluu`</base-dn>`\n    `</client-auth-filter-->`\n`</client-auth-filters>`\n\n\n\noxAuth uses them to find clients. Hence it is necessary to configure\nindexing for these filters. If there are no indexes for the filter\nattributes OpenDJ might use an unindexed search.\n\n\nDetermining what needs indexing\n\n\nOpenDJ has built in functionality to help the admin find unindexed\nsearches. More information about this is available in the OpenDJ Admin\nGuide \nDetermining What Needs\nIndexing\n.\n\n\nSample commands to add indexes\n\n\nAdd an index for the inum attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name inum --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index inum\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n./dsconfig create-local-db-index --backend-name inumDB --type generic --index-name inum --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name inumDB --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=site --index inum\n./dsconfig set-backend-prop --backend-name inumDB --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nAdd an index for the uniqueIdentifier attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name uniqueIdentifier --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index uniqueIdentifier\n./rebuild-index --baseDN o=site --index uniqueIdentifier\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nAdd an index for the oxId attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name oxId --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index oxId\n./rebuild-index --baseDN o=site --index oxId\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nAdd an index for the lastModifiedTime attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name lastModifiedTime --set index-type:ordering --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index lastModifiedTime\n./rebuild-index --baseDN o=site --index lastModifiedTime\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nAdd an index for oxAuthExpiration attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name oxAuthExpiration --set index-type:ordering --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index oxAuthExpiration\n./rebuild-index --baseDN o=site --index oxAuthExpiration\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nDetermine the current status of indexes.\n\n\n./dbtest list-index-status --backendID userRoot -b o=gluu\n\n\n\nReplication\n\n\nThe Gluu Server was designed to take advantage of LDAP replication. Each\nserver has its own special configuration for replication. Below are some\npointers to the respective platform's documentation on how to manage\nreplication.\n\n\nOpenDJ\n\n\nManaging Replication - OpenDJ Admin Guide\n\n\nOpenLDAP\n\n\nReplication\n\n\n389DS\n\n\nManaging Replication",
            "title": "LDAP"
        },
        {
            "location": "/gluu-defaults/ldap/#ldap-namespace",
            "text": "The LDAP Namespace, or Directory Information Tree (DIT) structure, is\nthe convention for naming entries in LDAP so that they form a\nhierarchical tree structure.  In general, the Gluu Server tries to keep the data pretty flat. But at\ntimes, we use the namespace to store information that is relative to a\ncertain entry.  There are two root namespaces in the Gluu Server:  o=gluu  and  o=site .\nThe  o=gluu  namespace is used to store all the important configuration\nand entity data. The  o=site  DIT is used only when identities are being\nsynchronized from an external LDAP server using the Gluu Server Cache\nRefresh feature.  The following table has a list of all the major branches of the tree\nunder  o=gluu :     base DN  Description      o=gluu  organization entry, IPv6 style id by default    @!.....  Basic info with inum    ou=clients  OAuth2 client entities    ou=federation  OAuth2 federation metadata    ou=groups  Group entities    ou=hosts  Hosts    ou=oxasimba  Asimba configuration is stored in this branch    ou=oxProx  oxProx configuration data    ou=people  User entities    ou=push  Mobile device metadata used by oxPush    ou=scopes  Oauth2 scope entities    ou=scripts  Custom scripts are stored in this branch    ou=session  oxAuth Session data (if persistent sessions are enabled)    ou=u2f  The U2F authentication requests, registration requests and registered devices are stored in this branch    ou=uma  UMA policies, scopes, and resource sets",
            "title": "LDAP Namespace"
        },
        {
            "location": "/gluu-defaults/ldap/#ldap-configuration",
            "text": "This section has information about how the Gluu Server uses LDAP, and\nother LDAP recommendations.  The Gluu Server uses LDAP for persistence to store information about\nthings like configuration, user claims, and client claims. Currently\nGluu ships with a forked version of OpenDJ. However, we hope to bolster\nsupport for OpenLDAP and 389DS. If you are an LDAP guru please help us\nby contributing documentation details!",
            "title": "LDAP Configuration"
        },
        {
            "location": "/gluu-defaults/ldap/#indexing",
            "text": "All databases need proper indexing to function. This is particularly\ntrue for LDAP servers. There should never be any  sub  or  one  scoped\nsearches to the LDAP server that are not properly indexed. Because\nindexing is implementation specific, the following guidelines should\nprovide a good starting point. The LDAP server logs should be\nperiodically analyzed to identify un-indexed searches. The exact\nindexing requirements may vary based on custom attributes, and custom\nauthentication and authorization requirements.",
            "title": "Indexing"
        },
        {
            "location": "/gluu-defaults/ldap/#opendj-indexing",
            "text": "Indexing Attribute Values",
            "title": "OpenDJ Indexing"
        },
        {
            "location": "/gluu-defaults/ldap/#389ds-indexing",
            "text": "Indexing Architecture",
            "title": "389DS Indexing"
        },
        {
            "location": "/gluu-defaults/ldap/#openldap-indexing",
            "text": "OpenLDAP Tuning  Recommended Indexes for OX  Indexed attributes in OpenDS on seed.gluu.org server:  | cn               | equality, substring | default | \n| --               | ------------------- | ------- | \n| entryUUID        | equality            | default | \n| givenName        | equality, substring | default | \n| mail             | equality, substring | default | \n| member           | equality            | default | \n| sn               | equality, substring | default | \n| telephoneNumber  | equality, substring | default | \n| uid              | equality            | default | \n| uniqueMember     | equality            | default | \n| uniqueIdentifier | equality            | Gluu    | \n| inum             | equality            | Gluu    | \n| oxid             | equality            | Gluu    | \n| lastModifiedTime | ordering            | Gluu    | \n| oxAuthExpiration | ordering            | Gluu    |  For o=site cache refresh will search on the 'Primary Key'. So it will\nnot be possible for us to know which attributes need to be indexed until\nconfiguration time.",
            "title": "OpenLDAP Indexing"
        },
        {
            "location": "/gluu-defaults/ldap/#configuring-ldap-indexing-to-improve-ox-applications-performance",
            "text": "In order to keep optimal server load it is necessary to configure\nindexing for OpenDJ LDAP server. OpenDJ support these index types:\napproximate, equality, ordering, presence, substring, virtual list view,\nextensible matching rule. There is more information about index types in OpenDJ Admin\nGuide .\nIt is possible to add them for any LDAP attribute. OpenDJ will use them\nduring searching result entries.  Default OpenDJ installation has few preconfigured indexes for these\nattributes: aci, cn, dn2id, ds-sync-conflict, ds-sync-hist, entryUUID,\ngivenName, id2children, id2subtree, mail, member, objectClass, sn,\ntelephone\u00adNumber, uid, unique\u00adMember. This table contains definition of\nthese indexes:  default\nIndexes .",
            "title": "Configuring LDAP indexing to improve OX applications performance"
        },
        {
            "location": "/gluu-defaults/ldap/#oxauth-filters",
            "text": "oxAuth has a few parts which allows custom LDAP filters:  `<auth-filters-enabled>`true`</auth-filters-enabled>`\n`<auth-filters>`\n    `<auth-filter>`\n        `<!--filter>`(&amp;(associatedClient=*{0}*)(myPinCode={1}))`</filter-->`\n        `<filter>`(&amp;(mail=*{0}*)(inum={1}))`</filter>`\n        `<!-- If bind=true oxAuth should try to bind to entry which it found by filter specified above -->`\n        `<bind>`false`</bind>`\n        `<base-dn>`o=gluu`</base-dn>`\n    `</auth-filter>`\n\n    `<auth-filter>`\n        `<filter>`uid={0}`</filter>`\n        `<bind>`true`</bind>`\n        `<bind-password-attribute>`pwd`</bind-password-attribute>`\n        `<base-dn>`o=gluu`</base-dn>`\n    `</auth-filter>`\n`</auth-filters>`\n\n`<!-- Custom client filters to be able identify client by custom id. -->`\n`<client-auth-filters-enabled>`true`</client-auth-filters-enabled>`\n`<client-auth-filters>`\n    `<client-auth-filter>`\n        `<filter>`myCustomAttr1={0}`</filter>`\n        `<base-dn>`ou=clients,o=@!1111,o=gluu`</base-dn>`\n    `</client-auth-filter>`\n    `<!--client-auth-filter>`\n        `<filter>`(&amp;(myCustomAttr1={0})(myCustomAttr2={0}))`</filter>`\n        `<base-dn>`ou=clients,o=@!1111,o=gluu`</base-dn>`\n    `</client-auth-filter-->`\n`</client-auth-filters>`  oxAuth uses them to find clients. Hence it is necessary to configure\nindexing for these filters. If there are no indexes for the filter\nattributes OpenDJ might use an unindexed search.",
            "title": "oxAuth filters"
        },
        {
            "location": "/gluu-defaults/ldap/#determining-what-needs-indexing",
            "text": "OpenDJ has built in functionality to help the admin find unindexed\nsearches. More information about this is available in the OpenDJ Admin\nGuide  Determining What Needs\nIndexing .",
            "title": "Determining what needs indexing"
        },
        {
            "location": "/gluu-defaults/ldap/#sample-commands-to-add-indexes",
            "text": "Add an index for the inum attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name inum --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index inum\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n./dsconfig create-local-db-index --backend-name inumDB --type generic --index-name inum --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name inumDB --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=site --index inum\n./dsconfig set-backend-prop --backend-name inumDB --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Add an index for the uniqueIdentifier attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name uniqueIdentifier --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index uniqueIdentifier\n./rebuild-index --baseDN o=site --index uniqueIdentifier\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Add an index for the oxId attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name oxId --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index oxId\n./rebuild-index --baseDN o=site --index oxId\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Add an index for the lastModifiedTime attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name lastModifiedTime --set index-type:ordering --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index lastModifiedTime\n./rebuild-index --baseDN o=site --index lastModifiedTime\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Add an index for oxAuthExpiration attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name oxAuthExpiration --set index-type:ordering --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index oxAuthExpiration\n./rebuild-index --baseDN o=site --index oxAuthExpiration\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Determine the current status of indexes.  ./dbtest list-index-status --backendID userRoot -b o=gluu",
            "title": "Sample commands to add indexes"
        },
        {
            "location": "/gluu-defaults/ldap/#replication",
            "text": "The Gluu Server was designed to take advantage of LDAP replication. Each\nserver has its own special configuration for replication. Below are some\npointers to the respective platform's documentation on how to manage\nreplication.",
            "title": "Replication"
        },
        {
            "location": "/gluu-defaults/ldap/#opendj",
            "text": "Managing Replication - OpenDJ Admin Guide",
            "title": "OpenDJ"
        },
        {
            "location": "/gluu-defaults/ldap/#openldap",
            "text": "Replication",
            "title": "OpenLDAP"
        },
        {
            "location": "/gluu-defaults/ldap/#389ds",
            "text": "Managing Replication",
            "title": "389DS"
        },
        {
            "location": "/gluu-defaults/logout/",
            "text": "Logout From Gluu Server\n\n\nOpenID Connect SLO\n\n\nSAML Logout\n\n\nAuthentication Script\n\n\n\n\n\n\n\n\n\n\nLogout From Gluu Server\n\n\nGluu Server offers single-logout(SLO) service for OpenID Connect\n\n\nOpenID Connect SLO\n\n\nGluu Server uses OpenID Connect to end session for logout. Usually a logout link is provided to the connected SP and the session is killed inside the IdP. When using the OpenId Connect Logout, it is recommened to test the \nfront channel logout\n. In the \nfront channel logout\n the browser receives a page with the list of application logout urls each within an iframe. This causes the browser to call each applicaiton logout individually and finally calling the OpenID Connect end-session endpoint via \njavascript\n. Please see the \nOpenID Connect Frontchannel Logout Specifications\n for more informaiton.\n\n\n\n\nThe logout URL is located at \nhttps://<hostname of Gluu Server>/identity/authentication/finishlogout\n\n\n\n\nSAML Logout\n\n\nAlthough there is a SLO available for Shibboleth, it is not supported in Gluu Server because of its instabilities. Please take a look at \nthis page\n for more information.\n\n\n\n\nThe logout URI for SAML SP is \nhttps://<hostname of Gluu Server>/idp/logout.jsp\n Calling this URL within Gluu Server kills the session inside Gluu Server.\n\n\n\n\nAuthentication Script\n\n\nIt is possible to use Custom Authentication Script to call individual logout methods for both SAML and OpenID Connect and log out of the desired SP/SPs when the user logs out of the Gluu Server. Please see the \nCustom Script Guide\n to start writing your own custom script.",
            "title": "Logout"
        },
        {
            "location": "/gluu-defaults/logout/#logout-from-gluu-server",
            "text": "Gluu Server offers single-logout(SLO) service for OpenID Connect",
            "title": "Logout From Gluu Server"
        },
        {
            "location": "/gluu-defaults/logout/#openid-connect-slo",
            "text": "Gluu Server uses OpenID Connect to end session for logout. Usually a logout link is provided to the connected SP and the session is killed inside the IdP. When using the OpenId Connect Logout, it is recommened to test the  front channel logout . In the  front channel logout  the browser receives a page with the list of application logout urls each within an iframe. This causes the browser to call each applicaiton logout individually and finally calling the OpenID Connect end-session endpoint via  javascript . Please see the  OpenID Connect Frontchannel Logout Specifications  for more informaiton.   The logout URL is located at  https://<hostname of Gluu Server>/identity/authentication/finishlogout",
            "title": "OpenID Connect SLO"
        },
        {
            "location": "/gluu-defaults/logout/#saml-logout",
            "text": "Although there is a SLO available for Shibboleth, it is not supported in Gluu Server because of its instabilities. Please take a look at  this page  for more information.   The logout URI for SAML SP is  https://<hostname of Gluu Server>/idp/logout.jsp  Calling this URL within Gluu Server kills the session inside Gluu Server.",
            "title": "SAML Logout"
        },
        {
            "location": "/gluu-defaults/logout/#authentication-script",
            "text": "It is possible to use Custom Authentication Script to call individual logout methods for both SAML and OpenID Connect and log out of the desired SP/SPs when the user logs out of the Gluu Server. Please see the  Custom Script Guide  to start writing your own custom script.",
            "title": "Authentication Script"
        },
        {
            "location": "/gluu-defaults/schema/",
            "text": "Schema\n\n\nObject class gluuAppliance\n\n\nObject class gluuAttribute\n\n\nObject class gluuGroup\n\n\nObject class gluuInumMap\n\n\nObject class gluuInvoice\n\n\nObject class gluuOrganization\n\n\nObject class gluuPasswordResetRequest\n\n\nObject class gluuPerson\n\n\nObject class gluuSAMLconfig\n\n\nObject class oxAuthClient\n\n\nObject class oxAuthConfiguration\n\n\nObject class oxAuthCustomScope\n\n\nObject class oxAuthFederationMetadata\n\n\nObject class oxAuthFederationOP\n\n\nObject class oxAuthFederationRP\n\n\nObject class oxAuthFederationRequest\n\n\nObject class oxAuthFederationTrust\n\n\nObject class oxAuthSessionId\n\n\nObject class oxAuthToken\n\n\nObject class oxAuthUmaPolicy\n\n\nObject class oxAuthUmaRPT\n\n\nObject class oxAuthUmaResourceSet\n\n\nObject class oxAuthUmaResourceSetPermission\n\n\nObject class oxAuthUmaScopeDescription\n\n\nObject class oxEntry\n\n\nObject class oxLink\n\n\nObject class oxLiteralNode\n\n\nObject class oxNode\n\n\nObject class oxProxAccessToken\n\n\nObject class oxProxClient\n\n\nObject class oxProxConfiguration\n\n\nObject class oxProxOp\n\n\nObject class oxPushApplication\n\n\nObject class oxPushDevice\n\n\nObject class oxScript\n\n\nObject class oxTrustConfiguration\n\n\nObject class vdDirectoryView\n\n\nObject class vdapcontainer\n\n\nObject class vdlabel\n\n\n\n\n\n\n\n\n\n\nSchema\n\n\nBelow are the schemes for OpenDJ and OpenLDAP. The OpenDJ schema should\nwork for 389DS, too:\n\n\n\n\nOpenDJ\n\n\nOpenLDAP\n\n\n\n\nObject class gluuAppliance\n\n\n\n\nDescription\n \n\n\nblowfishPassword\n Blowfish crypted text\n\n\nc\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\ngluuAdditionalBandwidth\n Track bandwidth requirements for the Gluu Server instance\n\n\ngluuAdditionalMemory\n Track additional memory requirements for the Gluu Server instance\n\n\ngluuApplianceDnsServer\n Persist the DNS server that should be used for the Gluu Server instance\n\n\ngluuAppliancePollingInterval\n Set the frequency of the health status update of the Gluu Server\n\n\ngluuBandwidthRX\n Track data received by the Gluu Server\n\n\ngluuBandwidthTX\n Track data sent by the Gluu Server\n\n\ngluuBillingEmail\n Billing alert email address\n\n\ngluuCentreonEmail\n TODO - in use? Email address to send monitoring alerts\n\n\ngluuDSstatus\n Monitor health of the instance LDAP server.\n\n\ngluuFederationHostingEnabled\n oxTrust flag for the federation feature. Values enabled or disabled\n\n\ngluuFreeDiskSpace\n Monitor free disk space on the Gluu Server instance\n\n\ngluuFreeMemory\n Monitor free memory on the Gluu Server instance\n\n\ngluuFreeSwap\n Monitor swap space on the Gluu Server instance\n\n\ngluuGroupCount\n Monitor the number of groups. TODO - Remove?\n\n\ngluuHTTPstatus\n Monitor HTTP availability of the Gluu Server instance\n\n\ngluuHostname\n The hostname of the Gluu Server instance\n\n\ngluuInvoiceNo\n TODO - in use?\n\n\ngluuIpAddress\n IP address of the Gluu Server instance\n\n\ngluuJiraEmail\n TODO - in use? Jira alert email address\n\n\ngluuLastUpdate\n Monitors last time the server was able to connect to the monitoring system\n\n\ngluuLifeRay\n None\n\n\ngluuLoadAvg\n Monitor the average CPU load for a Gluu Server instance\n\n\ngluuManageIdentityPermission\n TODO - in use?\n\n\ngluuManager\n Used to specify if a person has the manager role\n\n\ngluuMaxLogSize\n Maximum log file size\n\n\ngluuOrgProfileMgt\n enable or disable profile management feature in oxTrust\n\n\ngluuPaidUntil\n TODO - in use?\n\n\ngluuPaymentProcessorTimestamp\n TODO - in use?\n\n\ngluuPersonCount\n Monitor the number of people in the LDAP server for a Gluu Server instance\n\n\ngluuPrivacyEmail\n Privacy alert email address used by oxTrust\n\n\ngluuPrivate\n TODO - in use?\n\n\ngluuPublishIdpMetadata\n Gluu Server flag to publish the IDP metadata via the web server\n\n\ngluuResizeInitiated\n TODO - in use?\n\n\ngluuSPTR\n TODO - in use?\n\n\ngluuScimEnabled\n oxTrust SCIM feature - enabled or disabled\n\n\ngluuShibAssertionsIssued\n Monitors the activity of Gluu Server Shibboleth IDP\n\n\ngluuShibFailedAuth\n Monitors failed login attempts on Gluu Server Shibboleth IDP\n\n\ngluuShibSecurityEvents\n Monitors security events on Gluu Server Shibboleth IDP\n\n\ngluuShibSuccessfulAuths\n Monitors login attempts on Gluu Server Shibboleth IDP\n\n\ngluuSmtpFromEmailAddress\n SMTP From email address\n\n\ngluuSmtpFromName\n SMTP From name\n\n\ngluuSmtpHost\n SMTP host\n\n\ngluuSmtpPassword\n SMTP user password\n\n\ngluuSmtpPort\n SMTP port\n\n\ngluuSmtpRequiresAuthentication\n SMTP requires authentication\n\n\ngluuSmtpRequiresSsl\n SMTP requires SSL\n\n\ngluuSmtpUserName\n SMTP user name\n\n\ngluuSslExpiry\n SAML trust relationship configuration\n\n\ngluuStatus\n Status of the entry, used by many object classes\n\n\ngluuSvnEmail\n SVN alert email address\n\n\ngluuSystemUptime\n Monitors how long the Gluu Server instance has been running\n\n\ngluuTargetRAM\n Monitors total available RAM on the Gluu Server instance\n\n\ngluuUrl\n Gluu Server instance uri\n\n\ngluuVDSenabled\n oxTrust VDS enabled or disabled\n\n\ngluuVDSstatus\n Gluu VDS configuration\n\n\ngluuVdsCacheRefreshEnabled\n None\n\n\ngluuVdsCacheRefreshLastUpdate\n None\n\n\ngluuVdsCacheRefreshLastUpdateCount\n None\n\n\ngluuVdsCacheRefreshPollingInterval\n None\n\n\ngluuVdsCacheRefreshProblemCount\n None\n\n\ngluuWhitePagesEnabled\n None\n\n\niname\n None\n\n\ninum\n XRI i-number (iNum)\n\n\ninumFN\n XRI i-number (iNum) without punctuation\n\n\no\n \n\n\noxAuthenticationLevel\n None\n\n\noxAuthenticationMode\n None\n\n\noxClusterType\n Type of the underlying clustering mechanism\n\n\noxClusteredServers\n List of the clustering partners of this server\n\n\noxIDPAuthentication\n Custom IDP authentication configuration\n\n\noxLogViewerConfig\n Log viewer configuration\n\n\noxMemcachedServerAddress\n Initialization string for memcached client\n\n\noxSmtpConfiguration\n SMTP configuration\n\n\noxTrustStoreCert\n oxPush device configuration\n\n\noxTrustStoreConf\n oxPush application configuration\n\n\npasswordResetAllowed\n Is password reset mechanics allowed\n\n\nsoftwareVersion\n None\n\n\nuserPassword\n \n\n\noxTrustCacheRefreshServerIpAddress\n None\n\n\n\n\nObject class gluuAttribute\n\n\n\n\nDescription\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\ngluuAttributeEditType\n Specify in oxTrust who can update an attribute - admin or user\n\n\ngluuAttributeName\n Specify an identifier for an attribute. May be multi-value where an attribute has two names, like givenName and first-name\n\n\ngluuAttributeOrigin\n Specify the person object class associated with the attribute, used for display purposes in oxTrust\n\n\ngluuAttributeSystemEditType\n TODO - still required?\n\n\ngluuAttributeType\n Data type of attribute. Values can be string, photo, numeric, and date\n\n\ngluuAttributeUsageType\n TODO - Usage? Value can be OpenID\n\n\ngluuAttributeViewType\n Specify in oxTrust who can view an attribute -  admin or user\n\n\ngluuCategory\n TODO - in use? Used to group attributes together\n\n\ngluuSAML1URI\n SAML 1 uri of attribute\n\n\ngluuSAML2URI\n SAML 2 uri of attribute\n\n\ngluuStatus\n Status of the entry, used by many object classes\n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\nobjectClass\n \n\n\noxAttributeType\n NameId or attribute\n\n\noxMultivaluedAttribute\n None\n\n\noxNameIdType\n NameId type\n\n\noxSCIMCustomAttribute\n None\n\n\noxSourceAttribute\n Source attribute for this attribute\n\n\nseeAlso\n \n\n\nurn\n None\n\n\noxAuthClaimName\n Used by oxAuth in conjunction with gluuLdapAttributeName to map claims to attributes in LDAP.\n\n\n\n\nObject class gluuGroup\n\n\n\n\nDescription\n \n\n\nc\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\ngluuGroupType\n Type of group. Not used\n\n\ngluuGroupVisibility\n Group visibility. Not used\n\n\ngluuStatus\n Status of the entry, used by many object classes\n\n\niname\n None\n\n\ninum\n XRI i-number (iNum)\n\n\nmember\n \n\n\no\n \n\n\nowner\n \n\n\nseeAlso\n \n\n\n\n\nObject class gluuInumMap\n\n\n\n\nDescription\n \n\n\ngluuStatus\n Status of the entry, used by many object classes\n\n\ninum\n XRI i-number (iNum)\n\n\nprimaryKeyAttrName\n Primary key attribute name\n\n\nprimaryKeyValue\n Primary key value\n\n\nsecondaryKeyAttrName\n Secondary key attribute name\n\n\nsecondaryKeyValue\n Secondary key value\n\n\ntertiaryKeyAttrName\n Tertiary key attribute name\n\n\ntertiaryKeyValue\n Tertiary key value\n\n\n\n\nObject class gluuInvoice\n\n\n\n\nDescription\n \n\n\ngluuInvoiceAmount\n TODO - in use?\n\n\ngluuInvoiceDate\n TODO - in use?\n\n\ngluuInvoiceLineItemName\n TODO - in use?\n\n\ngluuInvoiceNumber\n TODO - in use?\n\n\ngluuInvoiceProductNumber\n TODO - in use?\n\n\ngluuInvoiceQuantity\n TODO - in use?\n\n\ngluuInvoiceStatus\n TODO - in use?\n\n\ninum\n XRI i-number\n\n\n\n\nObject class gluuOrganization\n\n\n\n\nDescription\n \n\n\nc\n \n\n\ncounty\n ISO 3166-1 Alpha-2 country code\n\n\ndeployedAppliances\n Track which appliances are deployed at an organization\n\n\ndescription\n \n\n\ndisplayName\n \n\n\ngluuAddPersonCapability\n Organizational attribute to control whether new users can be added via the oxTrust GUI\n\n\ngluuAdditionalUsers\n TODO: use unclear\n\n\ngluuApplianceUpdateRequestList\n Used by the Gluu Server to request an update\n\n\ngluuCustomMessage\n oxTrust custom welcome message\n\n\ngluuFaviconImage\n TODO - Stores uri of Gluu Server favicon\n\n\ngluuFederationHostingEnabled\n oxTrust flag for the federation feature. Values enabled or disabled\n\n\ngluuInvoiceNo\n TODO - in use?\n\n\ngluuLogoImage\n Logo used by oxTrust for default look and feel\n\n\ngluuManageIdentityPermission\n TODO - in use?\n\n\ngluuManager\n Used to specify if a person has the manager role\n\n\ngluuManagerGroup\n Used in organization entry to specifies the DN of the group that has admin privileges in oxTrust\n\n\ngluuOrgProfileMgt\n enable or disable profile management feature in oxTrust\n\n\ngluuOrgShortName\n Short description, as few letters as possible, no spaces\n\n\ngluuOwnerGroup\n Deprecated. Use gluuManagerGroup, instead.\n\n\ngluuPaidUntil\n TODO - in use?\n\n\ngluuPaymentProcessorTimestamp\n TODO - in use?\n\n\ngluuProStoresUser\n TODO - remove\n\n\ngluuStatus\n Status of the entry, used by many object classes\n\n\ngluuTempFaviconImage\n Store location for upload of the Gluu Server favicon\n\n\ngluuThemeColor\n oxTrust login page configuration\n\n\ngluuWhitePagesEnabled\n None\n\n\niname\n None\n\n\ninum\n XRI i-number (iNum)\n\n\nl\n \n\n\nmail\n \n\n\nmemberOf\n None\n\n\nnonProfit\n TODO - in use?\n\n\no\n \n\n\nobjectClass\n \n\n\noxCreationTimestamp\n Registration time\n\n\noxLinkLinktrack\n Linktrack link\n\n\noxLinktrackEnabled\n Is Linktrack API configured\n\n\noxLinktrackLogin\n Linktrack API login\n\n\noxLinktrackPassword\n Linktrack API password\n\n\noxRegistrationConfiguration\n Registration configuration\n\n\npostalCode\n \n\n\nproStoresToken\n None\n\n\nprostoresTimestamp\n None\n\n\nscimAuthMode\n SCIM authorization mode\n\n\nscimGroup\n SCIM group\n\n\nscimStatus\n SCIM status\n\n\nst\n \n\n\nstreet\n \n\n\ntelephoneNumber\n \n\n\ntitle\n \n\n\nuid\n \n\n\nuserPassword\n \n\n\n\n\nObject class gluuPasswordResetRequest\n\n\n\n\nDescription\n \n\n\ncreationDate\n Creation date used for password reset requests\n\n\noxGuid\n A random string to mark temporary tokens\n\n\npersonInum\n iNum of a person\n\n\n\n\nObject class gluuPerson\n\n\n\n\nDescription\n \n\n\nassociatedClient\n \n\n\nc\n \n\n\ndisplayName\n \n\n\ngivenName\n \n\n\ngluuManagedOrganizations\n Used to track the organizations a person is associated with\n\n\ngluuOptOuts\n White pages attributes restricted by person in oxTrust profile management\n\n\ngluuStatus\n Status of the entry, used by many object classes\n\n\ngluuWhitePagesListed\n Allow publication\n\n\niname\n None\n\n\ninum\n XRI i-number (iNum)\n\n\nmail\n \n\n\nmemberOf\n None\n\n\no\n \n\n\noxAuthPersistentJWT\n oxAuth persistent JWT\n\n\noxCreationTimestamp\n Registration time\n\n\noxExternalUid\n None\n\n\noxInviteCode\n Invite Code\n\n\noxLastLogonTime\n Last logon time\n\n\noxTrustActive\n None\n\n\noxTrustAddresses\n None\n\n\noxTrustEmail\n None\n\n\noxTrustEntitlements\n None\n\n\noxTrustExternalId\n None\n\n\noxTrustImsValue\n None\n\n\noxTrustMetaCreated\n None\n\n\noxTrustMetaLastModified\n None\n\n\noxTrustMetaLocation\n None\n\n\noxTrustMetaVersion\n None\n\n\noxTrustNameFormatted\n None\n\n\noxTrustPhoneValue\n None\n\n\noxTrustPhotos\n None\n\n\noxTrustProfileURL\n None\n\n\noxTrustRole\n None\n\n\noxTrustTitle\n None\n\n\noxTrustUserType\n None\n\n\noxTrusthonorificPrefix\n None\n\n\noxTrusthonorificSuffix\n None\n\n\noxTrustx509Certificate\n None\n\n\npersistentId\n Persistent id\n\n\nmiddleName\n Middle name(s)\n\n\nnickname\n Casual name of the end-user\n\n\npreferredUsername\n Shorthand name\n\n\nprofile\n Profile page uri of the person\n\n\npicture\n Profile picture uri of the person\n\n\nwebsite\n Web page or blog uri of the person\n\n\nemailVerified\n True if the email address of the person has been verified; otherwise false\n\n\ngender\n Gender of the person - either female or male\n\n\nbirthdate\n Birthday of the person, represented as an ISO 8601:2004 [ISO8601\u00e2\u20ac\u20182004] YYYY-MM-DD format\n\n\nzoneinfo\n time zone database representing the end-user\n\n\nlocale\n Locale of the person, represented as a BCP47 [RFC5646] language tag\n\n\nphoneNumberVerified\n True if the phone number of the person has been verified, otherwise false\n\n\naddress\n OpenID Connect formatted JSON object representing the address of the person\n\n\nupdatedAt\n Time the information of the person was last updated. Seconds from 1970-01-01T0:0:0Z\n\n\npreferredLanguage\n Preferred language of the person\n\n\nrole\n Role\n\n\nsecretAnswer\n Secret answer\n\n\nsecretQuestion\n Secret question\n\n\nseeAlso\n \n\n\nsn\n \n\n\ncn\n \n\n\ntransientId\n Transient id\n\n\nuid\n User id of the person\n\n\nuserPassword\n Password of the person\n\n\n\n\nObject class gluuSAMLconfig\n\n\n\n\nDescription\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\nfederationRules\n Track rules for the federation in Gluu SAML configuration. Deprecated as multi-party federation management should move to Jagger\n\n\ngluuContainerFederation\n SAML trust relationship federation info\n\n\ngluuEntityId\n Specifies SAML trust relationship entity id\n\n\ngluuIsFederation\n Used in oxTrust to specify if a SAML trust relationship is a federation. It could also be a website\n\n\ngluuProfileConfiguration\n SAML trust relationship attribute\n\n\ngluuReleasedAttribute\n oxTrust reference for the DN of the released attribute\n\n\ngluuRulesAccepted\n TODO - use unknown for Gluu SAML configuration\n\n\ngluuSAMLMetaDataFilter\n Metadata filter in SAML trust relationship\n\n\ngluuSAMLTrustEngine\n SAML trust relationship configuration\n\n\ngluuSAMLmaxRefreshDelay\n SAML trust relationship refresh time\n\n\ngluuSAMLspMetaDataFN\n SAML Trust Relationship file location of metadata\n\n\ngluuSAMLspMetaDataSourceType\n SAML Trust Relationship SP metadata type - file, uri, federation\n\n\ngluuSAMLspMetaDataURL\n SAML Trust Relationship uri location of metadata\n\n\ngluuSpecificRelyingPartyConfig\n SAML Trust Relationship configuration\n\n\ngluuStatus\n Status of the entry, used by many object classes\n\n\ngluuTrustContact\n oxTrust login page configuration\n\n\ngluuTrustDeconstruction\n TODO - in use?\n\n\ngluuValidationLog\n None\n\n\ngluuValidationStatus\n None\n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\no\n \n\n\nobjectClass\n \n\n\noxAuthPostLogoutRedirectURI\n oxAuth post logout redirect uri\n\n\nurl\n None\n\n\n\n\nObject class oxAuthClient\n\n\n\n\nDescription\n \n\n\nassociatedPerson\n Reference the DN of a person.\n\n\ndisplayName\n \n\n\ninum\n XRI i-number (iNum)\n\n\noxAuthAppType\n oxAuth app type\n\n\noxAuthClientIdIssuedAt\n oxAuth client ID issued at\n\n\noxAuthClientSecret\n oxAuth client secret\n\n\noxAuthClientSecretExpiresAt\n the date the oxAuth client secret expires\n\n\noxAuthClientURI\n oxAuth client uri\n\n\noxAuthClientUserGroup\n oxAuth client user group\n\n\noxAuthContact\n oxAuth contact\n\n\noxAuthDefaultAcrValues\n oxAuth default ACR values\n\n\noxAuthDefaultMaxAge\n oxAuth default maximum age\n\n\noxAuthFederationId\n oxAuth Federation ID attribute\n\n\noxAuthFederationMetadataURI\n oxAuth federation metadata uri attribute\n\n\noxAuthGrantType\n oxAuth Grant type\n\n\noxAuthIdTokenEncryptedResponseAlg\n oxAuth ID token encrypted response algorithm\n\n\noxAuthIdTokenEncryptedResponseEnc\n oxAuth ID token encrypted response encoding\n\n\noxAuthIdTokenSignedResponseAlg\n oxAuth ID token signed response algorithm\n\n\noxAuthInitiateLoginURI\n oxAuth initiate login uri\n\n\noxAuthJwksURI\n uri for the oxAuth JWKs file\n\n\noxAuthLogoURI\n uri for the oxAuth logo file\n\n\noxAuthPolicyURI\n uri for the oxAuth policy\n\n\noxAuthPostLogoutRedirectURI\n uri for the oxAuth post logout redirect\n\n\noxAuthRedirectURI\n uri for the oxAuth redirect\n\n\noxAuthRegistrationAccessToken\n oxAuth registration access token\n\n\noxAuthRequestObjectSigningAlg\n oxAuth request object signing algorithm\n\n\noxAuthRequestURI\n oxAuth request uri\n\n\noxAuthRequireAuthTime\n oxAuth require authentication time\n\n\noxAuthResponseType\n oxAuth response type\n\n\noxAuthScope\n oxAuth attribute scope\n\n\noxAuthSectorIdentifierURI\n oxAuth sector identifier uri\n\n\noxAuthSignedResponseAlg\n oxAuth signed response algorithm\n\n\noxAuthSubjectType\n oxAuth subject type\n\n\noxAuthTokenEndpointAuthMethod\n oxAuth token endpoint authentication method\n\n\noxAuthTosURI\n oxAuth type of service uri\n\n\noxAuthTrustedClient\n oxAuth trusted client\n\n\noxAuthUserInfoEncryptedResponseAlg\n oxAuth user info encrypted response algorithm\n\n\noxAuthUserInfoEncryptedResponseEnc\n oxAuth user info encrypted response encoding\n\n\noxLastAccessTime\n Last access time\n\n\noxLastLogonTime\n Last logon time\n\n\n\n\nObject class oxAuthConfiguration\n\n\n\n\nDescription\n \n\n\nou\n \n\n\noxAuthConfCustomAuthMethod\n Custom authentication method\n\n\noxAuthConfDynamic\n oxAuth dynamic configuration\n\n\noxAuthConfErrors\n oxAuth errors configuration\n\n\noxAuthConfIdPythonScript\n Custom ID generation\n\n\noxAuthConfLdapAuth\n LDAP authentication configuration\n\n\noxAuthConfStatic\n oxAuth static configuration\n\n\noxAuthConfWebKeys\n oxAuth web keys configuration\n\n\n\n\nObject class oxAuthCustomScope\n\n\n\n\nDescription\n \n\n\ndefaultScope\n Track the default scope for an custom OAuth2 scope\n\n\ndescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number (iNum)\n\n\noxAuthClaim\n oxAuth attribute claim\n\n\n\n\nObject class oxAuthFederationMetadata\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number (iNum)\n\n\noxAuthFederationMetadataIntervalCheck\n oxAuth Federation metadata interval check attribute\n\n\noxAuthFederationOP\n oxAuth Federation OP attribute\n\n\noxAuthFederationRP\n oxAuth Federation RP attribute\n\n\noxAuthRedirectURI\n oxAuth Redirect uri\n\n\n\n\nObject class oxAuthFederationOP\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthFederationOpDomain\n oxAuth Federation OP domain attribute\n\n\noxAuthFederationOpId\n oxAuth Federation OP ID attribute\n\n\noxAuthX509PEM\n oxAuth x509 in PEM format\n\n\noxAuthX509URL\n oxAuth x509 uri\n\n\n\n\nObject class oxAuthFederationRP\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number (iNum)\n\n\noxAuthRedirectURI\n oxAuth redirect uri\n\n\noxAuthX509PEM\n oxAuth x509 in PEM format\n\n\noxAuthX509URL\n oxAuth x509 uri\n\n\n\n\nObject class oxAuthFederationRequest\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number (iNum)\n\n\noxAuthFederationOpDomain\n oxAuth Federation OP domain attribute\n\n\noxAuthFederationOpId\n oxAuth Federation OP ID attribute\n\n\noxAuthFederationRequestType\n oxAuth Federation request type attribute\n\n\noxAuthRedirectURI\n oxAuth redirect uri\n\n\n\n\nObject class oxAuthFederationTrust\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthFederationId\n oxAuth Federation ID attribute\n\n\noxAuthFederationMetadataURI\n oxAuth Federation metadata uri attribute\n\n\noxAuthFederationTrustStatus\n oxAuth Federation trust status attribute\n\n\noxAuthRedirectURI\n oxAuth redirect uri\n\n\noxAuthReleasedScope\n oxAuth released scope attribute\n\n\noxAuthSkipAuthorization\n oxAuth skip authorization attribute\n\n\n\n\nObject class oxAuthSessionId\n\n\n\n\nDescription\n \n\n\nlastModifiedTime\n timestamp of the last modification\n\n\noxAuthAuthenticationTime\n oxAuth authentication time\n\n\noxAuthPermissionGranted\n oxAuth permission granted\n\n\noxAuthPermissionGrantedMap\n oxAuth permission granted map\n\n\noxAuthUserDN\n oxAuth user DN\n\n\nuniqueIdentifier\n an unique identifier for this object\n\n\n\n\nObject class oxAuthToken\n\n\n\n\nDescription\n \n\n\ncreateTimestamp\n \n\n\noxAuthAuthenticationTime\n oxAuth authentication time\n\n\noxAuthAuthorizationCode\n oxAuth authorization code\n\n\noxAuthCreation\n oxAuth creation\n\n\noxAuthExpiration\n oxAuth expiration\n\n\noxAuthGrantId\n oxAuth grant id\n\n\noxAuthGrantType\n oxAuth grant type\n\n\noxAuthJwtRequest\n oxAuth JWT request\n\n\noxAuthNonce\n oxAuth nonce\n\n\noxAuthScope\n oxAuth attribute scope\n\n\noxAuthTokenCode\n oxAuth token code\n\n\noxAuthTokenType\n oxAuth token type\n\n\noxAuthUserId\n oxAuth user id\n\n\noxAuthenticationLevel\n None\n\n\noxAuthenticationMode\n None\n\n\nuniqueIdentifier\n \n\n\n\n\nObject class oxAuthUmaPolicy\n\n\n\n\nDescription\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number (iNum)\n\n\noxAuthUmaScope\n uri reference of scope descriptor\n\n\noxPolicyScript\n ox policy script\n\n\nprogrammingLanguage\n programming language\n\n\n\n\nObject class oxAuthUmaRPT\n\n\n\n\nDescription\n \n\n\noxAmHost\n AM host\n\n\noxAuthAuthenticationTime\n oxAuth authentication time\n\n\noxAuthClientId\n oxAuth client ID\n\n\noxAuthCreation\n oxAuth creation\n\n\noxAuthExpiration\n oxAuth expiration\n\n\noxAuthTokenCode\n oxAuth token code\n\n\noxAuthUserId\n oxAuth user ID\n\n\noxUmaPermission\n ox UMA permission\n\n\nuniqueIdentifier\n the unique identifier that is in use\n\n\n\n\nObject class oxAuthUmaResourceSet\n\n\n\n\nDescription\n \n\n\ndisplayName\n (user) name that appears on the display\n\n\ninum\n XRI i-number (iNum)\n\n\nowner\n \n\n\noxAssociatedClient\n Associate the DN of an OAuth2 client with a person or UMA resource set\n\n\noxAuthUmaScope\n uri reference of scope descriptor\n\n\noxFaviconImage\n uri for the favicon\n\n\noxGroup\n User group\n\n\noxId\n oxAuth identifier\n\n\noxResource\n Host path\n\n\noxRevision\n Revision number\n\n\noxType\n ox type\n\n\n\n\nObject class oxAuthUmaResourceSetPermission\n\n\n\n\nDescription\n \n\n\noxAmHost\n AM host\n\n\noxAuthExpiration\n oxAuth expiration\n\n\noxAuthUmaScope\n uri reference of scope descriptor\n\n\noxConfigurationCode\n ox configuration code\n\n\noxHost\n ox host\n\n\noxResourceSetId\n ox resource set id\n\n\noxTicket\n ox ticket\n\n\n\n\nObject class oxAuthUmaScopeDescription\n\n\n\n\nDescription\n \n\n\ndisplayName\n (user) name that appears on the display\n\n\ninum\n XRI i-number (iNum)\n\n\nowner\n \n\n\noxFaviconImage\n uri for the favicon\n\n\noxIconUrl\n uri for the ox icon\n\n\noxId\n ox identifier\n\n\noxPolicyRule\n ox policy rule\n\n\noxRevision\n ox Revision\n\n\noxType\n ox type\n\n\noxUrl\n ox uri\n\n\n\n\nObject class oxEntry\n\n\n\n\nDescription\n \n\n\ndisplayName\n (user) name that appears on the display\n\n\niname\n None\n\n\ninum\n XRI i-number (iNum)\n\n\n\n\nObject class oxLink\n\n\n\n\nDescription\n \n\n\ndescription\n oxLink description\n\n\noxGuid\n A random string to mark temporary ox tokens\n\n\noxLinkCreator\n ox link creator\n\n\noxLinkExpirationDate\n ox Link expiration date\n\n\noxLinkLinktrack\n ox linktrack link\n\n\noxLinkModerated\n is the ox link moderated?\n\n\noxLinkModerators\n ox link moderators\n\n\noxLinkPending\n pending ox registrations\n\n\n\n\nObject class oxLiteralNode\n\n\n\n\nDescription\n \n\n\nliteralBinaryValue\n ox literal binary value\n\n\nliteralValue\n ox literal value\n\n\norganizationalOwner\n ox organizational owner\n\n\nowner\n ox owner\n\n\ntargetRelationalXdiStatement\n ox TargetRelationalXdiStatement\n\n\nx\n ox XRI component\n\n\nxdiStatement\n ox XDI statement\n\n\nxri\n OX XRI address\n\n\n\n\nObject class oxNode\n\n\n\n\nDescription\n \n\n\norganizationalOwner\n ox organizational owner\n\n\nowner\n ox owner\n\n\nsourceRelationalXdiStatement\n ox source relational XDI statement\n\n\ntargetRelationalXdiStatement\n ox target relational XDI statement\n\n\nx\n ox XRI component\n\n\nxdiStatement\n ox XDI statement\n\n\nxri\n ox XRI address\n\n\n\n\nObject class oxProxAccessToken\n\n\n\n\nDescription\n \n\n\noxAuthCreation\n oxAuth creation\n\n\noxAuthExpiration\n oxAuth expiration\n\n\noxProxyAccessToken\n oxProxy access token\n\n\noxProxyClientId\n oxProxy client ID\n\n\n\n\nObject class oxProxClient\n\n\n\n\nDescription\n \n\n\ndisplayName\n (user) name that appears on the display\n\n\ninum\n XRI i-number (iNum)\n\n\noxProxyClaimMapping\n oxProxy claim mapping\n\n\noxProxyScope\n oxProxy scope\n\n\noxProxyToOpClientMapping\n oxProxy client mapping to op client\n\n\n\n\nObject class oxProxConfiguration\n\n\n\n\nDescription\n \n\n\nou\n \n\n\noxProxConf\n oxProxy Configuration\n\n\noxScriptDn\n script object DN\n\n\n\n\nObject class oxProxOp\n\n\n\n\nDescription\n \n\n\nc\n \n\n\ndisplayName\n (user) name that appears on the display\n\n\ninum\n XRI i-number (iNum)\n\n\nl\n \n\n\noxDomain\n ox domain\n\n\noxId\n ox identifier\n\n\noxX509PEM\n ox X.509 in PEM format\n\n\noxX509URL\n ox X.509 uri\n\n\n\n\nObject class oxPushApplication\n\n\n\n\nDescription\n \n\n\ndisplayName\n (user) name that appears on the display\n\n\noxId\n ox identifier\n\n\noxName\n ox name\n\n\noxPushApplicationConf\n oxPush application configuration\n\n\n\n\nObject class oxPushDevice\n\n\n\n\nDescription\n \n\n\noxAuthUserId\n oxAuth user ID\n\n\noxId\n ox identifier\n\n\noxPushApplication\n oxPush application DN\n\n\noxPushDeviceConf\n oxPush device configuration\n\n\noxType\n ox type\n\n\n\n\nObject class oxScript\n\n\n\n\nDescription\n \n\n\ninum\n XRI i-number (iNum)\n\n\noxScript\n Attribute that contains the script (python, java script)\n\n\noxScriptType\n Attribute that contains the script type (e.g. python, java script)\n\n\n\n\nObject class oxTrustConfiguration\n\n\n\n\nDescription\n \n\n\nou\n \n\n\noxTrustConfApplication\n oxTrust application configuration\n\n\n\n\nObject class vdDirectoryView\n\n\n\n\nDescription\n \n\n\no\n \n\n\n\n\nObject class vdapcontainer\n\n\n\n\nDescription\n \n\n\nou\n \n\n\n\n\nObject class vdlabel\n\n\n\n\nDescription\n \n\n\no",
            "title": "Schema"
        },
        {
            "location": "/gluu-defaults/schema/#schema",
            "text": "Below are the schemes for OpenDJ and OpenLDAP. The OpenDJ schema should\nwork for 389DS, too:   OpenDJ  OpenLDAP",
            "title": "Schema"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluuappliance",
            "text": "Description    blowfishPassword  Blowfish crypted text  c    description    displayName    gluuAdditionalBandwidth  Track bandwidth requirements for the Gluu Server instance  gluuAdditionalMemory  Track additional memory requirements for the Gluu Server instance  gluuApplianceDnsServer  Persist the DNS server that should be used for the Gluu Server instance  gluuAppliancePollingInterval  Set the frequency of the health status update of the Gluu Server  gluuBandwidthRX  Track data received by the Gluu Server  gluuBandwidthTX  Track data sent by the Gluu Server  gluuBillingEmail  Billing alert email address  gluuCentreonEmail  TODO - in use? Email address to send monitoring alerts  gluuDSstatus  Monitor health of the instance LDAP server.  gluuFederationHostingEnabled  oxTrust flag for the federation feature. Values enabled or disabled  gluuFreeDiskSpace  Monitor free disk space on the Gluu Server instance  gluuFreeMemory  Monitor free memory on the Gluu Server instance  gluuFreeSwap  Monitor swap space on the Gluu Server instance  gluuGroupCount  Monitor the number of groups. TODO - Remove?  gluuHTTPstatus  Monitor HTTP availability of the Gluu Server instance  gluuHostname  The hostname of the Gluu Server instance  gluuInvoiceNo  TODO - in use?  gluuIpAddress  IP address of the Gluu Server instance  gluuJiraEmail  TODO - in use? Jira alert email address  gluuLastUpdate  Monitors last time the server was able to connect to the monitoring system  gluuLifeRay  None  gluuLoadAvg  Monitor the average CPU load for a Gluu Server instance  gluuManageIdentityPermission  TODO - in use?  gluuManager  Used to specify if a person has the manager role  gluuMaxLogSize  Maximum log file size  gluuOrgProfileMgt  enable or disable profile management feature in oxTrust  gluuPaidUntil  TODO - in use?  gluuPaymentProcessorTimestamp  TODO - in use?  gluuPersonCount  Monitor the number of people in the LDAP server for a Gluu Server instance  gluuPrivacyEmail  Privacy alert email address used by oxTrust  gluuPrivate  TODO - in use?  gluuPublishIdpMetadata  Gluu Server flag to publish the IDP metadata via the web server  gluuResizeInitiated  TODO - in use?  gluuSPTR  TODO - in use?  gluuScimEnabled  oxTrust SCIM feature - enabled or disabled  gluuShibAssertionsIssued  Monitors the activity of Gluu Server Shibboleth IDP  gluuShibFailedAuth  Monitors failed login attempts on Gluu Server Shibboleth IDP  gluuShibSecurityEvents  Monitors security events on Gluu Server Shibboleth IDP  gluuShibSuccessfulAuths  Monitors login attempts on Gluu Server Shibboleth IDP  gluuSmtpFromEmailAddress  SMTP From email address  gluuSmtpFromName  SMTP From name  gluuSmtpHost  SMTP host  gluuSmtpPassword  SMTP user password  gluuSmtpPort  SMTP port  gluuSmtpRequiresAuthentication  SMTP requires authentication  gluuSmtpRequiresSsl  SMTP requires SSL  gluuSmtpUserName  SMTP user name  gluuSslExpiry  SAML trust relationship configuration  gluuStatus  Status of the entry, used by many object classes  gluuSvnEmail  SVN alert email address  gluuSystemUptime  Monitors how long the Gluu Server instance has been running  gluuTargetRAM  Monitors total available RAM on the Gluu Server instance  gluuUrl  Gluu Server instance uri  gluuVDSenabled  oxTrust VDS enabled or disabled  gluuVDSstatus  Gluu VDS configuration  gluuVdsCacheRefreshEnabled  None  gluuVdsCacheRefreshLastUpdate  None  gluuVdsCacheRefreshLastUpdateCount  None  gluuVdsCacheRefreshPollingInterval  None  gluuVdsCacheRefreshProblemCount  None  gluuWhitePagesEnabled  None  iname  None  inum  XRI i-number (iNum)  inumFN  XRI i-number (iNum) without punctuation  o    oxAuthenticationLevel  None  oxAuthenticationMode  None  oxClusterType  Type of the underlying clustering mechanism  oxClusteredServers  List of the clustering partners of this server  oxIDPAuthentication  Custom IDP authentication configuration  oxLogViewerConfig  Log viewer configuration  oxMemcachedServerAddress  Initialization string for memcached client  oxSmtpConfiguration  SMTP configuration  oxTrustStoreCert  oxPush device configuration  oxTrustStoreConf  oxPush application configuration  passwordResetAllowed  Is password reset mechanics allowed  softwareVersion  None  userPassword    oxTrustCacheRefreshServerIpAddress  None",
            "title": "Object class gluuAppliance"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluuattribute",
            "text": "Description    description    displayName    gluuAttributeEditType  Specify in oxTrust who can update an attribute - admin or user  gluuAttributeName  Specify an identifier for an attribute. May be multi-value where an attribute has two names, like givenName and first-name  gluuAttributeOrigin  Specify the person object class associated with the attribute, used for display purposes in oxTrust  gluuAttributeSystemEditType  TODO - still required?  gluuAttributeType  Data type of attribute. Values can be string, photo, numeric, and date  gluuAttributeUsageType  TODO - Usage? Value can be OpenID  gluuAttributeViewType  Specify in oxTrust who can view an attribute -  admin or user  gluuCategory  TODO - in use? Used to group attributes together  gluuSAML1URI  SAML 1 uri of attribute  gluuSAML2URI  SAML 2 uri of attribute  gluuStatus  Status of the entry, used by many object classes  iname  None  inum  XRI i-number  objectClass    oxAttributeType  NameId or attribute  oxMultivaluedAttribute  None  oxNameIdType  NameId type  oxSCIMCustomAttribute  None  oxSourceAttribute  Source attribute for this attribute  seeAlso    urn  None  oxAuthClaimName  Used by oxAuth in conjunction with gluuLdapAttributeName to map claims to attributes in LDAP.",
            "title": "Object class gluuAttribute"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluugroup",
            "text": "Description    c    description    displayName    gluuGroupType  Type of group. Not used  gluuGroupVisibility  Group visibility. Not used  gluuStatus  Status of the entry, used by many object classes  iname  None  inum  XRI i-number (iNum)  member    o    owner    seeAlso",
            "title": "Object class gluuGroup"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluuinummap",
            "text": "Description    gluuStatus  Status of the entry, used by many object classes  inum  XRI i-number (iNum)  primaryKeyAttrName  Primary key attribute name  primaryKeyValue  Primary key value  secondaryKeyAttrName  Secondary key attribute name  secondaryKeyValue  Secondary key value  tertiaryKeyAttrName  Tertiary key attribute name  tertiaryKeyValue  Tertiary key value",
            "title": "Object class gluuInumMap"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluuinvoice",
            "text": "Description    gluuInvoiceAmount  TODO - in use?  gluuInvoiceDate  TODO - in use?  gluuInvoiceLineItemName  TODO - in use?  gluuInvoiceNumber  TODO - in use?  gluuInvoiceProductNumber  TODO - in use?  gluuInvoiceQuantity  TODO - in use?  gluuInvoiceStatus  TODO - in use?  inum  XRI i-number",
            "title": "Object class gluuInvoice"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluuorganization",
            "text": "Description    c    county  ISO 3166-1 Alpha-2 country code  deployedAppliances  Track which appliances are deployed at an organization  description    displayName    gluuAddPersonCapability  Organizational attribute to control whether new users can be added via the oxTrust GUI  gluuAdditionalUsers  TODO: use unclear  gluuApplianceUpdateRequestList  Used by the Gluu Server to request an update  gluuCustomMessage  oxTrust custom welcome message  gluuFaviconImage  TODO - Stores uri of Gluu Server favicon  gluuFederationHostingEnabled  oxTrust flag for the federation feature. Values enabled or disabled  gluuInvoiceNo  TODO - in use?  gluuLogoImage  Logo used by oxTrust for default look and feel  gluuManageIdentityPermission  TODO - in use?  gluuManager  Used to specify if a person has the manager role  gluuManagerGroup  Used in organization entry to specifies the DN of the group that has admin privileges in oxTrust  gluuOrgProfileMgt  enable or disable profile management feature in oxTrust  gluuOrgShortName  Short description, as few letters as possible, no spaces  gluuOwnerGroup  Deprecated. Use gluuManagerGroup, instead.  gluuPaidUntil  TODO - in use?  gluuPaymentProcessorTimestamp  TODO - in use?  gluuProStoresUser  TODO - remove  gluuStatus  Status of the entry, used by many object classes  gluuTempFaviconImage  Store location for upload of the Gluu Server favicon  gluuThemeColor  oxTrust login page configuration  gluuWhitePagesEnabled  None  iname  None  inum  XRI i-number (iNum)  l    mail    memberOf  None  nonProfit  TODO - in use?  o    objectClass    oxCreationTimestamp  Registration time  oxLinkLinktrack  Linktrack link  oxLinktrackEnabled  Is Linktrack API configured  oxLinktrackLogin  Linktrack API login  oxLinktrackPassword  Linktrack API password  oxRegistrationConfiguration  Registration configuration  postalCode    proStoresToken  None  prostoresTimestamp  None  scimAuthMode  SCIM authorization mode  scimGroup  SCIM group  scimStatus  SCIM status  st    street    telephoneNumber    title    uid    userPassword",
            "title": "Object class gluuOrganization"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluupasswordresetrequest",
            "text": "Description    creationDate  Creation date used for password reset requests  oxGuid  A random string to mark temporary tokens  personInum  iNum of a person",
            "title": "Object class gluuPasswordResetRequest"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluuperson",
            "text": "Description    associatedClient    c    displayName    givenName    gluuManagedOrganizations  Used to track the organizations a person is associated with  gluuOptOuts  White pages attributes restricted by person in oxTrust profile management  gluuStatus  Status of the entry, used by many object classes  gluuWhitePagesListed  Allow publication  iname  None  inum  XRI i-number (iNum)  mail    memberOf  None  o    oxAuthPersistentJWT  oxAuth persistent JWT  oxCreationTimestamp  Registration time  oxExternalUid  None  oxInviteCode  Invite Code  oxLastLogonTime  Last logon time  oxTrustActive  None  oxTrustAddresses  None  oxTrustEmail  None  oxTrustEntitlements  None  oxTrustExternalId  None  oxTrustImsValue  None  oxTrustMetaCreated  None  oxTrustMetaLastModified  None  oxTrustMetaLocation  None  oxTrustMetaVersion  None  oxTrustNameFormatted  None  oxTrustPhoneValue  None  oxTrustPhotos  None  oxTrustProfileURL  None  oxTrustRole  None  oxTrustTitle  None  oxTrustUserType  None  oxTrusthonorificPrefix  None  oxTrusthonorificSuffix  None  oxTrustx509Certificate  None  persistentId  Persistent id  middleName  Middle name(s)  nickname  Casual name of the end-user  preferredUsername  Shorthand name  profile  Profile page uri of the person  picture  Profile picture uri of the person  website  Web page or blog uri of the person  emailVerified  True if the email address of the person has been verified; otherwise false  gender  Gender of the person - either female or male  birthdate  Birthday of the person, represented as an ISO 8601:2004 [ISO8601\u00e2\u20ac\u20182004] YYYY-MM-DD format  zoneinfo  time zone database representing the end-user  locale  Locale of the person, represented as a BCP47 [RFC5646] language tag  phoneNumberVerified  True if the phone number of the person has been verified, otherwise false  address  OpenID Connect formatted JSON object representing the address of the person  updatedAt  Time the information of the person was last updated. Seconds from 1970-01-01T0:0:0Z  preferredLanguage  Preferred language of the person  role  Role  secretAnswer  Secret answer  secretQuestion  Secret question  seeAlso    sn    cn    transientId  Transient id  uid  User id of the person  userPassword  Password of the person",
            "title": "Object class gluuPerson"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-gluusamlconfig",
            "text": "Description    description    displayName    federationRules  Track rules for the federation in Gluu SAML configuration. Deprecated as multi-party federation management should move to Jagger  gluuContainerFederation  SAML trust relationship federation info  gluuEntityId  Specifies SAML trust relationship entity id  gluuIsFederation  Used in oxTrust to specify if a SAML trust relationship is a federation. It could also be a website  gluuProfileConfiguration  SAML trust relationship attribute  gluuReleasedAttribute  oxTrust reference for the DN of the released attribute  gluuRulesAccepted  TODO - use unknown for Gluu SAML configuration  gluuSAMLMetaDataFilter  Metadata filter in SAML trust relationship  gluuSAMLTrustEngine  SAML trust relationship configuration  gluuSAMLmaxRefreshDelay  SAML trust relationship refresh time  gluuSAMLspMetaDataFN  SAML Trust Relationship file location of metadata  gluuSAMLspMetaDataSourceType  SAML Trust Relationship SP metadata type - file, uri, federation  gluuSAMLspMetaDataURL  SAML Trust Relationship uri location of metadata  gluuSpecificRelyingPartyConfig  SAML Trust Relationship configuration  gluuStatus  Status of the entry, used by many object classes  gluuTrustContact  oxTrust login page configuration  gluuTrustDeconstruction  TODO - in use?  gluuValidationLog  None  gluuValidationStatus  None  iname  None  inum  XRI i-number  o    objectClass    oxAuthPostLogoutRedirectURI  oxAuth post logout redirect uri  url  None",
            "title": "Object class gluuSAMLconfig"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthclient",
            "text": "Description    associatedPerson  Reference the DN of a person.  displayName    inum  XRI i-number (iNum)  oxAuthAppType  oxAuth app type  oxAuthClientIdIssuedAt  oxAuth client ID issued at  oxAuthClientSecret  oxAuth client secret  oxAuthClientSecretExpiresAt  the date the oxAuth client secret expires  oxAuthClientURI  oxAuth client uri  oxAuthClientUserGroup  oxAuth client user group  oxAuthContact  oxAuth contact  oxAuthDefaultAcrValues  oxAuth default ACR values  oxAuthDefaultMaxAge  oxAuth default maximum age  oxAuthFederationId  oxAuth Federation ID attribute  oxAuthFederationMetadataURI  oxAuth federation metadata uri attribute  oxAuthGrantType  oxAuth Grant type  oxAuthIdTokenEncryptedResponseAlg  oxAuth ID token encrypted response algorithm  oxAuthIdTokenEncryptedResponseEnc  oxAuth ID token encrypted response encoding  oxAuthIdTokenSignedResponseAlg  oxAuth ID token signed response algorithm  oxAuthInitiateLoginURI  oxAuth initiate login uri  oxAuthJwksURI  uri for the oxAuth JWKs file  oxAuthLogoURI  uri for the oxAuth logo file  oxAuthPolicyURI  uri for the oxAuth policy  oxAuthPostLogoutRedirectURI  uri for the oxAuth post logout redirect  oxAuthRedirectURI  uri for the oxAuth redirect  oxAuthRegistrationAccessToken  oxAuth registration access token  oxAuthRequestObjectSigningAlg  oxAuth request object signing algorithm  oxAuthRequestURI  oxAuth request uri  oxAuthRequireAuthTime  oxAuth require authentication time  oxAuthResponseType  oxAuth response type  oxAuthScope  oxAuth attribute scope  oxAuthSectorIdentifierURI  oxAuth sector identifier uri  oxAuthSignedResponseAlg  oxAuth signed response algorithm  oxAuthSubjectType  oxAuth subject type  oxAuthTokenEndpointAuthMethod  oxAuth token endpoint authentication method  oxAuthTosURI  oxAuth type of service uri  oxAuthTrustedClient  oxAuth trusted client  oxAuthUserInfoEncryptedResponseAlg  oxAuth user info encrypted response algorithm  oxAuthUserInfoEncryptedResponseEnc  oxAuth user info encrypted response encoding  oxLastAccessTime  Last access time  oxLastLogonTime  Last logon time",
            "title": "Object class oxAuthClient"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthconfiguration",
            "text": "Description    ou    oxAuthConfCustomAuthMethod  Custom authentication method  oxAuthConfDynamic  oxAuth dynamic configuration  oxAuthConfErrors  oxAuth errors configuration  oxAuthConfIdPythonScript  Custom ID generation  oxAuthConfLdapAuth  LDAP authentication configuration  oxAuthConfStatic  oxAuth static configuration  oxAuthConfWebKeys  oxAuth web keys configuration",
            "title": "Object class oxAuthConfiguration"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthcustomscope",
            "text": "Description    defaultScope  Track the default scope for an custom OAuth2 scope  description    displayName    inum  XRI i-number (iNum)  oxAuthClaim  oxAuth attribute claim",
            "title": "Object class oxAuthCustomScope"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthfederationmetadata",
            "text": "Description    displayName    inum  XRI i-number (iNum)  oxAuthFederationMetadataIntervalCheck  oxAuth Federation metadata interval check attribute  oxAuthFederationOP  oxAuth Federation OP attribute  oxAuthFederationRP  oxAuth Federation RP attribute  oxAuthRedirectURI  oxAuth Redirect uri",
            "title": "Object class oxAuthFederationMetadata"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthfederationop",
            "text": "Description    displayName    inum  XRI i-number  oxAuthFederationOpDomain  oxAuth Federation OP domain attribute  oxAuthFederationOpId  oxAuth Federation OP ID attribute  oxAuthX509PEM  oxAuth x509 in PEM format  oxAuthX509URL  oxAuth x509 uri",
            "title": "Object class oxAuthFederationOP"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthfederationrp",
            "text": "Description    displayName    inum  XRI i-number (iNum)  oxAuthRedirectURI  oxAuth redirect uri  oxAuthX509PEM  oxAuth x509 in PEM format  oxAuthX509URL  oxAuth x509 uri",
            "title": "Object class oxAuthFederationRP"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthfederationrequest",
            "text": "Description    displayName    inum  XRI i-number (iNum)  oxAuthFederationOpDomain  oxAuth Federation OP domain attribute  oxAuthFederationOpId  oxAuth Federation OP ID attribute  oxAuthFederationRequestType  oxAuth Federation request type attribute  oxAuthRedirectURI  oxAuth redirect uri",
            "title": "Object class oxAuthFederationRequest"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthfederationtrust",
            "text": "Description    displayName    inum  XRI i-number  oxAuthFederationId  oxAuth Federation ID attribute  oxAuthFederationMetadataURI  oxAuth Federation metadata uri attribute  oxAuthFederationTrustStatus  oxAuth Federation trust status attribute  oxAuthRedirectURI  oxAuth redirect uri  oxAuthReleasedScope  oxAuth released scope attribute  oxAuthSkipAuthorization  oxAuth skip authorization attribute",
            "title": "Object class oxAuthFederationTrust"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthsessionid",
            "text": "Description    lastModifiedTime  timestamp of the last modification  oxAuthAuthenticationTime  oxAuth authentication time  oxAuthPermissionGranted  oxAuth permission granted  oxAuthPermissionGrantedMap  oxAuth permission granted map  oxAuthUserDN  oxAuth user DN  uniqueIdentifier  an unique identifier for this object",
            "title": "Object class oxAuthSessionId"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthtoken",
            "text": "Description    createTimestamp    oxAuthAuthenticationTime  oxAuth authentication time  oxAuthAuthorizationCode  oxAuth authorization code  oxAuthCreation  oxAuth creation  oxAuthExpiration  oxAuth expiration  oxAuthGrantId  oxAuth grant id  oxAuthGrantType  oxAuth grant type  oxAuthJwtRequest  oxAuth JWT request  oxAuthNonce  oxAuth nonce  oxAuthScope  oxAuth attribute scope  oxAuthTokenCode  oxAuth token code  oxAuthTokenType  oxAuth token type  oxAuthUserId  oxAuth user id  oxAuthenticationLevel  None  oxAuthenticationMode  None  uniqueIdentifier",
            "title": "Object class oxAuthToken"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthumapolicy",
            "text": "Description    description    displayName    inum  XRI i-number (iNum)  oxAuthUmaScope  uri reference of scope descriptor  oxPolicyScript  ox policy script  programmingLanguage  programming language",
            "title": "Object class oxAuthUmaPolicy"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthumarpt",
            "text": "Description    oxAmHost  AM host  oxAuthAuthenticationTime  oxAuth authentication time  oxAuthClientId  oxAuth client ID  oxAuthCreation  oxAuth creation  oxAuthExpiration  oxAuth expiration  oxAuthTokenCode  oxAuth token code  oxAuthUserId  oxAuth user ID  oxUmaPermission  ox UMA permission  uniqueIdentifier  the unique identifier that is in use",
            "title": "Object class oxAuthUmaRPT"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthumaresourceset",
            "text": "Description    displayName  (user) name that appears on the display  inum  XRI i-number (iNum)  owner    oxAssociatedClient  Associate the DN of an OAuth2 client with a person or UMA resource set  oxAuthUmaScope  uri reference of scope descriptor  oxFaviconImage  uri for the favicon  oxGroup  User group  oxId  oxAuth identifier  oxResource  Host path  oxRevision  Revision number  oxType  ox type",
            "title": "Object class oxAuthUmaResourceSet"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthumaresourcesetpermission",
            "text": "Description    oxAmHost  AM host  oxAuthExpiration  oxAuth expiration  oxAuthUmaScope  uri reference of scope descriptor  oxConfigurationCode  ox configuration code  oxHost  ox host  oxResourceSetId  ox resource set id  oxTicket  ox ticket",
            "title": "Object class oxAuthUmaResourceSetPermission"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxauthumascopedescription",
            "text": "Description    displayName  (user) name that appears on the display  inum  XRI i-number (iNum)  owner    oxFaviconImage  uri for the favicon  oxIconUrl  uri for the ox icon  oxId  ox identifier  oxPolicyRule  ox policy rule  oxRevision  ox Revision  oxType  ox type  oxUrl  ox uri",
            "title": "Object class oxAuthUmaScopeDescription"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxentry",
            "text": "Description    displayName  (user) name that appears on the display  iname  None  inum  XRI i-number (iNum)",
            "title": "Object class oxEntry"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxlink",
            "text": "Description    description  oxLink description  oxGuid  A random string to mark temporary ox tokens  oxLinkCreator  ox link creator  oxLinkExpirationDate  ox Link expiration date  oxLinkLinktrack  ox linktrack link  oxLinkModerated  is the ox link moderated?  oxLinkModerators  ox link moderators  oxLinkPending  pending ox registrations",
            "title": "Object class oxLink"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxliteralnode",
            "text": "Description    literalBinaryValue  ox literal binary value  literalValue  ox literal value  organizationalOwner  ox organizational owner  owner  ox owner  targetRelationalXdiStatement  ox TargetRelationalXdiStatement  x  ox XRI component  xdiStatement  ox XDI statement  xri  OX XRI address",
            "title": "Object class oxLiteralNode"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxnode",
            "text": "Description    organizationalOwner  ox organizational owner  owner  ox owner  sourceRelationalXdiStatement  ox source relational XDI statement  targetRelationalXdiStatement  ox target relational XDI statement  x  ox XRI component  xdiStatement  ox XDI statement  xri  ox XRI address",
            "title": "Object class oxNode"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxproxaccesstoken",
            "text": "Description    oxAuthCreation  oxAuth creation  oxAuthExpiration  oxAuth expiration  oxProxyAccessToken  oxProxy access token  oxProxyClientId  oxProxy client ID",
            "title": "Object class oxProxAccessToken"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxproxclient",
            "text": "Description    displayName  (user) name that appears on the display  inum  XRI i-number (iNum)  oxProxyClaimMapping  oxProxy claim mapping  oxProxyScope  oxProxy scope  oxProxyToOpClientMapping  oxProxy client mapping to op client",
            "title": "Object class oxProxClient"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxproxconfiguration",
            "text": "Description    ou    oxProxConf  oxProxy Configuration  oxScriptDn  script object DN",
            "title": "Object class oxProxConfiguration"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxproxop",
            "text": "Description    c    displayName  (user) name that appears on the display  inum  XRI i-number (iNum)  l    oxDomain  ox domain  oxId  ox identifier  oxX509PEM  ox X.509 in PEM format  oxX509URL  ox X.509 uri",
            "title": "Object class oxProxOp"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxpushapplication",
            "text": "Description    displayName  (user) name that appears on the display  oxId  ox identifier  oxName  ox name  oxPushApplicationConf  oxPush application configuration",
            "title": "Object class oxPushApplication"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxpushdevice",
            "text": "Description    oxAuthUserId  oxAuth user ID  oxId  ox identifier  oxPushApplication  oxPush application DN  oxPushDeviceConf  oxPush device configuration  oxType  ox type",
            "title": "Object class oxPushDevice"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxscript",
            "text": "Description    inum  XRI i-number (iNum)  oxScript  Attribute that contains the script (python, java script)  oxScriptType  Attribute that contains the script type (e.g. python, java script)",
            "title": "Object class oxScript"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-oxtrustconfiguration",
            "text": "Description    ou    oxTrustConfApplication  oxTrust application configuration",
            "title": "Object class oxTrustConfiguration"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-vddirectoryview",
            "text": "Description    o",
            "title": "Object class vdDirectoryView"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-vdapcontainer",
            "text": "Description    ou",
            "title": "Object class vdapcontainer"
        },
        {
            "location": "/gluu-defaults/schema/#object-class-vdlabel",
            "text": "Description    o",
            "title": "Object class vdlabel"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/",
            "text": "Configuration\n\n\noxTrust Configuration\n\n\noxtrust.properties\n\n\npersonObjectClassTypes\n\n\npersonObjectClassDisplayNames\n\n\ncontactObjectClassDisplayNames\n\n\ngluuSpAttributes\n\n\nclusteredInums\n\n\n\n\n\n\n\n\n\n\nConfiguration\n\n\noxTrust Configuration\n\n\nThis page explains the JSON Configuration under the Configuration Tab in the Configuration menu.\n\n\n\n\noxtrust.properties\n\n\n\n\nThe following fields are available for edit in the menu.\n\n\n\n\nidpBindDn:\n the admin user of the ldap server\n\n\nbaseDN:\n the base doaim name of oxtrust. The default is \no=gluu\n\n\norgIname:\n \n\n\norgSupportEmail:\n the support email address of the Gluu Server installation\n\n\n\n\n\n\n\n\napplianceInum:\n the \nINUM\n of the appliance\n\n\napplianceUrl:\n the \nURI\n of the appliance\n\n\nbaseEndpoint:\n \n\n\nschemaAddObjectClassWithAttributeTypesDefinition:\n the schema to add various attribute types\n\n\nschemaAddObjectClassWithoutAttributeTypesDefinition:\n the schema to add various attribute types\n\n\n\n\npersonObjectClassTypes\n\n\nThis class holds the relation between the person entry and it's relative object class.\n\n\n\n\n\n\nitem 1:\n inetOrgPerson\n\n\nitem 2:\n gluuPerson\n\n\n\n\n\n\n\n\npersonCustomObjectClass:\n\n\n\n\npersonObjectClassDisplayNames\n\n\nThis class holds the relation betwee the display name of the person and the relative object class.\n\n\n\n\n\n\nitem 1:\n inetOrgPerson\n\n\nitem 2:\n gluuPerson\n\n\n\n\n\n\n\n\nschemaAddAttributeDefenition:\n \n\n\n\n\ncontactObjectClassDisplayNames\n\n\nItems can be added under this class by clicking on the \n+ item\n button.\n\n\n\n\n\n\nphotoRepositoryRootDir:\n the path to the root directory of photographs\n\n\nphotoRepositoryThumbWidth:\n the thumb with of a photo\n\n\nphotoRepositoryThumbheight:\n sets the thumb height of a photo\n\n\nphotoRepositoryCountLevels:\n the count level per photo repository\n\n\nphotoRepositoryCountFoldersPerLevel:\n he number of folders per level\n\n\n\n\n\n\n\n\nauthMode:\n set this tag to \nbasic\n to use basic authentication or leave it blank to use oxAuth\n\n\nldifStore:\n the path to the \nLDIF\n store\n\n\n\n\n\n\n\n\nshibboleth2IdpRootDir:\n the root directory for the shibboleth plugin\n\n\nshibboleth2SpConfDir:\n the configuration directory for the shibboleth plugin\n\n\n\n\n\n\n\n\npokenApplicationSecret:\n\n\nupdateAplicanceStatus:\n  the update appliance state for the site. Use \ntrue\n to allow, and \nfalse\n to forbid (default value)\n\n\nsvnConfigurationStoreRoot:\n he root of the \nSVN\n configuration store\n\n\nsvnConfigurationStorePassword:\n the password of the \nSVN\n configuration store\n\n\n\n\n\n\n\n\nkeystorePath:\n the path to the keystore\n\n\nkeystorePassword:\n the password to the keystore\n\n\nallowPersonModification:\n enables or disables the allowance to modify a person entry. Use \ntrue\n to allow (default value), and  \nfalse\n otherwise\n\n\n\n\n\n\n\n\nidpUrl:\n the \nuri\n of the \nOpenID\n provider that is in use\n\n\nvelocityLog:\n the velocity log filename with path\n\n\n_spMetadataPath:_the path to the Gluu Server metadata\n\n\nlogoLocation:\n the directory name for the images and logos that are used\n\n\n\n\n\n\n\n\nidpSecurityKey:\n the security key of the \nOpenID\n provider\n\n\nidpSecurityKeyPassowrd:\n the security password of the \nOpenID\n provider\n\n\nidpSecurityCert:\n the security certificate of the machine\n\n\n\n\ngluuSpAttributes\n\n\nItems can be added here by clicking on the \n+ item\n button.\n\n\n\n\n\n\nconfigGeneration:\n this entry controls the automatic generation of the configuration files. Use \nenable\n to allow and \ndisable\n otherwise\n\n\nidpLdapProtocol:\n the protocol used by the [LDAP][ldap] server\n\n\nidpLdapServer:\n hostname of the [LDAP][ldap] server with port\n\n\n\n\n\n\n\n\norgInum:\n the \nINUM\n of the organization\n\n\nidpBindDn:\n the domain name of the \nOpenID\n provider\n\n\nidpBindPassowrd:\n the password for the \nOpenID\n provider\n\n\nidpUserFields:\n \n\n\ngluuSpCert:\n the certificate name and location of the Gluu Server\n\n\n\n\n\n\n\n\nmysqlUrl:\n the MySql connector as \nURI\n\n\nmysqlUser:\n the username for the MySql server\n\n\nmysqlPassword:\n passowrd for the MySql server\n\n\nshibboleth2FederationRootDir:\n the root directory for the \nShobboleth\n federation plugin\n\n\n\n\n\n\n\n\ncacheRefreshEnabled:\n the value of the cache refresh mechanism. Use \ntrue\n to enable and \nfalse\n otherwise\n\n\ncacheRefreshIntervalMinutes:\n the time in minutes counting down to next cache-refresh event\n\n\ncaCertsLocation:\n the keystore to use for downloaded \nSSL\n certificates\n\n\ncaCertsPassphrase:\n the password for the caCerts keystore\n\n\ntempCertDir:\n the temporary location for certificates while certificate update procedure\n\n\ncertDir:\n the locaiton of certificates used in configuration files\n\n\n\n\n\n\n\n\nservicesRestartTrigger:\n the location of the file which will restart the applicance server if deleted\n\n\npersistSVN:\n the state of persistence in \nSVN\n. Use \ntrue\n to enable or \nfalse\n otherwise\n\n\n\n\n\n\n\n\noxAuthAuthorizeUrl:\n the authorization \nURI\n for oxAuth\n\n\noxAuthTokenUrl:\n the token \nURI\n for oxAuth\n\n\noxAuthValidateTokenUrl:\n the \nURI\n for oxAuth token validation\n\n\noxAuthEndSessionUrl:\n the \nURI\n for oxAuth session termination\n\n\noxAuthLogoutUrl:\n the \nURI\n for logging out of oxAuth\n\n\noxAuthTokenValidationUrl:\n the \nURI\n for oxAuth token validation\n\n\n\n\n\n\n\n\noxAuthUserInfo:\n the \nURI\n for oxAuth user information\n\n\noxAuthSectorIdentifierUrl:\n the \nURI\n for oxAuth sector identifier\n\n\n_oxAuthClientId:_the identification number for oxAuth client\n\n\noxAuthClientPassowrd:\n the password for oxAuth client\n\n\noxAuthClientScope:\n the scope of the oxAuth client\n\n\nloginRedirectUrl:\n the redirect \nURI\n for oxAuth\n\n\nlogoutRedirectUrl:\n the \nURI\n for oxAuth \n\n\n\n\nclusteredInums\n\n\nItems can be added here by clicking on the \n+ item\n button.\n\n\n\n\n\n\nclientAssociationAttribute:\n the attribute which identifies the \nOpenID\n client\n\n\noxAuthIssuers:\n the \nURI\n of the issuer authorization server\n\n\nignoreValidation:\n the control to check/ignore token validation. Use \ntrue\n to validate or \nfalse\n otherwise\n\n\n\n\n\n\n\n\numaIssuer:\n the \nURI\n of the issuer authorization server\n\n\numaClientId:\n the identification of the \nUMA\n client\n\n\numaClientKeyId:\n \n\n\numaResourceId:\n\n\numaScope:\n the scopes available for this resource\n\n\n\n\n\n\n\n\nrecaptchaSiteKey:\n\n\nrecaptchaSecretKey:\n\n\ncssLocation:\n the path to the CSS files\n\n\njsLocation:\n the path to the JS files\n\n\nrepactchUrl:\n the type for the recaptcha \nURI\n attribute",
            "title": "oxTrust Properties File"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#oxtrust-configuration",
            "text": "This page explains the JSON Configuration under the Configuration Tab in the Configuration menu.",
            "title": "oxTrust Configuration"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#oxtrustproperties",
            "text": "The following fields are available for edit in the menu.   idpBindDn:  the admin user of the ldap server  baseDN:  the base doaim name of oxtrust. The default is  o=gluu  orgIname:    orgSupportEmail:  the support email address of the Gluu Server installation     applianceInum:  the  INUM  of the appliance  applianceUrl:  the  URI  of the appliance  baseEndpoint:    schemaAddObjectClassWithAttributeTypesDefinition:  the schema to add various attribute types  schemaAddObjectClassWithoutAttributeTypesDefinition:  the schema to add various attribute types",
            "title": "oxtrust.properties"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#personobjectclasstypes",
            "text": "This class holds the relation between the person entry and it's relative object class.    item 1:  inetOrgPerson  item 2:  gluuPerson     personCustomObjectClass:",
            "title": "personObjectClassTypes"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#personobjectclassdisplaynames",
            "text": "This class holds the relation betwee the display name of the person and the relative object class.    item 1:  inetOrgPerson  item 2:  gluuPerson     schemaAddAttributeDefenition:",
            "title": "personObjectClassDisplayNames"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#contactobjectclassdisplaynames",
            "text": "Items can be added under this class by clicking on the  + item  button.    photoRepositoryRootDir:  the path to the root directory of photographs  photoRepositoryThumbWidth:  the thumb with of a photo  photoRepositoryThumbheight:  sets the thumb height of a photo  photoRepositoryCountLevels:  the count level per photo repository  photoRepositoryCountFoldersPerLevel:  he number of folders per level     authMode:  set this tag to  basic  to use basic authentication or leave it blank to use oxAuth  ldifStore:  the path to the  LDIF  store     shibboleth2IdpRootDir:  the root directory for the shibboleth plugin  shibboleth2SpConfDir:  the configuration directory for the shibboleth plugin     pokenApplicationSecret:  updateAplicanceStatus:   the update appliance state for the site. Use  true  to allow, and  false  to forbid (default value)  svnConfigurationStoreRoot:  he root of the  SVN  configuration store  svnConfigurationStorePassword:  the password of the  SVN  configuration store     keystorePath:  the path to the keystore  keystorePassword:  the password to the keystore  allowPersonModification:  enables or disables the allowance to modify a person entry. Use  true  to allow (default value), and   false  otherwise     idpUrl:  the  uri  of the  OpenID  provider that is in use  velocityLog:  the velocity log filename with path  _spMetadataPath:_the path to the Gluu Server metadata  logoLocation:  the directory name for the images and logos that are used     idpSecurityKey:  the security key of the  OpenID  provider  idpSecurityKeyPassowrd:  the security password of the  OpenID  provider  idpSecurityCert:  the security certificate of the machine",
            "title": "contactObjectClassDisplayNames"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#gluuspattributes",
            "text": "Items can be added here by clicking on the  + item  button.    configGeneration:  this entry controls the automatic generation of the configuration files. Use  enable  to allow and  disable  otherwise  idpLdapProtocol:  the protocol used by the [LDAP][ldap] server  idpLdapServer:  hostname of the [LDAP][ldap] server with port     orgInum:  the  INUM  of the organization  idpBindDn:  the domain name of the  OpenID  provider  idpBindPassowrd:  the password for the  OpenID  provider  idpUserFields:    gluuSpCert:  the certificate name and location of the Gluu Server     mysqlUrl:  the MySql connector as  URI  mysqlUser:  the username for the MySql server  mysqlPassword:  passowrd for the MySql server  shibboleth2FederationRootDir:  the root directory for the  Shobboleth  federation plugin     cacheRefreshEnabled:  the value of the cache refresh mechanism. Use  true  to enable and  false  otherwise  cacheRefreshIntervalMinutes:  the time in minutes counting down to next cache-refresh event  caCertsLocation:  the keystore to use for downloaded  SSL  certificates  caCertsPassphrase:  the password for the caCerts keystore  tempCertDir:  the temporary location for certificates while certificate update procedure  certDir:  the locaiton of certificates used in configuration files     servicesRestartTrigger:  the location of the file which will restart the applicance server if deleted  persistSVN:  the state of persistence in  SVN . Use  true  to enable or  false  otherwise     oxAuthAuthorizeUrl:  the authorization  URI  for oxAuth  oxAuthTokenUrl:  the token  URI  for oxAuth  oxAuthValidateTokenUrl:  the  URI  for oxAuth token validation  oxAuthEndSessionUrl:  the  URI  for oxAuth session termination  oxAuthLogoutUrl:  the  URI  for logging out of oxAuth  oxAuthTokenValidationUrl:  the  URI  for oxAuth token validation     oxAuthUserInfo:  the  URI  for oxAuth user information  oxAuthSectorIdentifierUrl:  the  URI  for oxAuth sector identifier  _oxAuthClientId:_the identification number for oxAuth client  oxAuthClientPassowrd:  the password for oxAuth client  oxAuthClientScope:  the scope of the oxAuth client  loginRedirectUrl:  the redirect  URI  for oxAuth  logoutRedirectUrl:  the  URI  for oxAuth",
            "title": "gluuSpAttributes"
        },
        {
            "location": "/gluu-defaults/oxtrust-properties/#clusteredinums",
            "text": "Items can be added here by clicking on the  + item  button.    clientAssociationAttribute:  the attribute which identifies the  OpenID  client  oxAuthIssuers:  the  URI  of the issuer authorization server  ignoreValidation:  the control to check/ignore token validation. Use  true  to validate or  false  otherwise     umaIssuer:  the  URI  of the issuer authorization server  umaClientId:  the identification of the  UMA  client  umaClientKeyId:    umaResourceId:  umaScope:  the scopes available for this resource     recaptchaSiteKey:  recaptchaSecretKey:  cssLocation:  the path to the CSS files  jsLocation:  the path to the JS files  repactchUrl:  the type for the recaptcha  URI  attribute",
            "title": "clusteredInums"
        },
        {
            "location": "/gluu-defaults/oxauth-properties/",
            "text": "Configuration\n\n\noxAuth Configurations\n\n\noxAuth.properties\n\n\n\n\n\n\n\n\n\n\nConfiguration\n\n\noxAuth Configurations\n\n\nThis page explains the JSON Configuration under the Configuration Tab in the configuration Menu.\n\n\n\n\noxAuth.properties\n\n\n\n\nThe descriptions for the oxAuth JSON configurations are given under the fields.",
            "title": "oxAuth Properties File"
        },
        {
            "location": "/gluu-defaults/oxauth-properties/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/gluu-defaults/oxauth-properties/#oxauth-configurations",
            "text": "This page explains the JSON Configuration under the Configuration Tab in the configuration Menu.",
            "title": "oxAuth Configurations"
        },
        {
            "location": "/gluu-defaults/oxauth-properties/#oxauthproperties",
            "text": "The descriptions for the oxAuth JSON configurations are given under the fields.",
            "title": "oxAuth.properties"
        },
        {
            "location": "/gluu-defaults/logs/",
            "text": "Gluu Server Logs\n\n\nWhen it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--logs are the best place to start. \n\n\nThe Gluu Server administrator can investigate logs from the oxTrust \nView Logs\n feature or directly with SSH access to the Gluu-Server container. \n\n\nGluu Server logs can be found in the following locations:\n\n\nLog Levels\n\n\nGluu Server logs use the log4j logging levels which can be changed in the \nlog4j.xml\n file under the \n/opt/tomcat/webapps/oxauth/WEB-INF/classes\n folder.\nThe available logging levels are :\n\n\n\n\n\n\n\n\nLevel\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nALL\n\n\nAll log levels are documented\n\n\n\n\n\n\nDEBUG\n\n\nDetailed events useful to debug application\n\n\n\n\n\n\nERROR\n\n\nErrors are documented\n\n\n\n\n\n\nINFO\n\n\nLogs informational messages as the application runs\n\n\n\n\n\n\nOFF\n\n\nNo logs are recorded\n\n\n\n\n\n\nTRACE\n\n\nLogs detailed events; more than DEBUG\n\n\n\n\n\n\n\n\nAs mentioned above the \nlog4j.xml\n contains the log levels. Open the file using the command below\n\n\n# vi /opt/tomcat/webapps/oxauth/WEB-INF/classes/log4j.xml\n\n\n\n\nThe log leves are defined under the \n<level value=\" \" />\n tags which can be changed to one of the above from the table. The following section is taken from a live Gluu Server \nlog4j.xml\n file showing different log levels for different logs. The changes made this section will reflect in the logs.\n\n\n <logger name=\"org.xdi.oxauth.service.status.ldap\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_PERSISTENCE_LDAP_STATISTICS_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.service.PythonService\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.service.custom.script\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.oxauth.service.custom\" additivity=\"false\">\n        <level value=\"TRACE\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n\n\n\nPlease restart \ntomcat\n after any change in log levels to allow the changes to take effect. Use the following command to restart tomcat:\n\n\n# service tomcat restart\n\n\n\n\nSystem logs\n\n\n\n\nFor Ubuntu: \n/var/log/syslog\n\n\nFor RPM based systems: \n/var/log/messages\n\n\n\n\nWeb Server logs\n\n\n\n\nFor Debian: \n/var/log/apache2/\n\n\nFor RPM based systems: \n/var/log/httpd/\n\n\n\n\nCore Gluu Server logs\n\n\n\n\nopt/tomcat/logs/\n\n\n\n\nSAML transaction related logs\n\n\n\n\n/opt/idp/logs/\n\n\n\n\nLDAP logs\n\n\n\n\n/opt/opendj/logs/\n\n\n\n\nMiscellaneous logs\n\n\n\n\n/var/logs/\n\n\n\n\nTo escalate the log levels\n\n\n\n\nOpenID Connect or any core logging: \nlog4j.xml\n, which is located in \n/opt/tomcat/webapps/oxauth/WEB-INF/classes/\n\n\nSAML logging: \nlogging.xml\n, which is located in \n/opt/idp.conf/\n\n\n\n\nSystem Logs\n\n\nSometimes it worthy to check system logs like \n/var/log/messages\n. These logs contain global system messages.\n\n\nWeb Server logs\n\n\nApache httpd / apache2 logs are available in \n/var/log/httpd\n or \n/var/log/apache2\n for Ubuntu.\n\n\n\n\n\n\naccess_log\n: This log contains information about requests coming into the Gluu Server, success status or requests, execution time for any request etc.     \n\n\n\n\n\n\nerror_log\n: This log shows error messages if the web server encounter any issue while processing incoming requests.    \n\n\n\n\n\n\nother_vhosts_access.log\n: This log is specific to the Gluu Server setup and those links which are being requested by a user from a web browser. An example below:     \n\n\ntest.gluu.org:443 192.168.201.184 - - [17/Jul/2016:18:25:21 +0000] \"GET /index.html HTTP/1.1\" 200 13239 \"-\" \"Java/1.7.0_95\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET / HTTP/1.1\" 302 2185 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/ HTTP/1.1\" 200 583 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/home.htm HTTP/1.1\" 302 272 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/login?cid=4 HTTP/1.1\" 302 474 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /oxauth/authorize?scope=openid+profile+email+user_name&response_type=code+id_token&nonce=nonce&redirect_uri=https%3A%2F%2Ftest.gluu.org%2Fidentity%2Fauthentication%2Fauthcode&client_id=%40%21EFCB.890F.FB6C.2603%210001%210A49.F454%210008%21F047.7275 HTTP/1.1\" 302 450 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\n\n\n\n\n\n\n\nThere are few other logs like \nssl_access_log\n , \nssl_error_log\n , and \nssl_request_log\n which are collecting information on port 443 specifically.      \n\n\n\n\n\n\nRemember the initial \nGET\n request will hit the Apache server first, and then be proxied via the AJP port 8009 to tomcat. If you see traffic on the web server, but not on tomcat, this is a good place to check to see if something is wrong. For example, you might want to check if the firewall is blocking port 8009 if you see somthing like this:\n\n\n    [Thu Jul 14 23:49:19 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:19 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n\n\n\nCore logs\n\n\noxAuth logs\n\n\n\n\n\n\noxauth.log\n    \n\nThis log is gathering most of the authentication related information. Generally this is the first log to review for any authentication-related troubleshooting, like authentication failure or missing clients etc. Here's an example showing a successful user authentication:\n\n\n2016-07-16 15:43:28,232 INFO  [org.xdi.oxauth.auth.Authenticator] Authentication success for Client: '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,232 TRACE [org.xdi.oxauth.auth.Authenticator] Authentication successfully for '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,238 DEBUG [xdi.oxauth.token.ws.rs.TokenRestWebServiceImpl] Attempting to request access token: grantType = authorization_code, code = 61ba3c0d-42c4-4f1f-8420-fd5f6707f1b1, redirectUri = https://test.gluu.org/identity/authentication/authcode, username = null, refreshToken = null, clientId = null, ExtraParams = {grant_type=[Ljava.lang.String;@1add2a62, redirect_uri=[Ljava.lang.String;@2e0995b5, code=[Ljava.lang.String;@7743b5af}, isSecure = true, codeVerifier = null\n2016-07-16 15:43:28,249 DEBUG [org.xdi.oxauth.service.UserService] Getting user information from LDAP: userId = zico\n\n\n\n\n\n\n\noxauth_script.log\n   \n\nMost of the custom script's initialization and few more information are loaded here in this script. In the sample log below we can see 'Super Gluu' 2FA has been loaded in the Gluu Server:\n\n\n2016-07-16 19:06:32,705 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialization\n2016-07-16 19:06:32,713 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialize notification services\n2016-07-16 19:06:32,750 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialized successfully. oneStep: 'False', twoStep: 'True', pushNotifications: 'False'\n\n\n\n\n\n\n\noxTrust logs\n\n\n\n\n\n\noxtrust.log\n   \n\nThis log gather logs related to Gluu Server Admin panel (called oxTrust). For example, what is the clientID of an oxTrust session? Or, what scopes are being used, etc. In the example below, you can see an admin user has successfuly logged into the \ntest.gluu.org\n Gluu Server admin panel, has the proper authorizationCode, a redirectURI, and the user's role:\n\n\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator] authorizationCode : 555a7586-6ca2-4b39-ab39-2ac78ec81524\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator]  scopes : user_name email openid profile\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] clientID : @!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] getting accessToken\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] tokenURL : https://test.gluu.org/oxauth/seam/resource/restv1/oxauth/token\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] Sending request to token endpoint\n2016-07-16 16:41:55,692 INFO  [org.gluu.oxtrust.action.Authenticator] redirectURI : https://test.gluu.org/identity/authentication/authcode\n2016-07-16 16:41:55,919 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse : org.xdi.oxauth.client.TokenResponse@1914b8d\n2016-07-16 16:41:55,920 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse.getErrorType() : null\n2016-07-16 16:41:55,921 DEBUG [org.gluu.oxtrust.action.Authenticator]  accessToken : d39bd11c-7bc0-45e1-b772-2d0a5f74e6fb\n2016-07-16 16:41:55,921 DEBUG [org.gluu.oxtrust.action.Authenticator]  validating AccessToken\n2016-07-16 16:41:56,004 DEBUG [org.gluu.oxtrust.action.Authenticator]  response3.getStatus() : 200\n2016-07-16 16:41:56,004 DEBUG [org.gluu.oxtrust.action.Authenticator] validate check session status:200\n2016-07-16 16:41:56,004 INFO  [org.gluu.oxtrust.action.Authenticator] Session validation successful. User is logged in\n2016-07-16 16:41:56,108 INFO  [org.gluu.oxtrust.action.Authenticator] user uid:admin\n2016-07-16 16:41:56,119 INFO  [org.gluu.oxtrust.action.Authenticator] Authenticating user 'admin'\n2016-07-16 16:41:56,125 DEBUG [org.gluu.oxtrust.action.Authenticator] Configuring application after user 'admin' login\n\n\n\n\n\n\n\noxtrust_script.log\n   \n\nThis log collects information on oxTrust related scripts and their operations. For example, if an organization uses a custom attribute which populates values for every user, then the Gluu Server Administrator needs to use a custom script for their 'Cache Refresh' process. This log will receive information when the custom script runs.\n\n\n\n\n\n\noxtrust_cache_refresh.log\n  \n\nCache Refresh related information is available here, such as Status, Primary failure etc. In the sample snippet below we are seeing the status of users that have been synced into Gluu Server, number of failures, and total number of updated users.\n\n\n2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries\n\n\n\n\n\n\n\nWrapper logs\n\n\n\n\n\n\ncatalina.log\n  \n\nA standard servlet contianer log. For example: \n\n\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\n\n\n\n\n\n\n\nlocalhost.log\n   \n\nStandard logs on web applications. For example: \n\n\nJul 16, 2016 3:33:31 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nJul 16, 2016 3:33:32 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nJul 16, 2016 3:37:27 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring root WebApplicationContext\nJul 16, 2016 3:37:42 PM org.apache.catalina.core.ApplicationContext log\nINFO: No Spring WebApplicationInitializer types detected on classpath\nJul 16, 2016 3:37:43 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring root WebApplicationContext\nJul 16, 2016 3:37:54 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring FrameworkServlet 'cas'\n\n\n\n\n\n\n\nwrapper.log\n   \n\nThis log is the godfather of all Gluu Server logs, accounting for roughly 95% of log information. As you can see in the example snippet below, this log is showing that one CAS module loaded, one user is trying to authenticate, there's a search happening for this user in LDAP, etc.:\n\n\nINFO   | jvm 1    | 2016/07/16 19:17:48 | 2016-07-16 19:17:48,855 INFO [org.jasig.cas.services.DefaultServicesManagerImpl] - <Reloading registered services.>\nINFO   | jvm 1    | 2016/07/16 19:17:48 | 2016-07-16 19:17:48,855 INFO [org.jasig.cas.services.DefaultServicesManagerImpl] - <Loaded 1 services.>\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,835 TRACE [org.xdi.oxauth.service.SessionStateService] Found session_state cookie: '2f73dc6e-7421-48ff-9b49-7c59565bfe50'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,838 TRACE [org.xdi.oxauth.service.SessionStateService] Try to get session by id: 2f73dc6e-7421-48ff-9b49-7c59565bfe50 ...\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,838 TRACE [org.xdi.oxauth.service.SessionStateService] Session dn: uniqueIdentifier=2f73dc6e-7421-48ff-9b49-7c59565bfe50,ou=session,o=@!EFCB.890F.FB6C.2603!0001!0A49.F454,o=gluu\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,839 DEBUG [org.xdi.oxauth.service.external.ExternalAuthenticationService] Executing python 'authenticate' authenticator method\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Authenticating user with LDAP: username: support@gluu.org\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Attempting to find userDN by primary key: 'mail' and key value: 'support@gluu.org'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Getting user information from LDAP: attributeName = 'mail', attributeValue = 'support@gluu.org'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,844 DEBUG [org.xdi.oxauth.service.AuthenticationService] Found '2' entries\n\n\n\n\n\n\n\nCache Refresh logs\n\n\n\n\noxtrust_cache_refresh.log\n     \n\n\n\n\nCache Refresh related information such as status, primary failure, etc., is available in this log. In the sample snippet below we see the total number of users that have been synced into the Gluu Server, number of failures, and total number of updated users. \n\n\n    2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n    2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n    2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n    2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n    2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n    2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n    2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n    2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries\n\n\n\nCAS logs\n\n\n\n\ncas.log\n    \n\n\n\n\nIf oxCAS is enabled in the Gluu Server then this log will have information about any CAS transactions. In the example snippet below, we see a CAS service validate a response from the Gluu Server:\n\n\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.web.ServiceValidateController] - Successfully validated service ticket ST-237741-1LZ4eWcHvBS75FAXTICY-myldap.gluu.org for service [https://testcas1.gluu.org/c?pkg=https://testcas1.gluu.org/portal.p_redirect]\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Attempted to extract Request from HttpServletRequest. Results:\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Request Body:\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Extracted ArtifactId: null\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Extracted Request Id: null\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.web.support.SamlArgumentExtractor] - Extractor generated service for: https://testcas1.gluu.org/c/?pkg=https://testcas1.gluu.org/portal.p_redirect\n    2016-07-16 15:50:41,878 DEBUG [org.jasig.cas.web.support.CasArgumentExtractor] - Extractor generated service for: https://testcas1.gluu.org/c/\n    2016-07-16 15:50:41,880 DEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Updating ticket ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.services.support.RegisteredServiceDefaultAttributeFilter] - Found attribute [uid] in the list of allowed attributes for service [zico]\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.services.support.RegisteredServiceDefaultAttributeFilter] - Found attribute [sn] in the list of allowed attributes for service [mohib]\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.CentralAuthenticationServiceImpl] - Principal id to return for service [mohib zico] is [mzico]. The default principal id is [mzico].\n    2016-07-16 15:50:41,883 DEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Deleting ticket         ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    2016-07-16 15:50:41,884 INFO [com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager] - Audit trail record BEGIN\n    =============================================================\n    WHO: audit:unknown\n    WHAT: ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    ACTION: SERVICE_TICKET_VALIDATED\n    APPLICATION: CAS\n    WHEN: Sat Jul 16 15:50:41 EDT 2016\n    CLIENT IP ADDRESS: 192.168.1.2\n    SERVER IP ADDRESS: test.gluu.org\n    =============================================================\n\n\n\nAsimba logs\n\n\n\n\nwrapper.log\n     \n\n\n\n\nAny Asimba SAML proxy transactions are logged in \nwrapper.log\n. In the below example we see the requestor (from where the SSO request is coming), we see the SAML proxy server's information (\ntest.gluu.org\n), and the authentication server (\nnest.gluu.org\n) which is performing the authentication, releasing attributes, etc. \n\n\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | (ASIMBAWA) [2016-07-17 15:40:33] [DEBUG] WebBrowserSSO <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | <samlp:AuthnRequest\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     AssertionConsumerServiceURL=\"https://sp.gluu.org/Shibboleth.sso/SAML2/POST\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     Destination=\"https://test.gluu.org/asimba/profiles/saml2/sso/web\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     ID=\"_a5704abd6d2f2e5b0eba5a1671f6c658\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     IssueInstant=\"2016-07-17T15:40:33Z\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     Version=\"2.0\" xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://sp.gluu.org/shibboleth</saml:Issuer>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     <samlp:NameIDPolicy AllowCreate=\"1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | </samlp:AuthnRequest>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | (ASIMBAWA) [2016-07-17 15:40:33] [DEBUG] WebBrowserSSO Put on map? urlpath.context=web \n    ......................\n    ......................\n    ......................\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] WebBrowserSSOProfile Request recieved: https://test.gluu.org/asimba/sso/web\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] SAML2IDP Creating new MetadataProvider from configured source for SAML2 IDP 'https://nest.gluu.org/idp/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] NamedFilesystemMetadataProvider Created for file with name /opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] AbstractReloadingMetadataProvider New metadata succesfully loaded for '/opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] AbstractReloadingMetadataProvider Next refresh cycle for metadata provider '/opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml' will occur on '2016-07-17T18:40:37.746Z' ('2016-07-17T18:40:37.746Z' local time)\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] StandardMetadataProviderManager No EntitiesDescriptor was returned, so no IDPList to create.\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] WebBrowserSSOProfile Using binding: urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] SAML2IDP Returning existing MetadataProvider for SAML2 IDP 'https://nest.gluu.org/idp/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] MemorySessionFactory Existing session(s) updated: fQUnP-s1K_fdxK2wdLjp4A for requestor 'https://sp.gluu.org/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] AbstractAuthNMethodSAML2Profile <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | <saml2p:AuthnRequest AssertionConsumerServiceIndex=\"0\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     Destination=\"https://nest.gluu.org/idp/profile/SAML2/POST/SSO\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     ForceAuthn=\"false\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     ID=\"_ee01f578f94409aa41af080cc74787b8fQUnP-s1K_fdxK2wdLjp4A\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     IssueInstant=\"2016-07-17T15:40:37.771Z\" ProviderName=\"Sp.gluu.org\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://test.gluu.org/asimba/profiles/saml2</saml2:Issuer>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |         <ds:SignedInfo>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:Reference URI=\"#_ee01f578f94409aa41af080cc74787b8fQUnP-s1K_fdxK2wdLjp4A\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:Transforms>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                     <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                     <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 </ds:Transforms>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:DigestValue>okTsHKhXes6hA7cKbLjsBwFZhtM=</ds:DigestValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             </ds:Reference>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |         </ds:SignedInfo>\n    ............................INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"uid\"\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 Name=\"urn:oid:0.9.2342.19200300.100.1.1\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">admin</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"sn\" Name=\"urn:oid:2.5.4.4\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">User</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"givenName\"\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 Name=\"urn:oid:2.5.4.42\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">Admin</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |         </saml2:AttributeStatement>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |     </saml2:Assertion>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 | </saml2p:Response>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |\n\n\n\nSAML logs\n\n\n\n\n\n\nidp-access.log\n   \n\nEach time the IDP is accessed a log entry is made detailing whether or not information sent back. These messages include request time, remote host making the rreuqest, server host name and port, and the request path. This log is written in the machine parsable format:\n\n\n20160717T162519Z|192.168.201.1|test.gluu.org:443|/profile/SAML2/Redirect/SSO|\n\n\n\n\n\n\n\nidp-process.log\n  \n\nThis is one of the most important logs for SAML transactions in the Gluu Server. It includes the Issuer's information, released attributes, certificate information etc. Here's an example: \n\n\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<saml2p:Response\n    Destination=\"https://sp.gluu.org/Shibboleth.sso/SAML2/POST\"\n    ID=\"_322f0ff5e516e8ecb3b7ecd21aaf457c\"\n    InResponseTo=\"_a05a4d01389b7904c7e4d40a4d099285\"\n    IssueInstant=\"2016-07-17T16:25:19.165Z\" Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <saml2:Issuer\n        Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://test.gluu.org/idp/shibboleth</saml2:Issuer>\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n        <ds:SignedInfo>\n...................\n...................\n...................\neLiXH2CuvJrwkHhcSQSyKAs4WPXbLE5hhzEd9GGRmiovGmdZJvDU5zRX74m80GcL0d+mf6WzLRZBVmcPcs/2Dk1+J2Sw67W0DF0vgpoDvhgKHMdkKI8Ex\nZ38cVHo1xJqpQvUq0StjGPgdRBWUJoMe4BVRD8sM7BDbjFoY5H3TJxzYbnjsxwDZaqIZQt+4=</xenc:CipherValue>\n            </xenc:CipherData>\n        </xenc:EncryptedData>\n    </saml2:EncryptedAssertion>\n</saml2p:Response>\n\n16:25:19.395 - INFO [Shibboleth-Audit:1028] - 20160717T162519Z|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect|_a05a4d01389b7904c7e4d40a4d099285|https://sp.gluu.org/shibboleth|urn:mace:shibboleth:2.0:profiles:saml2:sso|https://test.gluu.org/idp/shibboleth|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST|_322f0ff5e516e8ecb3b7ecd21aaf457c|admin|urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport|uid,mail,sn,givenName,|||\n\n\n\n\n\n\n\nLDAP logs\n\n\n\n\n\n\naccess.log\n   \n\n\naccess.log\n is in active mode all the time. The \naccess.log\n messages provide information about the types of LDAP operations processed by the Gluu Server.\n\n\n\n\n\n\naudit.log\n  \n\nAll changes / modifications of LDAP server are being logged here in audit log.\n\n\n\n\n\n\nerrors.log\n  \n\nLDAP server startup and shutdown related information are available in \nerrors.log\n.",
            "title": "Logs"
        },
        {
            "location": "/gluu-defaults/logs/#gluu-server-logs",
            "text": "When it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--logs are the best place to start.   The Gluu Server administrator can investigate logs from the oxTrust  View Logs  feature or directly with SSH access to the Gluu-Server container.   Gluu Server logs can be found in the following locations:",
            "title": "Gluu Server Logs"
        },
        {
            "location": "/gluu-defaults/logs/#log-levels",
            "text": "Gluu Server logs use the log4j logging levels which can be changed in the  log4j.xml  file under the  /opt/tomcat/webapps/oxauth/WEB-INF/classes  folder.\nThe available logging levels are :     Level  Description      ALL  All log levels are documented    DEBUG  Detailed events useful to debug application    ERROR  Errors are documented    INFO  Logs informational messages as the application runs    OFF  No logs are recorded    TRACE  Logs detailed events; more than DEBUG     As mentioned above the  log4j.xml  contains the log levels. Open the file using the command below  # vi /opt/tomcat/webapps/oxauth/WEB-INF/classes/log4j.xml  The log leves are defined under the  <level value=\" \" />  tags which can be changed to one of the above from the table. The following section is taken from a live Gluu Server  log4j.xml  file showing different log levels for different logs. The changes made this section will reflect in the logs.   <logger name=\"org.xdi.oxauth.service.status.ldap\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_PERSISTENCE_LDAP_STATISTICS_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.service.PythonService\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.service.custom.script\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.oxauth.service.custom\" additivity=\"false\">\n        <level value=\"TRACE\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>  Please restart  tomcat  after any change in log levels to allow the changes to take effect. Use the following command to restart tomcat:  # service tomcat restart  System logs   For Ubuntu:  /var/log/syslog  For RPM based systems:  /var/log/messages   Web Server logs   For Debian:  /var/log/apache2/  For RPM based systems:  /var/log/httpd/   Core Gluu Server logs   opt/tomcat/logs/   SAML transaction related logs   /opt/idp/logs/   LDAP logs   /opt/opendj/logs/   Miscellaneous logs   /var/logs/   To escalate the log levels   OpenID Connect or any core logging:  log4j.xml , which is located in  /opt/tomcat/webapps/oxauth/WEB-INF/classes/  SAML logging:  logging.xml , which is located in  /opt/idp.conf/",
            "title": "Log Levels"
        },
        {
            "location": "/gluu-defaults/logs/#system-logs_1",
            "text": "Sometimes it worthy to check system logs like  /var/log/messages . These logs contain global system messages.",
            "title": "System Logs"
        },
        {
            "location": "/gluu-defaults/logs/#web-server-logs_1",
            "text": "Apache httpd / apache2 logs are available in  /var/log/httpd  or  /var/log/apache2  for Ubuntu.    access_log : This log contains information about requests coming into the Gluu Server, success status or requests, execution time for any request etc.         error_log : This log shows error messages if the web server encounter any issue while processing incoming requests.        other_vhosts_access.log : This log is specific to the Gluu Server setup and those links which are being requested by a user from a web browser. An example below:       test.gluu.org:443 192.168.201.184 - - [17/Jul/2016:18:25:21 +0000] \"GET /index.html HTTP/1.1\" 200 13239 \"-\" \"Java/1.7.0_95\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET / HTTP/1.1\" 302 2185 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/ HTTP/1.1\" 200 583 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/home.htm HTTP/1.1\" 302 272 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/login?cid=4 HTTP/1.1\" 302 474 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /oxauth/authorize?scope=openid+profile+email+user_name&response_type=code+id_token&nonce=nonce&redirect_uri=https%3A%2F%2Ftest.gluu.org%2Fidentity%2Fauthentication%2Fauthcode&client_id=%40%21EFCB.890F.FB6C.2603%210001%210A49.F454%210008%21F047.7275 HTTP/1.1\" 302 450 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"    There are few other logs like  ssl_access_log  ,  ssl_error_log  , and  ssl_request_log  which are collecting information on port 443 specifically.          Remember the initial  GET  request will hit the Apache server first, and then be proxied via the AJP port 8009 to tomcat. If you see traffic on the web server, but not on tomcat, this is a good place to check to see if something is wrong. For example, you might want to check if the firewall is blocking port 8009 if you see somthing like this:      [Thu Jul 14 23:49:19 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:19 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)",
            "title": "Web Server logs"
        },
        {
            "location": "/gluu-defaults/logs/#core-logs",
            "text": "oxAuth logs    oxauth.log      \nThis log is gathering most of the authentication related information. Generally this is the first log to review for any authentication-related troubleshooting, like authentication failure or missing clients etc. Here's an example showing a successful user authentication:  2016-07-16 15:43:28,232 INFO  [org.xdi.oxauth.auth.Authenticator] Authentication success for Client: '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,232 TRACE [org.xdi.oxauth.auth.Authenticator] Authentication successfully for '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,238 DEBUG [xdi.oxauth.token.ws.rs.TokenRestWebServiceImpl] Attempting to request access token: grantType = authorization_code, code = 61ba3c0d-42c4-4f1f-8420-fd5f6707f1b1, redirectUri = https://test.gluu.org/identity/authentication/authcode, username = null, refreshToken = null, clientId = null, ExtraParams = {grant_type=[Ljava.lang.String;@1add2a62, redirect_uri=[Ljava.lang.String;@2e0995b5, code=[Ljava.lang.String;@7743b5af}, isSecure = true, codeVerifier = null\n2016-07-16 15:43:28,249 DEBUG [org.xdi.oxauth.service.UserService] Getting user information from LDAP: userId = zico    oxauth_script.log     \nMost of the custom script's initialization and few more information are loaded here in this script. In the sample log below we can see 'Super Gluu' 2FA has been loaded in the Gluu Server:  2016-07-16 19:06:32,705 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialization\n2016-07-16 19:06:32,713 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialize notification services\n2016-07-16 19:06:32,750 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialized successfully. oneStep: 'False', twoStep: 'True', pushNotifications: 'False'    oxTrust logs    oxtrust.log     \nThis log gather logs related to Gluu Server Admin panel (called oxTrust). For example, what is the clientID of an oxTrust session? Or, what scopes are being used, etc. In the example below, you can see an admin user has successfuly logged into the  test.gluu.org  Gluu Server admin panel, has the proper authorizationCode, a redirectURI, and the user's role:  2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator] authorizationCode : 555a7586-6ca2-4b39-ab39-2ac78ec81524\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator]  scopes : user_name email openid profile\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] clientID : @!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] getting accessToken\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] tokenURL : https://test.gluu.org/oxauth/seam/resource/restv1/oxauth/token\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] Sending request to token endpoint\n2016-07-16 16:41:55,692 INFO  [org.gluu.oxtrust.action.Authenticator] redirectURI : https://test.gluu.org/identity/authentication/authcode\n2016-07-16 16:41:55,919 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse : org.xdi.oxauth.client.TokenResponse@1914b8d\n2016-07-16 16:41:55,920 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse.getErrorType() : null\n2016-07-16 16:41:55,921 DEBUG [org.gluu.oxtrust.action.Authenticator]  accessToken : d39bd11c-7bc0-45e1-b772-2d0a5f74e6fb\n2016-07-16 16:41:55,921 DEBUG [org.gluu.oxtrust.action.Authenticator]  validating AccessToken\n2016-07-16 16:41:56,004 DEBUG [org.gluu.oxtrust.action.Authenticator]  response3.getStatus() : 200\n2016-07-16 16:41:56,004 DEBUG [org.gluu.oxtrust.action.Authenticator] validate check session status:200\n2016-07-16 16:41:56,004 INFO  [org.gluu.oxtrust.action.Authenticator] Session validation successful. User is logged in\n2016-07-16 16:41:56,108 INFO  [org.gluu.oxtrust.action.Authenticator] user uid:admin\n2016-07-16 16:41:56,119 INFO  [org.gluu.oxtrust.action.Authenticator] Authenticating user 'admin'\n2016-07-16 16:41:56,125 DEBUG [org.gluu.oxtrust.action.Authenticator] Configuring application after user 'admin' login    oxtrust_script.log     \nThis log collects information on oxTrust related scripts and their operations. For example, if an organization uses a custom attribute which populates values for every user, then the Gluu Server Administrator needs to use a custom script for their 'Cache Refresh' process. This log will receive information when the custom script runs.    oxtrust_cache_refresh.log    \nCache Refresh related information is available here, such as Status, Primary failure etc. In the sample snippet below we are seeing the status of users that have been synced into Gluu Server, number of failures, and total number of updated users.  2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries    Wrapper logs    catalina.log    \nA standard servlet contianer log. For example:   Jul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.    localhost.log     \nStandard logs on web applications. For example:   Jul 16, 2016 3:33:31 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nJul 16, 2016 3:33:32 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nJul 16, 2016 3:37:27 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring root WebApplicationContext\nJul 16, 2016 3:37:42 PM org.apache.catalina.core.ApplicationContext log\nINFO: No Spring WebApplicationInitializer types detected on classpath\nJul 16, 2016 3:37:43 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring root WebApplicationContext\nJul 16, 2016 3:37:54 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring FrameworkServlet 'cas'    wrapper.log     \nThis log is the godfather of all Gluu Server logs, accounting for roughly 95% of log information. As you can see in the example snippet below, this log is showing that one CAS module loaded, one user is trying to authenticate, there's a search happening for this user in LDAP, etc.:  INFO   | jvm 1    | 2016/07/16 19:17:48 | 2016-07-16 19:17:48,855 INFO [org.jasig.cas.services.DefaultServicesManagerImpl] - <Reloading registered services.>\nINFO   | jvm 1    | 2016/07/16 19:17:48 | 2016-07-16 19:17:48,855 INFO [org.jasig.cas.services.DefaultServicesManagerImpl] - <Loaded 1 services.>\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,835 TRACE [org.xdi.oxauth.service.SessionStateService] Found session_state cookie: '2f73dc6e-7421-48ff-9b49-7c59565bfe50'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,838 TRACE [org.xdi.oxauth.service.SessionStateService] Try to get session by id: 2f73dc6e-7421-48ff-9b49-7c59565bfe50 ...\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,838 TRACE [org.xdi.oxauth.service.SessionStateService] Session dn: uniqueIdentifier=2f73dc6e-7421-48ff-9b49-7c59565bfe50,ou=session,o=@!EFCB.890F.FB6C.2603!0001!0A49.F454,o=gluu\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,839 DEBUG [org.xdi.oxauth.service.external.ExternalAuthenticationService] Executing python 'authenticate' authenticator method\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Authenticating user with LDAP: username: support@gluu.org\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Attempting to find userDN by primary key: 'mail' and key value: 'support@gluu.org'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Getting user information from LDAP: attributeName = 'mail', attributeValue = 'support@gluu.org'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,844 DEBUG [org.xdi.oxauth.service.AuthenticationService] Found '2' entries    Cache Refresh logs   oxtrust_cache_refresh.log         Cache Refresh related information such as status, primary failure, etc., is available in this log. In the sample snippet below we see the total number of users that have been synced into the Gluu Server, number of failures, and total number of updated users.       2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n    2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n    2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n    2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n    2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n    2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n    2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n    2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries  CAS logs   cas.log        If oxCAS is enabled in the Gluu Server then this log will have information about any CAS transactions. In the example snippet below, we see a CAS service validate a response from the Gluu Server:      2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.web.ServiceValidateController] - Successfully validated service ticket ST-237741-1LZ4eWcHvBS75FAXTICY-myldap.gluu.org for service [https://testcas1.gluu.org/c?pkg=https://testcas1.gluu.org/portal.p_redirect]\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Attempted to extract Request from HttpServletRequest. Results:\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Request Body:\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Extracted ArtifactId: null\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Extracted Request Id: null\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.web.support.SamlArgumentExtractor] - Extractor generated service for: https://testcas1.gluu.org/c/?pkg=https://testcas1.gluu.org/portal.p_redirect\n    2016-07-16 15:50:41,878 DEBUG [org.jasig.cas.web.support.CasArgumentExtractor] - Extractor generated service for: https://testcas1.gluu.org/c/\n    2016-07-16 15:50:41,880 DEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Updating ticket ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.services.support.RegisteredServiceDefaultAttributeFilter] - Found attribute [uid] in the list of allowed attributes for service [zico]\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.services.support.RegisteredServiceDefaultAttributeFilter] - Found attribute [sn] in the list of allowed attributes for service [mohib]\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.CentralAuthenticationServiceImpl] - Principal id to return for service [mohib zico] is [mzico]. The default principal id is [mzico].\n    2016-07-16 15:50:41,883 DEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Deleting ticket         ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    2016-07-16 15:50:41,884 INFO [com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager] - Audit trail record BEGIN\n    =============================================================\n    WHO: audit:unknown\n    WHAT: ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    ACTION: SERVICE_TICKET_VALIDATED\n    APPLICATION: CAS\n    WHEN: Sat Jul 16 15:50:41 EDT 2016\n    CLIENT IP ADDRESS: 192.168.1.2\n    SERVER IP ADDRESS: test.gluu.org\n    =============================================================  Asimba logs   wrapper.log         Any Asimba SAML proxy transactions are logged in  wrapper.log . In the below example we see the requestor (from where the SSO request is coming), we see the SAML proxy server's information ( test.gluu.org ), and the authentication server ( nest.gluu.org ) which is performing the authentication, releasing attributes, etc.       INFO   | jvm 1    | 2016/07/17 15:40:33 | (ASIMBAWA) [2016-07-17 15:40:33] [DEBUG] WebBrowserSSO <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | <samlp:AuthnRequest\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     AssertionConsumerServiceURL=\"https://sp.gluu.org/Shibboleth.sso/SAML2/POST\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     Destination=\"https://test.gluu.org/asimba/profiles/saml2/sso/web\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     ID=\"_a5704abd6d2f2e5b0eba5a1671f6c658\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     IssueInstant=\"2016-07-17T15:40:33Z\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     Version=\"2.0\" xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://sp.gluu.org/shibboleth</saml:Issuer>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     <samlp:NameIDPolicy AllowCreate=\"1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | </samlp:AuthnRequest>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | (ASIMBAWA) [2016-07-17 15:40:33] [DEBUG] WebBrowserSSO Put on map? urlpath.context=web \n    ......................\n    ......................\n    ......................\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] WebBrowserSSOProfile Request recieved: https://test.gluu.org/asimba/sso/web\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] SAML2IDP Creating new MetadataProvider from configured source for SAML2 IDP 'https://nest.gluu.org/idp/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] NamedFilesystemMetadataProvider Created for file with name /opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] AbstractReloadingMetadataProvider New metadata succesfully loaded for '/opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] AbstractReloadingMetadataProvider Next refresh cycle for metadata provider '/opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml' will occur on '2016-07-17T18:40:37.746Z' ('2016-07-17T18:40:37.746Z' local time)\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] StandardMetadataProviderManager No EntitiesDescriptor was returned, so no IDPList to create.\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] WebBrowserSSOProfile Using binding: urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] SAML2IDP Returning existing MetadataProvider for SAML2 IDP 'https://nest.gluu.org/idp/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] MemorySessionFactory Existing session(s) updated: fQUnP-s1K_fdxK2wdLjp4A for requestor 'https://sp.gluu.org/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] AbstractAuthNMethodSAML2Profile <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | <saml2p:AuthnRequest AssertionConsumerServiceIndex=\"0\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     Destination=\"https://nest.gluu.org/idp/profile/SAML2/POST/SSO\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     ForceAuthn=\"false\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     ID=\"_ee01f578f94409aa41af080cc74787b8fQUnP-s1K_fdxK2wdLjp4A\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     IssueInstant=\"2016-07-17T15:40:37.771Z\" ProviderName=\"Sp.gluu.org\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://test.gluu.org/asimba/profiles/saml2</saml2:Issuer>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |         <ds:SignedInfo>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:Reference URI=\"#_ee01f578f94409aa41af080cc74787b8fQUnP-s1K_fdxK2wdLjp4A\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:Transforms>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                     <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                     <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 </ds:Transforms>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:DigestValue>okTsHKhXes6hA7cKbLjsBwFZhtM=</ds:DigestValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             </ds:Reference>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |         </ds:SignedInfo>\n    ............................INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"uid\"\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 Name=\"urn:oid:0.9.2342.19200300.100.1.1\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">admin</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"sn\" Name=\"urn:oid:2.5.4.4\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">User</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"givenName\"\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 Name=\"urn:oid:2.5.4.42\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">Admin</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |         </saml2:AttributeStatement>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |     </saml2:Assertion>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 | </saml2p:Response>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |",
            "title": "Core logs"
        },
        {
            "location": "/gluu-defaults/logs/#saml-logs",
            "text": "idp-access.log     \nEach time the IDP is accessed a log entry is made detailing whether or not information sent back. These messages include request time, remote host making the rreuqest, server host name and port, and the request path. This log is written in the machine parsable format:  20160717T162519Z|192.168.201.1|test.gluu.org:443|/profile/SAML2/Redirect/SSO|    idp-process.log    \nThis is one of the most important logs for SAML transactions in the Gluu Server. It includes the Issuer's information, released attributes, certificate information etc. Here's an example:    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<saml2p:Response\n    Destination=\"https://sp.gluu.org/Shibboleth.sso/SAML2/POST\"\n    ID=\"_322f0ff5e516e8ecb3b7ecd21aaf457c\"\n    InResponseTo=\"_a05a4d01389b7904c7e4d40a4d099285\"\n    IssueInstant=\"2016-07-17T16:25:19.165Z\" Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <saml2:Issuer\n        Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://test.gluu.org/idp/shibboleth</saml2:Issuer>\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n        <ds:SignedInfo>\n...................\n...................\n...................\neLiXH2CuvJrwkHhcSQSyKAs4WPXbLE5hhzEd9GGRmiovGmdZJvDU5zRX74m80GcL0d+mf6WzLRZBVmcPcs/2Dk1+J2Sw67W0DF0vgpoDvhgKHMdkKI8Ex\nZ38cVHo1xJqpQvUq0StjGPgdRBWUJoMe4BVRD8sM7BDbjFoY5H3TJxzYbnjsxwDZaqIZQt+4=</xenc:CipherValue>\n            </xenc:CipherData>\n        </xenc:EncryptedData>\n    </saml2:EncryptedAssertion>\n</saml2p:Response>\n\n16:25:19.395 - INFO [Shibboleth-Audit:1028] - 20160717T162519Z|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect|_a05a4d01389b7904c7e4d40a4d099285|https://sp.gluu.org/shibboleth|urn:mace:shibboleth:2.0:profiles:saml2:sso|https://test.gluu.org/idp/shibboleth|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST|_322f0ff5e516e8ecb3b7ecd21aaf457c|admin|urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport|uid,mail,sn,givenName,|||",
            "title": "SAML logs"
        },
        {
            "location": "/gluu-defaults/logs/#ldap-logs_1",
            "text": "access.log      access.log  is in active mode all the time. The  access.log  messages provide information about the types of LDAP operations processed by the Gluu Server.    audit.log    \nAll changes / modifications of LDAP server are being logged here in audit log.    errors.log    \nLDAP server startup and shutdown related information are available in  errors.log .",
            "title": "LDAP logs"
        },
        {
            "location": "/api/oic-authorization/",
            "text": "OpenId Connect Authorization Grant\n\n\nThis page provides an interface for request authorization through REST web services.\n\n\nPath\n\n\n/oxauth/authorize\n\n\nrequestAuthorizationGet\n\n\nGET\n \n/oxauth/authorize\n\n\nThe Authorization Endpoint performs Authentication of the end-user. This is done by sending the User Agent to the Authorization Server's Authorization Endpoint for Authentication and Authorization, using request parameters defined by OAuth 2.0 and additional parameters and parameter values defined by OpenID Connect.\n\n\nURL\n\n\nhttp://<hostname of Gluu Server>/oxauth/authorize\n\n\nParameters\n\n\n\n        \n\n            \nParameter\n\n            \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nscope\n\n            \ntrue\n\n            \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n            \nstring\n\n        \n\n        \n\n            \nresponse_type\n\n            \ntrue\n\n            \nOAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\n            \nstring\n\n        \n\n        \n\n            \nclient_id\n\n            \ntrue\n\n            \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n            \nstring\n\n        \n\n        \n\n            \nredirect_uri\n\n            \ntrue\n\n            \nRedirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider\n\n            \nstring\n\n        \n\n        \n\n            \nstate\n\n            \nfalse\n\n            \nOpaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.\n\n            \nstring\n\n        \n\n    \n\n        \nresponse_mode\n\n        \nfalse\n\n        \nThis parameter informs the authorization server about the mechanism to be used to return parameters from the authorization endpoint. This is not recommended if the default for response_type is requested.\n\n        \nstring\n\n    \n\n        \n\n            \nnonce\n\n            \nfalse\n\n            \nString value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.\n\n            \nstring\n\n        \n\n        \n\n            \ndisplay\n\n            \nfalse\n\n            \nASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap\n\n            \nstring\n\n        \n\n        \n\n            \nprompt\n\n            \nfalse\n\n            \nSpace delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account\n\n            \nstring\n\n        \n\n        \n\n            \nmax_age\n\n            \nfalse\n\n            \nMaximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.\n\n            \nint\n\n        \n\n        \n\n            \nui_locales\n\n            \nfalse\n\n            \nend-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.\n\n            \nstring\n\n        \n\n        \n\n            \nid_token_hint\n\n            \nfalse\n\n            \nID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n            \nstring\n\n        \n\n        \n\n            \nlogin_hint\n\n            \nfalse\n\n            \nHint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion.\n\n            \nstring\n\n        \n\n        \n\n            \nacr_values\n\n            \nfalse\n\n            \nRequested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.\n\n            \nstring\n\n        \n\n        \n\n            \namr_values\n\n            \nfalse\n\n            \nAMR Values\n\n            \nstring\n\n        \n\n        \n\n            \nrequest\n\n            \nfalse\n\n            \nThis parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the request parameters.\n\n            \nstring\n\n        \n\n        \n\n            \nrequest_uri\n\n            \nfalse\n\n            \nThis parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n\n            \nstring\n\n        \n\n        \n\n            \nrequest_session_state\n\n            \nfalse\n\n            \nRequest session state\n\n            \nstring\n\n        \n\n        \n\n            \nsessionState\n\n            \nfalse\n\n            \nThis is an optional parameter\n\n            \nstring\n\n        \n\n        \n\n            \naccessToken\n\n            \nfalse\n\n            \nThis parameter is optinal and carries the access token for the request.\n\n            \nstring\n\n        \n\n    \n\n        \norigin_headers\n\n        \nfalse\n\n        \nThis optional token is used in custom workflows.\n\n        \nstring\n\n    \n \n        \n\n            \ncodeChallange\n\n            \nfalse\n\n            \nThis parameter allows the code to be challanced using PKCE.\n\n            \nstring\n\n        \n\n        \n\n            \ncodeChallangeMethod\n\n            \nfalse\n\n            \nThis parameter allows the use of PKCE to challange code.\n\n            \nstring\n\n    \n\n       \n\n            \nhttpRequest\n\n            \nfalse\n\n            \nThis is an optional parameter\n\n            \nstring\n\n        \n\n        \n\n            \nsecurityContext\n\n            \nfalse\n\n            \nThis is an injectable interface that provides access to security related information.\n\n            \nstring\n\n        \n\n\n\n- query\n\n\n\n        \n\n            \nParameter\n\n            \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nresponse_mode\n\n            \nfalse\n\n            \nInforms the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.\n\n            \nstring\n\n        \n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n302\n\n            \ninteraction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction. \n\n        \n\n        \n\n            \n302\n\n            \nlogin_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication. \n\n        \n\n        \n\n            \n302\n\n            \naccount_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. \n\n        \n\n        \n\n            \n302\n\n            \nconsent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_object\n    The request parameter contains an invalid Request Object. \n\n        \n\n        \n\n            \n302\n\n            \nrequest_not_supported\n    The OP does not support use of the request parameter\n\n        \n\n        \n\n            \n302\n\n            \nrequest_uri_not_supported\n    The OP does not support use of the request_uri parameter\n\n        \n\n        \n\n            \n302\n\n            \nregistration_not_supported\n    The OP does not support use of the registration parameter\n\n        \n\n        \n\n            \n400\n\n            \nThe request parameters contain an invalid option, e.g. an unusual grant type.\n\n        \n\n        \n\n            \n401\n\n            \nThe request could not be authenticated using the client_id and client_secret.\n\n        \n\n        \n\n            \n500\n\n            \nEither an internal server error occurred (e.g. opendj server is down), or the username and password \n                do not match any known user.\n            \n\n        \n\n\n\n\nrequestAuthorizationPost\n\n\nPOST\n \n/oxauth/authorize\n\n\nPerforms authorization.\nThe Authorization Endpoint performs Authentication of the end-user.\n\n\nURL\n\n\nhttp://<hostname of Gluu Server>/oxauth/authorize\n\n\nParameters\n\n\n\n        \n\n            \nParameter\n\n            \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nscope\n\n            \ntrue\n\n            \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n            \nstring\n\n        \n\n        \n\n            \nresponse_type\n\n            \ntrue\n\n            \nOAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\n            \nstring\n\n        \n\n        \n\n            \nclient_id\n\n            \ntrue\n\n            \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n            \nstring\n\n        \n\n        \n\n            \nredirect_uri\n\n            \ntrue\n\n            \nRedirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider\n\n            \nstring\n\n        \n\n        \n\n            \nstate\n\n            \nfalse\n\n            \nOpaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.\n\n            \nstring\n\n        \n\n        \n\n            \nresponse_mode\n\n            \nfalse\n\n            \nInforms the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.\n\n            \nstring\n\n        \n\n        \n\n            \nnonce\n\n            \nfalse\n\n            \nString value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.\n\n            \nstring\n\n        \n\n        \n\n            \ndisplay\n\n            \nfalse\n\n            \nASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap\n\n            \nstring\n\n        \n\n        \n\n            \nprompt\n\n            \nfalse\n\n            \nSpace delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account\n\n            \nstring\n\n        \n\n        \n\n            \nmax_age\n\n            \nfalse\n\n            \nMaximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.\n\n            \nint\n\n        \n\n        \n\n            \nui_locales\n\n            \nfalse\n\n            \nend-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.\n\n            \nstring\n\n        \n\n        \n\n            \nid_token_hint\n\n            \nfalse\n\n            \nID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n            \nstring\n\n        \n\n        \n\n            \nlogin_hint\n\n            \nfalse\n\n            \nHint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion.\n\n            \nstring\n\n        \n\n        \n\n            \nacr_values\n\n            \nfalse\n\n            \nRequested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in section 2. The acr Claim is requested as a Voluntary Claim by this parameter.\n\n            \nstring\n\n        \n\n        \n\n            \namr_values\n\n            \nfalse\n\n            \nAMR Values\n\n            \nstring\n\n        \n\n        \n\n            \nrequest\n\n            \nfalse\n\n            \nThis parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in section 6.1. It represents the request as a JWT whose Claims are the request parameters.\n\n            \nstring\n\n        \n\n        \n\n            \nrequest_uri\n\n            \nfalse\n\n            \nThis parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n\n            \nstring\n\n        \n\n        \n\n            \nrequest_session_state\n\n            \nfalse\n\n            \nRequest session state\n\n            \nstring\n\n        \n\n        \n\n            \nsession_state\n\n            \nfalse\n\n            \nSession state of this call\n\n            \nstring\n\n        \n\n        \n\n            \naccess_token\n\n            \nfalse\n\n            \nAccess token\n\n            \nstring\n\n        \n\n        \n\n            \norigin_headers\n\n            \nfalse\n\n            \nOrigin headers. Used in custom workflows.\n\n            \nstring\n\n        \n\n    \n\n        \ncode_challange\n\n        \nfalse\n\n        \nPKCE Code challange\n\n        \nstring\n\n    \n\n    \n\n        \ncode_challange_method\n\n        \nfalse\n\n        \nPKCE code challange method\n\n        \nstring\n\n    \n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n302\n\n            \ninteraction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction. \n\n        \n\n        \n\n            \n302\n\n            \nlogin_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication. \n\n        \n\n        \n\n            \n302\n\n            \naccount_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. \n\n        \n\n        \n\n            \n302\n\n            \nconsent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_object\n    The request parameter contains an invalid Request Object. \n\n        \n\n        \n\n            \n302\n\n            \nrequest_not_supported\n    The OP does not support use of the request parameter\n\n        \n\n        \n\n            \n302\n\n            \nrequest_uri_not_supported\n    The OP does not support use of the request_uri parameter\n\n        \n\n        \n\n            \n302\n\n            \nregistration_not_supported\n    The OP does not support use of the registration parameter",
            "title": "OpenID Connect Authorization Endpoint"
        },
        {
            "location": "/api/oic-authorization/#openid-connect-authorization-grant",
            "text": "This page provides an interface for request authorization through REST web services.",
            "title": "OpenId Connect Authorization Grant"
        },
        {
            "location": "/api/oic-authorization/#path",
            "text": "/oxauth/authorize  requestAuthorizationGet  GET   /oxauth/authorize  The Authorization Endpoint performs Authentication of the end-user. This is done by sending the User Agent to the Authorization Server's Authorization Endpoint for Authentication and Authorization, using request parameters defined by OAuth 2.0 and additional parameters and parameter values defined by OpenID Connect.  URL  http://<hostname of Gluu Server>/oxauth/authorize  Parameters  \n         \n             Parameter \n             Required \n             Description \n             Data Type \n         \n         \n             scope \n             true \n             OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n             string \n         \n         \n             response_type \n             true \n             OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code. \n             string \n         \n         \n             client_id \n             true \n             OAuth 2.0 Client Identifier valid at the Authorization Server. \n             string \n         \n         \n             redirect_uri \n             true \n             Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider \n             string \n         \n         \n             state \n             false \n             Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie. \n             string \n         \n     \n         response_mode \n         false \n         This parameter informs the authorization server about the mechanism to be used to return parameters from the authorization endpoint. This is not recommended if the default for response_type is requested. \n         string \n     \n         \n             nonce \n             false \n             String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values. \n             string \n         \n         \n             display \n             false \n             ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap \n             string \n         \n         \n             prompt \n             false \n             Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account \n             string \n         \n         \n             max_age \n             false \n             Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value. \n             int \n         \n         \n             ui_locales \n             false \n             end-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider. \n             string \n         \n         \n             id_token_hint \n             false \n             ID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n             string \n         \n         \n             login_hint \n             false \n             Hint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion. \n             string \n         \n         \n             acr_values \n             false \n             Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter. \n             string \n         \n         \n             amr_values \n             false \n             AMR Values \n             string \n         \n         \n             request \n             false \n             This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the request parameters. \n             string \n         \n         \n             request_uri \n             false \n             This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters. \n             string \n         \n         \n             request_session_state \n             false \n             Request session state \n             string \n         \n         \n             sessionState \n             false \n             This is an optional parameter \n             string \n         \n         \n             accessToken \n             false \n             This parameter is optinal and carries the access token for the request. \n             string \n         \n     \n         origin_headers \n         false \n         This optional token is used in custom workflows. \n         string \n      \n         \n             codeChallange \n             false \n             This parameter allows the code to be challanced using PKCE. \n             string \n         \n         \n             codeChallangeMethod \n             false \n             This parameter allows the use of PKCE to challange code. \n             string \n     \n        \n             httpRequest \n             false \n             This is an optional parameter \n             string \n         \n         \n             securityContext \n             false \n             This is an injectable interface that provides access to security related information. \n             string \n          \n- query  \n         \n             Parameter \n             Required \n             Description \n             Data Type \n         \n         \n             response_mode \n             false \n             Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type. \n             string \n           Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             302 \n             interaction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction.  \n         \n         \n             302 \n             login_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication.  \n         \n         \n             302 \n             account_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.  \n         \n         \n             302 \n             consent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent.  \n         \n         \n             302 \n             invalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data.  \n         \n         \n             302 \n             invalid_request_object\n    The request parameter contains an invalid Request Object.  \n         \n         \n             302 \n             request_not_supported\n    The OP does not support use of the request parameter \n         \n         \n             302 \n             request_uri_not_supported\n    The OP does not support use of the request_uri parameter \n         \n         \n             302 \n             registration_not_supported\n    The OP does not support use of the registration parameter \n         \n         \n             400 \n             The request parameters contain an invalid option, e.g. an unusual grant type. \n         \n         \n             401 \n             The request could not be authenticated using the client_id and client_secret. \n         \n         \n             500 \n             Either an internal server error occurred (e.g. opendj server is down), or the username and password \n                do not match any known user.\n             \n           requestAuthorizationPost  POST   /oxauth/authorize  Performs authorization.\nThe Authorization Endpoint performs Authentication of the end-user.  URL  http://<hostname of Gluu Server>/oxauth/authorize  Parameters  \n         \n             Parameter \n             Required \n             Description \n             Data Type \n         \n         \n             scope \n             true \n             OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n             string \n         \n         \n             response_type \n             true \n             OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code. \n             string \n         \n         \n             client_id \n             true \n             OAuth 2.0 Client Identifier valid at the Authorization Server. \n             string \n         \n         \n             redirect_uri \n             true \n             Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider \n             string \n         \n         \n             state \n             false \n             Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie. \n             string \n         \n         \n             response_mode \n             false \n             Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type. \n             string \n         \n         \n             nonce \n             false \n             String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values. \n             string \n         \n         \n             display \n             false \n             ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap \n             string \n         \n         \n             prompt \n             false \n             Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account \n             string \n         \n         \n             max_age \n             false \n             Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value. \n             int \n         \n         \n             ui_locales \n             false \n             end-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider. \n             string \n         \n         \n             id_token_hint \n             false \n             ID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n             string \n         \n         \n             login_hint \n             false \n             Hint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion. \n             string \n         \n         \n             acr_values \n             false \n             Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in section 2. The acr Claim is requested as a Voluntary Claim by this parameter. \n             string \n         \n         \n             amr_values \n             false \n             AMR Values \n             string \n         \n         \n             request \n             false \n             This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in section 6.1. It represents the request as a JWT whose Claims are the request parameters. \n             string \n         \n         \n             request_uri \n             false \n             This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters. \n             string \n         \n         \n             request_session_state \n             false \n             Request session state \n             string \n         \n         \n             session_state \n             false \n             Session state of this call \n             string \n         \n         \n             access_token \n             false \n             Access token \n             string \n         \n         \n             origin_headers \n             false \n             Origin headers. Used in custom workflows. \n             string \n         \n     \n         code_challange \n         false \n         PKCE Code challange \n         string \n     \n     \n         code_challange_method \n         false \n         PKCE code challange method \n         string \n       Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             302 \n             interaction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction.  \n         \n         \n             302 \n             login_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication.  \n         \n         \n             302 \n             account_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.  \n         \n         \n             302 \n             consent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent.  \n         \n         \n             302 \n             invalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data.  \n         \n         \n             302 \n             invalid_request_object\n    The request parameter contains an invalid Request Object.  \n         \n         \n             302 \n             request_not_supported\n    The OP does not support use of the request parameter \n         \n         \n             302 \n             request_uri_not_supported\n    The OP does not support use of the request_uri parameter \n         \n         \n             302 \n             registration_not_supported\n    The OP does not support use of the registration parameter",
            "title": "Path"
        },
        {
            "location": "/api/oic-token/",
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/token\n\n\nrequestAccessToken\n\n\nPOST\n \n/oxauth/token\n\n\nTo obtain an Access Token, an ID Token, and optionally a Refresh Token,\nthe RP (Client) sends a Token Request to the Token Endpoint to obtain a\nToken Response.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/token\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ngrant_type\n\n        \ntrue\n\n        \nGrant type value, one of these: authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749].\n\n        \nstring\n\n    \n\n    \n\n        \ncode\n\n        \nfalse\n\n        \nCode which is returned by authorization endpoint (For\ngrant_type=authorization_code).\n\n        \nstring\n\n    \n\n    \n\n        \nredirect_uri\n\n        \nfalse\n\n        \nRedirection uri to which the response will be sent. This\nuri MUST exactly match one of the redirection uri values for the client\npre-registered at the OpenID Provider.\n\n        \nstring\n\n    \n\n    \n\n        \nusername\n\n        \nfalse\n\n        \nEnd-User username.\n\n        \nstring\n\n    \n\n    \n\n        \npassword\n\n        \nfalse\n\n        \nEnd-User password.\n\n        \nstring\n\n    \n\n    \n\n        \nscope\n\n        \nfalse\n\n        \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n        \nstring\n\n    \n\n    \n\n        \nassertion\n\n        \nfalse\n\n        \nAssertion.\n\n        \nstring\n\n    \n\n    \n\n        \nrefresh_token\n\n        \nfalse\n\n        \nRefresh token.\n\n        \nstring\n\n    \n\n    \n\n        \noxauth_exchange_token\n\n        \nfalse\n\n        \noxauth_exchange_token.\n\n        \nstring\n\n    \n\n    \n\n        \nclient_id\n\n        \nfalse\n\n        \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n        \nstring\n\n    \n\n    \n\n        \nclient_secret\n\n        \nfalse\n\n        \nThe client secret. The client MAY omit the parameter if the client secret is an empty string.\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\n The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,\n utilizes more than one mechanism for authenticating the client, or is otherwise malformed.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_client\nClient authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate\nwhich HTTP authentication schemes are supported. If the client attempted to authenticate via the \"Authorization\"\nrequest header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and\ninclude the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_grant\n The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is\n invalid, expired, revoked, does not match the redirection uri used in the authorization request, or was issued to another client.\n\n        \n\n        \n\n            \n400\n\n            \nunauthorized_client\nThe authenticated client is not authorized to use this authorization grant type.\n\n        \n\n        \n\n            \n400\n\n            \nunsupported_grant_type\nThe authorization grant type is not supported by the authorization server.\n\n        \n\n        \n\n            \n400\n\n            \n invalid_scope\nThe requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.\n\n        \n\n\n\n\n\n\nData Types",
            "title": "OpenID Connect Token Endpoint"
        },
        {
            "location": "/api/oic-token/#api-document",
            "text": "/oxauth  Overview  /oxauth/token  requestAccessToken  POST   /oxauth/token  To obtain an Access Token, an ID Token, and optionally a Refresh Token,\nthe RP (Client) sends a Token Request to the Token Endpoint to obtain a\nToken Response.  URL  http://gluu.org/oxauth/token  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         grant_type \n         true \n         Grant type value, one of these: authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749]. \n         string \n     \n     \n         code \n         false \n         Code which is returned by authorization endpoint (For\ngrant_type=authorization_code). \n         string \n     \n     \n         redirect_uri \n         false \n         Redirection uri to which the response will be sent. This\nuri MUST exactly match one of the redirection uri values for the client\npre-registered at the OpenID Provider. \n         string \n     \n     \n         username \n         false \n         End-User username. \n         string \n     \n     \n         password \n         false \n         End-User password. \n         string \n     \n     \n         scope \n         false \n         OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n         string \n     \n     \n         assertion \n         false \n         Assertion. \n         string \n     \n     \n         refresh_token \n         false \n         Refresh token. \n         string \n     \n     \n         oxauth_exchange_token \n         false \n         oxauth_exchange_token. \n         string \n     \n     \n         client_id \n         false \n         OAuth 2.0 Client Identifier valid at the Authorization Server. \n         string \n     \n     \n         client_secret \n         false \n         The client secret. The client MAY omit the parameter if the client secret is an empty string. \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\n The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,\n utilizes more than one mechanism for authenticating the client, or is otherwise malformed. \n         \n         \n             400 \n             invalid_client\nClient authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate\nwhich HTTP authentication schemes are supported. If the client attempted to authenticate via the \"Authorization\"\nrequest header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and\ninclude the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client. \n         \n         \n             400 \n             invalid_grant\n The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is\n invalid, expired, revoked, does not match the redirection uri used in the authorization request, or was issued to another client. \n         \n         \n             400 \n             unauthorized_client\nThe authenticated client is not authorized to use this authorization grant type. \n         \n         \n             400 \n             unsupported_grant_type\nThe authorization grant type is not supported by the authorization server. \n         \n         \n             400 \n              invalid_scope\nThe requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.",
            "title": "API Document"
        },
        {
            "location": "/api/oic-token/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/oic-userinfo/",
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/userinfo\n\n\nrequestUserInfoPost\n\n\nPOST\n \n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/userinfo\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \naccess_token\n\n        \ntrue\n\n        \nOAuth 2.0 Access Token.\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n\n\n\n\n\nrequestUserInfoGet\n\n\nGET\n \n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/userinfo\n\n\n\nParameters\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \naccess_token\n\n        \ntrue\n\n        \nOAuth 2.0 Access Token.\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token. The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n\n\n\n\n\nData Types",
            "title": "OpenID Connect UserInfo Endpoint"
        },
        {
            "location": "/api/oic-userinfo/#api-document",
            "text": "/oxauth  Overview  /oxauth/userinfo  requestUserInfoPost  POST   /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.  URL  http://gluu.org/oxauth/userinfo  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         access_token \n         true \n         OAuth 2.0 Access Token. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource. \n            requestUserInfoGet  GET   /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.  URL  http://gluu.org/oxauth/userinfo  Parameters    query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         access_token \n         true \n         OAuth 2.0 Access Token. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token. The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.",
            "title": "API Document"
        },
        {
            "location": "/api/oic-userinfo/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/oic-register-client/",
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\nAny OpenID Client needs to register with the OpenID Provider to utilize OpenID Services, in this case register a user, and acquire a client ID and a shared secret.\n\n\n/oxauth/register\n\n\nregisterPost\n\n\nPOST\n \n/oxauth/register\n\n\nRegisters new dynamic client in oxAuth.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nredirect_uris\n\n\nRedirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request\n\n\n\n\n\n\nresponse_types\n\n\nA list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token\n\n\n\n\n\n\ngrant_types\n\n\nA list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. The Grant Type values used by OpenID Connect are:\nauthorization_code\n The Authorization Code Grant Type\nimplicit\n The Implicit Grant Type\nrefresh_token\n The Refresh Token Grant Type\nThe following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list:\ncode: authorization_code\nid_token: implicit\ntoken id_token: implicit\ncode id_token: authorization_code, implicit\ncode token: authorization_code, implicit\ncode token id_token: authorization_code, implicit\n\n\n\n\n\n\napplication_type\n\n\nKind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the https scheme as redirect_uris; they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname.\n\n\n\n\n\n\ncontacts\n\n\ne-mail addresses of people responsible for this Client.\n\n\n\n\n\n\nclient_name\n\n\nName of the Client to be presented to the End-User.\n\n\n\n\n\n\nlogo_uri\n\n\nURL that references a logo for the Client application. If present, the server displays this image to the End-User during approval. The value of this field must point to a valid image file.\n\n\n\n\n\n\nclient_uri\n\n\nURL of the home page of the Client. The value of this field must point to a valid Web page. If present, the server displays this URL to the End-User in a followable fashion.\n\n\n\n\n\n\npolicy_uri\n\n\nURL that the Relying Party Client provides to the End-User to read about the how the profile data will be used. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.\n\n\n\n\n\n\ntos_uri\n\n\nURL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.\n\n\n\n\n\n\njwks_uri\n\n\nURL for the Client's JSON Web Key Set (JWK) document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is not recommended, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values must still be present and must match those in the certificate.\n\n\n\n\n\n\njwks\n\n\nClient's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does). The jwks_uri and jwks parameters must not be used together.\n\n\n\n\n\n\nsector_identifier_uri\n\n\nURL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. Providers that use pairwise sub (subject) values utilizes the sector_identifier_uri value provided in the Subject Identifier calculation for pairwise identifiers.\n\n\n\n\n\n\nsubject_type\n\n\nsubject_type requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public.\n\n\n\n\n\n\nid_token_signed_response_alg\n\n\nJWS alg algorithm (JWA) required for signing the ID Token issued to this Client. The value none must not be used as the ID Token alg value unless the Client uses only Response Types that return no ID Token from the Authorization Endpoint (such as when only using the Authorization Code Flow). The default, if omitted, is RS256. The public key for validating the signature is provided by retrieving the JWK Set referenced by the jwks_uri element from OpenID Connect Discovery.\n\n\n\n\n\n\nid_token_encrypted_response_alg\n\n\nJWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client. If this is requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.\n\n\n\n\n\n\nid_token_encrypted_response_enc\n\n\nJWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client. If id_token_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg must also be provided.\n\n\n\n\n\n\nuserinfo_signed_response_alg\n\n\nJWS alg algorithm (JWA) required for signing UserInfo Responses. If this is specified, the response will be JWT serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.\n\n\n\n\n\n\nuserinfo_encrypted_response_alg\n\n\nJWE alg algorithm (JWA) required for encrypting UserInfo Responses. If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.\n\n\n\n\n\n\nuserinfo_encrypted_response_enc\n\n\nJWE enc algorithm (JWA) required for encrypting UserInfo Responses. If userinfo_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg must also be provided.\n\n\n\n\n\n\nrequest_object_signing_alg\n\n\nJWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP. All Request Objects from this Client are rejected, if not signed with this algorithm. This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). The value none may be used. The default, if omitted, is that any algorithm supported by the OP and the RP may be used.\n\n\n\n\n\n\nrequest_object_encryption_alg\n\n\nJWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. This parameter should be included when symmetric encryption will be used, since this signals to the OP that a client_secret value needs to be returned from which the symmetric key will be derived, that might not otherwise be returned. The RP may still use other supported encryption algorithms or send unencrypted Request Objects, even when this parameter is present. If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\n\n\n\n\n\nrequest_object_encryption_enc\n\n\nJWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. If request_object_encryption_alg is specified, the default for this value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg must also be provided.\n\n\n\n\n\n\ntoken_endpoint_auth_method\n\n\nRequested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none. If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.\n\n\n\n\n\n\ntoken_endpoint_auth_signing_alg\n\n\nJWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. All Token Requests using these authentication methods from this Client are rejected, if the JWT is not signed with this algorithm. The value none must not be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.\n\n\n\n\n\n\ndefault_max_age\n\n\nDefault Maximum Authentication Age. Specifies that the End-User must be actively authenticated if the End-User was authenticated longer ago than the specified number of seconds. The max_age request parameter overrides this default value. If omitted, no default Maximum Authentication Age is specified.\n\n\n\n\n\n\nrequire_auth_time\n\n\nBoolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true. (If this is false, the auth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter) If omitted, the default value is false.\n\n\n\n\n\n\ndefault_acr_values\n\n\nDefault requested Authentication Context Class Reference values. Array of strings that specifies the default acr values that the OP is being requested to use for processing requests from this Client, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value in the issued ID Token. The acr Claim is requested as a Voluntary Claim by this parameter. The acr_values_supported discovery element contains a list of the supported acr values supported by this server. Values specified in the acr_values request parameter or an individual acr Claim request override these default values.\n\n\n\n\n\n\ninitiate_login_uri\n\n\nURI using the https scheme that a third party can use to initiate a login by the RP. The URI must accept requests via both GET and POST. The Client must understand the login_hint and iss parameters and should support the target_link_uri parameter.\n\n\n\n\n\n\nrequest_uris\n\n\nrequest_uri values that are pre-registered by the RP for use at the OP. The Servers cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter. If the contents of the request file could ever change, these URI values should include the base64url encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment. If the fragment value used for a URI changes, that signals the server that its cached value for that URI with the old fragment value is no longer valid.\n\n\n\n\n\n\n\n\nResponse\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n    \n\n        \n302\n\n        \naccess_denies The request is denied by the authorization server.\n\n    \n\n\n\n\n\nregisterPut\n\n\nPUT\n \n/oxauth/register\n\n\nThis operation updates the Client Metadata for a registered client.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n\n\nThe request is sent as an \nHTTP POST\n to the client registration endpoint as JSON with the parameters.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclientId\n\n\nThe unique client identifier usually INUM\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\n\n\n\n\nhttpRequest\n\n\nThe HTTP Request object\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\n\n\n\n\n\n\nResponse\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n        \n\n            \n302\n\n            \naccess_denies The request is denied by the authorization server.\n\n        \n\n\n\n\n\nregisterGet\n\n\nGET\n \n/oxauth/register\n\n\nThis operation retrieves the Client Metadata for a previously registered client.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n\n\nThe request is sent as an \nHTTP POST\n to the client registration endpoint as JSON with the parameters.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclientId\n\n\nThe unique client identifier usually INUM\n\n\n\n\n\n\nsecurityContext\n\n\ninjectable interface that provides access to security related info.\n\n\n\n\n\n\n\n\nResponse\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n        \n\n            \n302\n\n            \naccess_denies The request is denied by the authorization server.",
            "title": "OpenID Connect Client Registration Endpoint"
        },
        {
            "location": "/api/oic-register-client/#api-document",
            "text": "",
            "title": "API Document"
        },
        {
            "location": "/api/oic-register-client/#oxauth",
            "text": "",
            "title": "/oxauth"
        },
        {
            "location": "/api/oic-register-client/#overview",
            "text": "Any OpenID Client needs to register with the OpenID Provider to utilize OpenID Services, in this case register a user, and acquire a client ID and a shared secret.",
            "title": "Overview"
        },
        {
            "location": "/api/oic-register-client/#oxauthregister",
            "text": "registerPost  POST   /oxauth/register  Registers new dynamic client in oxAuth.  URL  http://gluu.org/oxauth/register  Parameters     Parameter  Description      redirect_uris  Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request    response_types  A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token    grant_types  A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. The Grant Type values used by OpenID Connect are: authorization_code  The Authorization Code Grant Type implicit  The Implicit Grant Type refresh_token  The Refresh Token Grant Type The following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list: code: authorization_code id_token: implicit token id_token: implicit code id_token: authorization_code, implicit code token: authorization_code, implicit code token id_token: authorization_code, implicit    application_type  Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the https scheme as redirect_uris; they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname.    contacts  e-mail addresses of people responsible for this Client.    client_name  Name of the Client to be presented to the End-User.    logo_uri  URL that references a logo for the Client application. If present, the server displays this image to the End-User during approval. The value of this field must point to a valid image file.    client_uri  URL of the home page of the Client. The value of this field must point to a valid Web page. If present, the server displays this URL to the End-User in a followable fashion.    policy_uri  URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.    tos_uri  URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.    jwks_uri  URL for the Client's JSON Web Key Set (JWK) document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is not recommended, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values must still be present and must match those in the certificate.    jwks  Client's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does). The jwks_uri and jwks parameters must not be used together.    sector_identifier_uri  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. Providers that use pairwise sub (subject) values utilizes the sector_identifier_uri value provided in the Subject Identifier calculation for pairwise identifiers.    subject_type  subject_type requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public.    id_token_signed_response_alg  JWS alg algorithm (JWA) required for signing the ID Token issued to this Client. The value none must not be used as the ID Token alg value unless the Client uses only Response Types that return no ID Token from the Authorization Endpoint (such as when only using the Authorization Code Flow). The default, if omitted, is RS256. The public key for validating the signature is provided by retrieving the JWK Set referenced by the jwks_uri element from OpenID Connect Discovery.    id_token_encrypted_response_alg  JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client. If this is requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.    id_token_encrypted_response_enc  JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client. If id_token_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg must also be provided.    userinfo_signed_response_alg  JWS alg algorithm (JWA) required for signing UserInfo Responses. If this is specified, the response will be JWT serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.    userinfo_encrypted_response_alg  JWE alg algorithm (JWA) required for encrypting UserInfo Responses. If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.    userinfo_encrypted_response_enc  JWE enc algorithm (JWA) required for encrypting UserInfo Responses. If userinfo_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg must also be provided.    request_object_signing_alg  JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP. All Request Objects from this Client are rejected, if not signed with this algorithm. This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). The value none may be used. The default, if omitted, is that any algorithm supported by the OP and the RP may be used.    request_object_encryption_alg  JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. This parameter should be included when symmetric encryption will be used, since this signals to the OP that a client_secret value needs to be returned from which the symmetric key will be derived, that might not otherwise be returned. The RP may still use other supported encryption algorithms or send unencrypted Request Objects, even when this parameter is present. If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.    request_object_encryption_enc  JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. If request_object_encryption_alg is specified, the default for this value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg must also be provided.    token_endpoint_auth_method  Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none. If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.    token_endpoint_auth_signing_alg  JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. All Token Requests using these authentication methods from this Client are rejected, if the JWT is not signed with this algorithm. The value none must not be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.    default_max_age  Default Maximum Authentication Age. Specifies that the End-User must be actively authenticated if the End-User was authenticated longer ago than the specified number of seconds. The max_age request parameter overrides this default value. If omitted, no default Maximum Authentication Age is specified.    require_auth_time  Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true. (If this is false, the auth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter) If omitted, the default value is false.    default_acr_values  Default requested Authentication Context Class Reference values. Array of strings that specifies the default acr values that the OP is being requested to use for processing requests from this Client, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value in the issued ID Token. The acr Claim is requested as a Voluntary Claim by this parameter. The acr_values_supported discovery element contains a list of the supported acr values supported by this server. Values specified in the acr_values request parameter or an individual acr Claim request override these default values.    initiate_login_uri  URI using the https scheme that a third party can use to initiate a login by the RP. The URI must accept requests via both GET and POST. The Client must understand the login_hint and iss parameters and should support the target_link_uri parameter.    request_uris  request_uri values that are pre-registered by the RP for use at the OP. The Servers cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter. If the contents of the request file could ever change, these URI values should include the base64url encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment. If the fragment value used for a URI changes, that signals the server that its cached value for that URI with the old fragment value is no longer valid.     Response  Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]  Errors  \n     \n         Status Code \n         Reason \n     \n     \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource. \n         \n     \n         302 \n         access_denies The request is denied by the authorization server. \n       registerPut  PUT   /oxauth/register  This operation updates the Client Metadata for a registered client.  URL  http://gluu.org/oxauth/register  Parameters  The request is sent as an  HTTP POST  to the client registration endpoint as JSON with the parameters.     Parameter  Description      clientId  The unique client identifier usually INUM    authorization  The authorization for the client    httpRequest  The HTTP Request object    securityContext  Injectable interface providing access to security info     Response  Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource. \n         \n         \n             302 \n             access_denies The request is denied by the authorization server. \n           registerGet  GET   /oxauth/register  This operation retrieves the Client Metadata for a previously registered client.  URL  http://gluu.org/oxauth/register  Parameters  The request is sent as an  HTTP POST  to the client registration endpoint as JSON with the parameters.     Parameter  Description      clientId  The unique client identifier usually INUM    securityContext  injectable interface that provides access to security related info.     Response  Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource. \n         \n         \n             302 \n             access_denies The request is denied by the authorization server.",
            "title": "/oxauth/register"
        },
        {
            "location": "/api/oic-end-session/",
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/end_session\n\n\nrequestEndSession\n\n\nGET\n \n/oxauth/end_session\n\n\nEnd current Connect session.\nEnd current Connect session.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/end_session\n\n\n\nParameters\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nid_token_hint\n\n        \ntrue\n\n        \nPreviously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User's current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n        \nstring\n\n    \n\n    \n\n        \npost_logout_redirect_uri\n\n        \nfalse\n\n        \nURL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout.\n\n        \nstring\n\n    \n\n    \n\n        \nstate\n\n        \nfalse\n\n        \nOpaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP.\n\n        \nstring\n\n    \n\n    \n\n        \nsession_id\n\n        \nfalse\n\n        \nSession ID\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_grant\nThe provided access token is invalid, or was issued to another client.\n\n        \n\n\n\n\n\n\nData Types",
            "title": "OpenID Connect End Session Endpoint"
        },
        {
            "location": "/api/oic-end-session/#api-document",
            "text": "/oxauth  Overview  /oxauth/end_session  requestEndSession  GET   /oxauth/end_session  End current Connect session.\nEnd current Connect session.  URL  http://gluu.org/oxauth/end_session  Parameters    query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         id_token_hint \n         true \n         Previously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User's current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n         string \n     \n     \n         post_logout_redirect_uri \n         false \n         URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout. \n         string \n     \n     \n         state \n         false \n         Opaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP. \n         string \n     \n     \n         session_id \n         false \n         Session ID \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             400 \n             invalid_grant\nThe provided access token is invalid, or was issued to another client.",
            "title": "API Document"
        },
        {
            "location": "/api/oic-end-session/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/oic-clientinfo/",
            "text": "API for oxAuth Clientinfo\n\n\nThis document provides interface for Client Info REST web services.\n\n\nPath\n\n\n/oxauth/clientinfo\n\n\nOverview\n\n\nThe ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.\n\n\nclientinfoGet\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\naccess_token\n\n\nThe access token for oxAuth\n\n\nstring\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\nstring\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\ncontext\n\n\n\n\n\n\n\n\nclientinfoPost\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\naccess_token\n\n\nThe access token for oxAuth\n\n\nstring\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\nstring\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\ncontext",
            "title": "OpenID Connect Client Info Endpoint"
        },
        {
            "location": "/api/oic-clientinfo/#api-for-oxauth-clientinfo",
            "text": "This document provides interface for Client Info REST web services.",
            "title": "API for oxAuth Clientinfo"
        },
        {
            "location": "/api/oic-clientinfo/#path",
            "text": "/oxauth/clientinfo",
            "title": "Path"
        },
        {
            "location": "/api/oic-clientinfo/#overview",
            "text": "The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.  clientinfoGet     Parameter  Description  Data Type      access_token  The access token for oxAuth  string    authorization  The authorization for the client  string    securityContext  Injectable interface providing access to security info  context     clientinfoPost     Parameter  Description  Data Type      access_token  The access token for oxAuth  string    authorization  The authorization for the client  string    securityContext  Injectable interface providing access to security info  context",
            "title": "Overview"
        },
        {
            "location": "/api/uma-discovery/",
            "text": "API Document\n\n\n/.well-known/uma-configuration\n\n\nOverview\n\n\n/oxauth/uma-configuration\n\n\ngetConfiguration\n\n\nGET\n \n/oxauth/uma-configuration\n\n\nProvides configuration data as JSON document. It contains options and\nendpoints supported by the authorization server.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/uma-configuration\n\n\n\nParameters\n\n\nResponse\n\n\nUmaConfiguration\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n500\n\n        \nFailed to build UMA configuration JSON object.\n\n    \n\n\n\n\n\n\nData Types\n\n\nUmaConfiguration\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \n-\n\n        \nAn uri indicating the party operating the authorization server.\n\n        \nAn uri indicating the party operating the authorization server.\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \n-\n\n        \nThe version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".\n\n        \nThe version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".",
            "title": "UMA Discovery Endpoint"
        },
        {
            "location": "/api/uma-discovery/#api-document",
            "text": "/.well-known/uma-configuration  Overview  /oxauth/uma-configuration  getConfiguration  GET   /oxauth/uma-configuration  Provides configuration data as JSON document. It contains options and\nendpoints supported by the authorization server.  URL  http://gluu.org/oxauth/uma-configuration  Parameters  Response  UmaConfiguration  Errors  \n     \n         Status Code \n         Reason \n     \n     \n         500 \n         Failed to build UMA configuration JSON object.",
            "title": "API Document"
        },
        {
            "location": "/api/uma-discovery/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/uma-discovery/#umaconfiguration",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         Array[string] \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         Array[string] \n         optional \n         - \n         - \n         - \n     \n     \n         Array[string] \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         Array[string] \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         required \n         - \n         An uri indicating the party operating the authorization server. \n         An uri indicating the party operating the authorization server. \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         Array[string] \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         Array[string] \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         required \n         - \n         The version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\". \n         The version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".",
            "title": "UmaConfiguration"
        },
        {
            "location": "/api/uma-authorization-endpoint/",
            "text": "API Document\n\n\n/requester/perm\n\n\nOverview\n\n\n/requester/perm\n\n\nrequestRptPermissionAuthorization\n\n\nPOST\n \n/requester/perm\n\n\nClient Requests Authorization Data\nOnce in possession of a permission ticket and an AAT for this\nauthorization server, the client asks the authorization server to give\nit authorization data corresponding to that permission ticket. It\nperforms a POST on the RPT endpoint, supplying its own AAT in the header\nand a JSON object in the body with a \"ticket\" property containing the\nticket as its value.\n\n\nIf the client had included an RPT in its failed access attempt, It MAY\nalso provide that RPT in an \"rpt\" property in its request to the\nauthorization server.\n\n\nIn circumstances where the client needs to provide requesting party\nclaims to the authorization server, it MAY also include a \"claim_tokens\"\nproperty in its request; see Section 3.4.1.2.1 for more information. The\nauthorization server uses the ticket to look up the details of the\npreviously registered requested permission, maps the requested\npermission to operative resource owner policies based on the resource\nset identifier and scopes associated with it, potentially requests\nadditional information, and ultimately responds positively or negatively\nto the request for authorization data.\n\n\nThe authorization server bases the issuing of authorization data on\nresource owner policies. These policies thus amount to an asynchronous\nOAuth authorization grant. The authorization server is also free to\nenable the resource owner to set policies that require the owner to\ninteract with the server in near-real time to provide consent subsequent\nto an access attempt. All such processes are outside the scope of this\nspecification.\n\n\nURL\n\n\nhttp://gluu.org/requester/perm\n\n\n\nParameters\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \nfalse\n\n        \n\n        \nRptAuthorizationRequest\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \nHost\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n403\n\n            \nForbidden. Example of a \"need_info\" response with a full set of \"error_details\" hints:\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n...\n\n{\n \"error\": \"need_info\",\n \"error_details\": {\n   \"authentication_context\": {\n     \"required_acr\": [\"https://example.com/acrs/LOA3.14159\"]\n   },\n   \"requesting_party_claims\": {\n     \"required_claims\": [\n       {\n         \"name\": \"email23423453ou453\",\n         \"friendly_name\": \"email\",\n         \"claim_type\": \"urn:oid:0.9.2342.19200300.100.1.3\",\n         \"claim_token_format\": \n[\"http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken\"],\n         \"issuer\": [\"https://example.com/idp\"]\n       }\n     ],\n     \"redirect_user\": true,\n     \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n   }\n }\n}\n\n\n        \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n        \n\n            \n400\n\n            \nBad request\n\n        \n\n\n\n\n\n\nData Types\n\n\nClaimTokenList\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nint\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n\n\n\n\nRptAuthorizationRequest\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nClaimTokenList\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-",
            "title": "UMA Authorization Endpoint"
        },
        {
            "location": "/api/uma-authorization-endpoint/#api-document",
            "text": "/requester/perm  Overview  /requester/perm  requestRptPermissionAuthorization  POST   /requester/perm  Client Requests Authorization Data\nOnce in possession of a permission ticket and an AAT for this\nauthorization server, the client asks the authorization server to give\nit authorization data corresponding to that permission ticket. It\nperforms a POST on the RPT endpoint, supplying its own AAT in the header\nand a JSON object in the body with a \"ticket\" property containing the\nticket as its value.  If the client had included an RPT in its failed access attempt, It MAY\nalso provide that RPT in an \"rpt\" property in its request to the\nauthorization server.  In circumstances where the client needs to provide requesting party\nclaims to the authorization server, it MAY also include a \"claim_tokens\"\nproperty in its request; see Section 3.4.1.2.1 for more information. The\nauthorization server uses the ticket to look up the details of the\npreviously registered requested permission, maps the requested\npermission to operative resource owner policies based on the resource\nset identifier and scopes associated with it, potentially requests\nadditional information, and ultimately responds positively or negatively\nto the request for authorization data.  The authorization server bases the issuing of authorization data on\nresource owner policies. These policies thus amount to an asynchronous\nOAuth authorization grant. The authorization server is also free to\nenable the resource owner to set policies that require the owner to\ninteract with the server in near-real time to provide consent subsequent\nto an access attempt. All such processes are outside the scope of this\nspecification.  URL  http://gluu.org/requester/perm  Parameters    body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         false \n         \n         RptAuthorizationRequest \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n     \n     \n         Host \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             403 \n             Forbidden. Example of a \"need_info\" response with a full set of \"error_details\" hints:\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n...\n\n{\n \"error\": \"need_info\",\n \"error_details\": {\n   \"authentication_context\": {\n     \"required_acr\": [\"https://example.com/acrs/LOA3.14159\"]\n   },\n   \"requesting_party_claims\": {\n     \"required_claims\": [\n       {\n         \"name\": \"email23423453ou453\",\n         \"friendly_name\": \"email\",\n         \"claim_type\": \"urn:oid:0.9.2342.19200300.100.1.3\",\n         \"claim_token_format\": \n[\"http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken\"],\n         \"issuer\": [\"https://example.com/idp\"]\n       }\n     ],\n     \"redirect_user\": true,\n     \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n   }\n }\n} \n         \n         \n             401 \n             Unauthorized \n         \n         \n             400 \n             Bad request",
            "title": "API Document"
        },
        {
            "location": "/api/uma-authorization-endpoint/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/uma-authorization-endpoint/#claimtokenlist",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         boolean \n         optional \n         - \n         - \n         - \n     \n     \n         int \n         optional \n         - \n         - \n         -",
            "title": "ClaimTokenList"
        },
        {
            "location": "/api/uma-authorization-endpoint/#rptauthorizationrequest",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         ClaimTokenList \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         -",
            "title": "RptAuthorizationRequest"
        },
        {
            "location": "/api/uma-resource-registration/",
            "text": "API Document\n\n\n/host/rsrc/resource_set\n\n\nOverview\n\n\n/host/rsrc/resource_set{rsid}\n\n\ndeleteResourceSet\n\n\nDELETE\n \n/host/rsrc/resource_set{rsid}\n\n\nDeletes a previously registered resource set description using the\nDELETE method, thereby removing it from the authorization server's\nprotection regime.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\ngetResourceSet\n\n\nGET\n \n/host/rsrc/resource_set{rsid}\n\n\nReads a previously registered resource set description using the GET\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes a body containing the\nreferenced resource set description, along with an \"_id\" property.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description object ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\nupdateResourceSet\n\n\nPUT\n \n/host/rsrc/resource_set{rsid}\n\n\nUpdates a previously registered resource set description using the PUT\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes an \"_id\" property.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nResource set description JSON object\n\n        \nResourceSet\n\n    \n\n\n\n- path\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\n/host/rsrc/resource_set\n\n\ngetResourceSetList\n\n\nGET\n \n/host/rsrc/resource_set\n\n\nLists all previously registered resource set identifiers for this user\nusing the GET method. The authorization server MUST return the list in\nthe form of a JSON array of {rsid} string values.\n\n\nThe resource server uses this method as a first step in checking whether\nits understanding of protected resources is in full synchronization with\nthe authorization server's understanding.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nscope\n\n        \nfalse\n\n        \nScope uri\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\ncreateResourceSet\n\n\nPOST\n \n/host/rsrc/resource_set\n\n\nAdds a new resource set description using the POST method. If the\nrequest is successful, the authorization server MUST respond with a\nstatus message that includes an _id property.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nResource set description\n\n        \nResourceSet\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\nunsupportedHeadMethod\n\n\nHEAD\n \n/host/rsrc/resource_set\n\n\nNot allowed\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\nunsupportedOptionsMethod\n\n\nOPTIONS\n \n/host/rsrc/resource_set\n\n\nNot allowed\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\nData Types\n\n\nResourceSet\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-",
            "title": "UMA Resource Registration Endpoint"
        },
        {
            "location": "/api/uma-resource-registration/#api-document",
            "text": "/host/rsrc/resource_set  Overview  /host/rsrc/resource_set{rsid}  deleteResourceSet  DELETE   /host/rsrc/resource_set{rsid}  Deletes a previously registered resource set description using the\nDELETE method, thereby removing it from the authorization server's\nprotection regime.  URL  http://gluu.org/host/rsrc/resource_set{rsid}  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  ResourceSet  Errors  \n     \n         Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized \n        getResourceSet  GET   /host/rsrc/resource_set{rsid}  Reads a previously registered resource set description using the GET\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes a body containing the\nreferenced resource set description, along with an \"_id\" property.  URL  http://gluu.org/host/rsrc/resource_set{rsid}  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description object ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  ResourceSet  Errors  \n     \n         Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized \n        updateResourceSet  PUT   /host/rsrc/resource_set{rsid}  Updates a previously registered resource set description using the PUT\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes an \"_id\" property.  URL  http://gluu.org/host/rsrc/resource_set{rsid}  Parameters    body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         Resource set description JSON object \n         ResourceSet \n      \n- path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized \n        /host/rsrc/resource_set  getResourceSetList  GET   /host/rsrc/resource_set  Lists all previously registered resource set identifiers for this user\nusing the GET method. The authorization server MUST return the list in\nthe form of a JSON array of {rsid} string values.  The resource server uses this method as a first step in checking whether\nits understanding of protected resources is in full synchronization with\nthe authorization server's understanding.  URL  http://gluu.org/host/rsrc/resource_set  Parameters    query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         scope \n         false \n         Scope uri \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  ResourceSet  Errors  \n     \n         Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized \n        createResourceSet  POST   /host/rsrc/resource_set  Adds a new resource set description using the POST method. If the\nrequest is successful, the authorization server MUST respond with a\nstatus message that includes an _id property.  URL  http://gluu.org/host/rsrc/resource_set  Parameters    body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         Resource set description \n         ResourceSet \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n            unsupportedHeadMethod  HEAD   /host/rsrc/resource_set  Not allowed  URL  http://gluu.org/host/rsrc/resource_set  Parameters  Response   Errors  \n     \n         Status Code \n         Reason \n        unsupportedOptionsMethod  OPTIONS   /host/rsrc/resource_set  Not allowed  URL  http://gluu.org/host/rsrc/resource_set  Parameters  Response   Errors  \n     \n         Status Code \n         Reason",
            "title": "API Document"
        },
        {
            "location": "/api/uma-resource-registration/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/uma-resource-registration/#resourceset",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         Array[string] \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         -",
            "title": "ResourceSet"
        },
        {
            "location": "/api/uma-permission-registration/",
            "text": "API Document\n\n\n/host/rsrc_pr\n\n\nOverview\n\n\n/host/rsrc_pr\n\n\nregisterResourceSetPermission\n\n\nPOST\n \n/host/rsrc_pr\n\n\nRegisters permission using the POST method.\nThe resource server uses the POST method at the endpoint. The body of\nthe HTTP request message contains a JSON object providing the requested\npermission, using a format derived from the scope description format\nspecified in [OAuth-resource-reg], as follows. The object has the\nfollowing properties:\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc_pr\n\n\n\nParameters\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nThe identifier for a resource set to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered.\n\n        \nRegisterPermissionRequest\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \nHost\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n        \n\n            \n400\n\n            \nBad Request\n\n        \n\n\n\n\n\n\nData Types\n\n\nRegisterPermissionRequest\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nDate\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nDate\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nDate\n\n        \noptional\n\n        \n-\n\n        \n-\n\n        \n-",
            "title": "UMA Permission Registration Endpoint"
        },
        {
            "location": "/api/uma-permission-registration/#api-document",
            "text": "/host/rsrc_pr  Overview  /host/rsrc_pr  registerResourceSetPermission  POST   /host/rsrc_pr  Registers permission using the POST method.\nThe resource server uses the POST method at the endpoint. The body of\nthe HTTP request message contains a JSON object providing the requested\npermission, using a format derived from the scope description format\nspecified in [OAuth-resource-reg], as follows. The object has the\nfollowing properties:  URL  http://gluu.org/host/rsrc_pr  Parameters    body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         The identifier for a resource set to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered. \n         RegisterPermissionRequest \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n     \n     \n         Host \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n         \n         \n             400 \n             Bad Request",
            "title": "API Document"
        },
        {
            "location": "/api/uma-permission-registration/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/uma-permission-registration/#registerpermissionrequest",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         Date \n         optional \n         - \n         - \n         - \n     \n     \n         Array[string] \n         optional \n         - \n         - \n         - \n     \n     \n         Date \n         optional \n         - \n         - \n         - \n     \n     \n         string \n         optional \n         - \n         - \n         - \n     \n     \n         Date \n         optional \n         - \n         - \n         -",
            "title": "RegisterPermissionRequest"
        },
        {
            "location": "/api/uma-create-rpt/",
            "text": "API Document\n\n\n/requester/rpt\n\n\nOverview\n\n\n/requester/rpt\n\n\ngetRequesterPermissionToken\n\n\nPOST\n \n/requester/rpt\n\n\nThe endpoint at which the requester asks the AM to issue an RPT.\n\n\nURL\n\n\nhttp://gluu.org/requester/rpt\n\n\n\nParameters\n\n\n\n\n\n\nheader\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \nHost\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\nData Types",
            "title": "UMA CreateRPT Endpoint"
        },
        {
            "location": "/api/uma-create-rpt/#api-document",
            "text": "/requester/rpt  Overview  /requester/rpt  getRequesterPermissionToken  POST   /requester/rpt  The endpoint at which the requester asks the AM to issue an RPT.  URL  http://gluu.org/requester/rpt  Parameters    header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n     \n     \n         Host \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized",
            "title": "API Document"
        },
        {
            "location": "/api/uma-create-rpt/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/uma-rpt-status/",
            "text": "API Document\n\n\n/rpt/status\n\n\nOverview\n\n\n/rpt/status\n\n\nrequestRptStatusGet\n\n\nGET\n \n/rpt/status\n\n\nNot allowed\n\n\nURL\n\n\nhttp://gluu.org/rpt/status\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ntoken\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \ntoken_type_hint\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n405\n\n        \nIntrospection of RPT is not allowed by GET HTTP method.\n\n    \n\n\n\n\n\n\nrequestRptStatus\n\n\nPOST\n \n/rpt/status\n\n\nThe resource server MUST determine a received RPT's status, including\nboth whether it is active and, if so, its associated authorization data,\nbefore giving or refusing access to the client. An RPT is associated\nwith a set of authorization data that governs whether the client is\nauthorized for access. \n\n\nThe token's nature and format are dictated by its profile. The profile\nmight allow it to be self-contained, such that the resource server is\nable to determine its status locally, or might require or allow the\nresource server to make a run-time introspection request of the\nauthorization server that issued the token.\n\n\nThe endpoint MAY allow other parameters to provide further context to\nthe query. For instance, an authorization service may need to know the\nIP address of the client accessing the protected resource in order to\ndetermine the appropriateness of the token being presented.\n\n\nTo prevent unauthorized token scanning attacks, the endpoint MUST also\nrequire some form of authorization to access this endpoint, such as\nclient authentication as described in OAuth 2.0 [RFC6749] or a separate\nOAuth 2.0 access token such as the bearer token described in OAuth 2.0\nBearer Token Usage [RFC6750]. The methods of managing and validating\nthese authentication credentials are out of scope of this specification.\n\n\nURL\n\n\nhttp://gluu.org/rpt/status\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ntoken\n\n        \ntrue\n\n        \nThe string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint as defined\nin OAuth 2.0 [RFC6749] section 5.1. For refresh tokens, this is the\n\"refresh_token\" value returned from the token endpoint as defined in\nOAuth 2.0 [RFC6749] section 5.1. Other token types are outside the scope\nof this specification.\n\n        \nstring\n\n    \n\n    \n\n        \ntoken_type_hint\n\n        \nfalse\n\n        \nA hint about the type of the token submitted for\nintrospection. The protected resource MAY pass this parameter in order\nto help the authorization server to optimize the token lookup. If the\nserver is unable to locate the token using the given hint, it MUST\nextend its search across all of its supported token types. An\nauthorization server MAY ignore this parameter, particularly if it is\nable to detect the token type automatically. Values for this field are\ndefined in OAuth Token Revocation [RFC7009].\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\nData Types",
            "title": "UMA RPT Introspection Endpoint"
        },
        {
            "location": "/api/uma-rpt-status/#api-document",
            "text": "/rpt/status  Overview  /rpt/status  requestRptStatusGet  GET   /rpt/status  Not allowed  URL  http://gluu.org/rpt/status  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         token \n         false \n         \n         string \n     \n     \n         token_type_hint \n         false \n         \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n     \n         405 \n         Introspection of RPT is not allowed by GET HTTP method. \n        requestRptStatus  POST   /rpt/status  The resource server MUST determine a received RPT's status, including\nboth whether it is active and, if so, its associated authorization data,\nbefore giving or refusing access to the client. An RPT is associated\nwith a set of authorization data that governs whether the client is\nauthorized for access.   The token's nature and format are dictated by its profile. The profile\nmight allow it to be self-contained, such that the resource server is\nable to determine its status locally, or might require or allow the\nresource server to make a run-time introspection request of the\nauthorization server that issued the token.  The endpoint MAY allow other parameters to provide further context to\nthe query. For instance, an authorization service may need to know the\nIP address of the client accessing the protected resource in order to\ndetermine the appropriateness of the token being presented.  To prevent unauthorized token scanning attacks, the endpoint MUST also\nrequire some form of authorization to access this endpoint, such as\nclient authentication as described in OAuth 2.0 [RFC6749] or a separate\nOAuth 2.0 access token such as the bearer token described in OAuth 2.0\nBearer Token Usage [RFC6750]. The methods of managing and validating\nthese authentication credentials are out of scope of this specification.  URL  http://gluu.org/rpt/status  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         token \n         true \n         The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint as defined\nin OAuth 2.0 [RFC6749] section 5.1. For refresh tokens, this is the\n\"refresh_token\" value returned from the token endpoint as defined in\nOAuth 2.0 [RFC6749] section 5.1. Other token types are outside the scope\nof this specification. \n         string \n     \n     \n         token_type_hint \n         false \n         A hint about the type of the token submitted for\nintrospection. The protected resource MAY pass this parameter in order\nto help the authorization server to optimize the token lookup. If the\nserver is unable to locate the token using the given hint, it MUST\nextend its search across all of its supported token types. An\nauthorization server MAY ignore this parameter, particularly if it is\nable to detect the token type automatically. Values for this field are\ndefined in OAuth Token Revocation [RFC7009]. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized",
            "title": "API Document"
        },
        {
            "location": "/api/uma-rpt-status/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api/id-generation/",
            "text": "ID Generation API Document\n\n\nThis document outlines the API for ID Generation for Gluu Server.\n\n\nPath\n\n\n/id\n\n\nOverview\n\n\nThe API convention is set as \nid\n followed by \nprefix\n and \ntype\n or \n/id/{prefix}/{type}/\n.\nPlease se the following table to specify what type you are generating. The \nprefix\n is used in the \ninum to make it possible to know the type of object just by looking at the identifier.\n\n\n\n\n\n\n\n\nprefix\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n0000\n\n\npeople\n\n\nPerson object\n\n\n\n\n\n\n0001\n\n\norganization\n\n\nOrganization object\n\n\n\n\n\n\n0002\n\n\nappliance\n\n\nAppliance object\n\n\n\n\n\n\n0003\n\n\ngroup\n\n\nGroup object\n\n\n\n\n\n\n0004\n\n\nserver\n\n\nServer object\n\n\n\n\n\n\n0005\n\n\nattribute\n\n\nUser attribute (claim) object\n\n\n\n\n\n\n0006\n\n\ntRelationship\n\n\nSAML Trust Relationship object\n\n\n\n\n\n\n0008\n\n\nclient\n\n\nOAuth2 Client object\n\n\n\n\n\n\n0009\n\n\nscope\n\n\nOAuth2 Scope Object\n\n\n\n\n\n\n0010\n\n\numa-resource-set\n\n\nUMA Resource Set Object\n\n\n\n\n\n\n0011\n\n\ninterception-script\n\n\nGluu Server interception script object\n\n\n\n\n\n\n0012\n\n\nsector-identifier\n\n\nManaged Sector Identifier URI\n\n\n\n\n\n\n\n\ngenerateJsonInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \nType of id\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\ngenerateHtmlInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \nType of id\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \nThe authorization sent as a String\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\ngenerateTextInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\ngenerateXmlInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \nType of id\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\ngenerateHtmlInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \nType of id\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason",
            "title": "Custom ID Generation API"
        },
        {
            "location": "/api/id-generation/#id-generation-api-document",
            "text": "This document outlines the API for ID Generation for Gluu Server.",
            "title": "ID Generation API Document"
        },
        {
            "location": "/api/id-generation/#path",
            "text": "/id  Overview  The API convention is set as  id  followed by  prefix  and  type  or  /id/{prefix}/{type}/ .\nPlease se the following table to specify what type you are generating. The  prefix  is used in the \ninum to make it possible to know the type of object just by looking at the identifier.     prefix  type  description      0000  people  Person object    0001  organization  Organization object    0002  appliance  Appliance object    0003  group  Group object    0004  server  Server object    0005  attribute  User attribute (claim) object    0006  tRelationship  SAML Trust Relationship object    0008  client  OAuth2 Client object    0009  scope  OAuth2 Scope Object    0010  uma-resource-set  UMA Resource Set Object    0011  interception-script  Gluu Server interception script object    0012  sector-identifier  Managed Sector Identifier URI     generateJsonInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000 \n         string \n     \n     \n         type \n         true \n         Type of id \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason \n        generateHtmlInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000 \n         string \n     \n     \n         type \n         true \n         Type of id \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         The authorization sent as a String \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason \n        generateTextInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.\nGenerates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         \n         string \n     \n     \n         type \n         true \n         \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason \n        generateXmlInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.\nGenerates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000 \n         string \n     \n     \n         type \n         true \n         Type of id \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason \n        generateHtmlInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000 \n         string \n     \n     \n         type \n         true \n         Type of id \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason",
            "title": "Path"
        },
        {
            "location": "/api/scim-1.1/",
            "text": "SCIM 1.1\n\n\nSCIM 1.1 Specifications\n\n\nYou can see the detailed SCIM 1.1 specification documents\n\nhere\n.\n\n\nSCIM 1.1 Endpoints\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nUser Endpoint\n\n\n/seam/resource/restv1/Users\n\n\n\n\ngetUser\n\n\nGET\n \n/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\nReturns a user on the basis of provided id as path parameter. The\nresource MUST be already registered with the mentioned id.\n\n\nURL\n\n\nhttp://gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\n\nRequest\n\n\nParameters\n\n\n\n\nFollowing are the details about parameters:\n    \n\n        \n\n            \nParameter\n\n            \nLocation\n\n        \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nrsid\n\n        \npath\n\n        \nTRUE\n\n            \nResource set description ID\n\n            \nstring\n\n        \n\n    \n\n            \nAuthorization\n\n        \nheader\n\n        \nFALSE\n\n            \n\n            \nstring\n\n        \n\n    \n\n\n\n\nResponse\n\n\nContent Type:\n  application/json, application/xml\n\n\nSuccess\n\n\n\n\n\n        \n\n            \nStatus Code\n\n            \nReason\n\n            \nDescription\n\n        \n\n        \n\n            \n200\n\n            \nSuccessful Operation\n\n            \nResource returned successfully\n\n        \n\n    \n\n\n\n\nErrors\n\n\n\n\n\n        \n\n            \nStatus Code\n\n            \nReason\n\n            \nDescription\n\n        \n\n        \n\n            \n400\n\n            \nBAD REQUEST\n\n            \nRequest cannot be parsed, is syntactically incorrect, or violates schema.\n\n        \n\n        \n\n            \n401\n\n            \nUNAUTHORIZED\n\n            \nAuthorization header is invalid or missing.\n\n        \n\n        \n\n            \n403\n\n            \nFORBIDDEN\n\n            \nOperation is not permitted based on the supplied\nauthorization.\n\n        \n\n        \n\n            \n404\n\n            \nNOT FOUND\n\n            \nSpecified user does not exist.\n\n        \n\n    \n\n\n\n\n\n\nGroup Endpoint\n\n\n/seam/resource/restv1/Groups\n\n\n\n\ngetGroup\n\n\nGET\n \n/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\nReturns a group on the basis of the provided id as a path parameter. The\ngroup MUST be already registered with the mentioned id.\n\n\nURL\n\n\nhttp://gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\n\nRequest\n\n\nParameters\n\n\n\n\nFollowing are the details about parameters:\n    \n\n        \n\n            \nParameter\n\n            \nLocation\n\n        \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nrsid\n\n        \npath\n\n        \nTRUE\n\n            \nResource set description ID.\n\n            \nstring\n\n        \n\n    \n\n            \nAuthorization\n\n        \nheader\n\n        \nFALSE\n\n            \n\n            \nstring\n\n        \n\n    \n\n\n\n\nResponse\n\n\nContent Type:\n  application/json, application/xml\n\n\nSuccess\n\n\n\n\n\n        \n\n            \nStatus Code\n\n            \nReason\n\n            \nDescription\n\n        \n\n        \n\n            \n200\n\n            \nSuccessful Operation\n\n            \nGroup returned successfully.\n\n        \n\n    \n\n\n\n\nErrors\n\n\n\n\n\n        \n\n            \nStatus Code\n\n            \nReason\n\n            \nDescription\n\n        \n\n        \n\n            \n400\n\n            \nBad Request\n\n            \nRequest cannot be parsed, is syntactically incorrect, or violates schema.\n\n        \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n            \nAuthorization header is invalid or missing.\n\n        \n\n        \n\n            \n403\n\n            \nForbidden\n\n            \nOperation is not permitted based on the supplied authorization.\n\n        \n\n        \n\n            \n404\n\n            \nNot Found\n\n            \nSpecified user does not exist.\n\n        \n\n    \n\n\n\n\n\n\nBulk Operation Endpoint\n\n\n/seam/resource/restv1/scim/v1/Bulk\n\n\n\n\nBulk Operation\n\n\nSCIM Bulk Operation enables consumers to work with a potentially large\ncollection (bulk) of Resource operations in a single request. A body of\na bulk operation may contain a set of HTTP Resource operations using one\nof the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE.\n(see http://www.simplecloud.info/specs/draft-scim-api-01.html#bulk-resources\nfor more details.)\n\n\nSecurity\n\n\n\n\nAuthorization\n\n\n\n\nRequest\n\n\nContent-Type:\n application/json, application/xml\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring \n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nno\n\n        \nBulkRequest\n\n        \n - \n\n        \nBulkRequest\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type: \n application/json, application/xml\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\nDefinitions\n\n\nBulkOperation\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n        \n\n            \nbulkId\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nversion\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nmethod\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \npath\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nlocation\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \ndata\n\n            \nobject\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nstatus\n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nresponse\n\n            \nobject\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n\n\n\nBulkRequest\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n        \n\n            \nschemes\n\n            \narray[string]\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \nfailOnErrors\n\n            \ninteger (int32)\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \noperations\n\n            \narray[\nBulkOperation\n]\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n\n\n\nBulkResponse\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n        \n\n            \nschemes\n\n            \narray[string]\n\n            \noptional\n\n            \n-\n\n            \n\n        \n\n\n        \n\n            \noperations\n\n            \narray[\nBulkOperation\n]\n\n            \noptional\n\n            \n-",
            "title": "SCIM 1.1"
        },
        {
            "location": "/api/scim-1.1/#scim-11",
            "text": "SCIM 1.1 Specifications  You can see the detailed SCIM 1.1 specification documents here .  SCIM 1.1 Endpoints   User Endpoint  Group Endpoint  Bulk Operation Endpoint",
            "title": "SCIM 1.1"
        },
        {
            "location": "/api/scim-1.1/#user-endpoint",
            "text": "/seam/resource/restv1/Users   getUser  GET   /host/seam/resource/restv1/scim/v1/Users{rsid}  Returns a user on the basis of provided id as path parameter. The\nresource MUST be already registered with the mentioned id.  URL  http://gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}  Request  Parameters   Following are the details about parameters:\n     \n         \n             Parameter \n             Location \n         Required \n             Description \n             Data Type \n         \n         \n             rsid \n         path \n         TRUE \n             Resource set description ID \n             string \n         \n     \n             Authorization \n         header \n         FALSE \n             \n             string \n         \n       Response  Content Type:   application/json, application/xml  Success   \n         \n             Status Code \n             Reason \n             Description \n         \n         \n             200 \n             Successful Operation \n             Resource returned successfully \n         \n       Errors   \n         \n             Status Code \n             Reason \n             Description \n         \n         \n             400 \n             BAD REQUEST \n             Request cannot be parsed, is syntactically incorrect, or violates schema. \n         \n         \n             401 \n             UNAUTHORIZED \n             Authorization header is invalid or missing. \n         \n         \n             403 \n             FORBIDDEN \n             Operation is not permitted based on the supplied\nauthorization. \n         \n         \n             404 \n             NOT FOUND \n             Specified user does not exist.",
            "title": "User Endpoint"
        },
        {
            "location": "/api/scim-1.1/#group-endpoint",
            "text": "/seam/resource/restv1/Groups   getGroup  GET   /host/seam/resource/restv1/scim/v1/Groups{rsid}  Returns a group on the basis of the provided id as a path parameter. The\ngroup MUST be already registered with the mentioned id.  URL  http://gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}  Request  Parameters   Following are the details about parameters:\n     \n         \n             Parameter \n             Location \n         Required \n             Description \n             Data Type \n         \n         \n             rsid \n         path \n         TRUE \n             Resource set description ID. \n             string \n         \n     \n             Authorization \n         header \n         FALSE \n             \n             string \n         \n       Response  Content Type:   application/json, application/xml  Success   \n         \n             Status Code \n             Reason \n             Description \n         \n         \n             200 \n             Successful Operation \n             Group returned successfully. \n         \n       Errors   \n         \n             Status Code \n             Reason \n             Description \n         \n         \n             400 \n             Bad Request \n             Request cannot be parsed, is syntactically incorrect, or violates schema. \n         \n         \n             401 \n             Unauthorized \n             Authorization header is invalid or missing. \n         \n         \n             403 \n             Forbidden \n             Operation is not permitted based on the supplied authorization. \n         \n         \n             404 \n             Not Found \n             Specified user does not exist.",
            "title": "Group Endpoint"
        },
        {
            "location": "/api/scim-1.1/#bulk-operation-endpoint",
            "text": "/seam/resource/restv1/scim/v1/Bulk   Bulk Operation  SCIM Bulk Operation enables consumers to work with a potentially large\ncollection (bulk) of Resource operations in a single request. A body of\na bulk operation may contain a set of HTTP Resource operations using one\nof the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE.\n(see http://www.simplecloud.info/specs/draft-scim-api-01.html#bulk-resources\nfor more details.)  Security   Authorization   Request  Content-Type:  application/json, application/xml  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         no \n         \n          -  \n         string  \n     \n     \n         body \n         body \n         no \n         BulkRequest \n          -  \n         BulkRequest \n       Response  Content-Type:   application/json, application/xml     Status Code  Reason  Response Model      200  successful operation  BulkResponse",
            "title": "Bulk Operation Endpoint"
        },
        {
            "location": "/api/scim-1.1/#definitions",
            "text": "",
            "title": "Definitions"
        },
        {
            "location": "/api/scim-1.1/#bulkoperation",
            "text": "name \n         type \n         required \n         description \n         example \n     \n\n         \n             bulkId \n             string \n             optional \n             - \n             \n         \n\n         \n             version \n             string \n             optional \n             - \n             \n         \n\n         \n             method \n             string \n             optional \n             - \n             \n         \n\n         \n             path \n             string \n             optional \n             - \n             \n         \n\n         \n             location \n             string \n             optional \n             - \n             \n         \n\n         \n             data \n             object \n             optional \n             - \n             \n         \n\n         \n             status \n             string \n             optional \n             - \n             \n         \n\n         \n             response \n             object \n             optional \n             -",
            "title": "BulkOperation"
        },
        {
            "location": "/api/scim-1.1/#bulkrequest",
            "text": "name \n         type \n         required \n         description \n         example \n     \n\n         \n             schemes \n             array[string] \n             optional \n             - \n             \n         \n\n         \n             failOnErrors \n             integer (int32) \n             optional \n             - \n             \n         \n\n         \n             operations \n             array[ BulkOperation ] \n             optional \n             -",
            "title": "BulkRequest"
        },
        {
            "location": "/api/scim-1.1/#bulkresponse",
            "text": "name \n         type \n         required \n         description \n         example \n     \n\n         \n             schemes \n             array[string] \n             optional \n             - \n             \n         \n\n         \n             operations \n             array[ BulkOperation ] \n             optional \n             -",
            "title": "BulkResponse"
        },
        {
            "location": "/api/scim-2.0/",
            "text": "SCIM 2.0\n\n\nSCIM 2.0 Specifications\n\n\nYou can see the detailed SCIM 2.0 specification documents here:\n\n\nSystem for Cross-domain Identity Management: Core Schema\n\n\nSystem for Cross-domain Identity Management: Protocol\n\n\nSCIM 2.0 Endpoints\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nSCIM 2.0 Definitions\n\n\n\n\nDefinitions\n\n\n\n\n\n\nUser Endpoint\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users\n\n\n\nGET\n\n\nSearch Users\n - searches users based on filter criteria\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nfilter\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nstartIndex\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \ncount\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortBy\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortOrder\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n\n\nCreate User\n - creates a user\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nUser\n\n        \n - \n\n        \nUser\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}\n\n\n\nGET\n\n\nFind User By ID\n - returns a user by id as path parameter\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/scim\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nPUT\n\n\nUpdate User\n - updates a user\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nUser\n\n        \n - \n\n        \nUser\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nDELETE\n\n\nDelete User\n - deletes a user\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/Search\n\n\n\nPOST\n\n\nSearch Users\n (\nDeprecated\n)\n - searches users by HTTP POST\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \n\n        \n - \n\n        \nScimPersonSearch\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\n\n\nGroup Endpoint\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups\n\n\n\nGET\n\n\nSearch Groups\n - searches groups based on filter criteria\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nfilter\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nstartIndex\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \ncount\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortBy\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortOrder\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n\n\nCreate Group\n - creates a group\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nGroup\n\n        \n - \n\n        \nGroup\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}\n\n\n\nGET\n\n\nFind Group By ID\n - returns a group by id as path parameter\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of group\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nPUT\n\n\nUpdate Group\n - updates a group\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of group\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nGroup\n\n        \n - \n\n        \nGroup\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nDELETE\n\n\nDelete Group\n - deletes a group\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of the group\n\n        \n - \n\n        \nstring \n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\n\n\nBulk Operation Endpoint\n\n\nURL\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Bulk\n\n\n\nPOST\n\n\nBulk Operations\n - bulk operations\n\n\nSecurity\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nBulkRequest\n\n        \n - \n\n        \nBulkRequest\n\n    \n\n\n\n\n\nResponse\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\nDefinitions\n\n\nAddress\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nformatted\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstreetAddress\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocality\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nregion\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npostalCode\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ncountry\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \nType\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkOperation\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nbulkId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nversion\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmethod\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npath\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndata\n\n        \n object \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstatus\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresponse\n\n        \n object \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkRequest\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nfailOnErrors\n\n        \n integer (int32) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \noperations\n\n        \n array[\nBulkOperation\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkResponse\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \noperations\n\n        \n array[\nBulkOperation\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nEmail\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nEntitlement\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n   \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nGroup\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \n \nMeta\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplayName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmembers\n\n        \n array[\nMemberRef\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nGroupRef\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nIm\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nListResponse\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \ntotalResults\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstartIndex\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nitemsPerPage\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \narray[string]\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresources\n\n        \narray[\nResource\n]\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nMemberRef\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nMeta\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \ncreated\n\n        \n string (date-time) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlastModified\n\n        \n string (date-time) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nversion\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nattributes\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresourceType\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nName\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nformatted\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nfamilyName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ngivenName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmiddleName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nhonorificPrefix\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nhonorificSuffix\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nPhoneNumber\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nPhoto\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nResource\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \nMeta\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \narray[string]\n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nRole\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nType\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n\n\n\nUser\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \n \nMeta\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nuserName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nname\n\n        \n \nName\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplayName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nnickName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprofileUrl\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntitle\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nuserType\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npreferredLanguage\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocale\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntimezone\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nactive\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npassword\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nemails\n\n        \n array[\nEmail\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nphoneNumbers\n\n        \n array[\nPhoneNumber\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nims\n\n        \n array[\nIm\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nphotos\n\n        \n array[\nPhoto\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \naddresses\n\n        \n array[\nAddress\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ngroups\n\n        \n array[\nGroupRef\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nentitlements\n\n        \n array[\nEntitlement\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nroles\n\n        \n array[\nRole\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nx509Certificates\n\n        \n array[\nX509Certificate\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nX509Certificate\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \nType\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nScimPersonSearch\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nattribute\n\n        \n string \n\n        \nrequired\n\n        \nUser Attribute Name\n\n        \nUsername\n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \nrequired\n\n        \nUser Attribute Value\n\n        \nMike",
            "title": "SCIM 2.0"
        },
        {
            "location": "/api/scim-2.0/#scim-20",
            "text": "SCIM 2.0 Specifications  You can see the detailed SCIM 2.0 specification documents here:  System for Cross-domain Identity Management: Core Schema  System for Cross-domain Identity Management: Protocol  SCIM 2.0 Endpoints   User Endpoint  Group Endpoint  Bulk Operation Endpoint   SCIM 2.0 Definitions   Definitions",
            "title": "SCIM 2.0"
        },
        {
            "location": "/api/scim-2.0/#user-endpoint",
            "text": "URL  <domain root>/identity/seam/resource/restv1/scim/v2/Users  GET  Search Users  - searches users based on filter criteria  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         filter \n         query \n         no \n         \n          -  \n         string \n     \n     \n         startIndex \n         query \n         no \n         \n          -  \n         string \n     \n     \n         count \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortBy \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortOrder \n         query \n         no \n         \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse     POST  Create User  - creates a user  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         User \n          -  \n         User \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  User     URL  <domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}  GET  Find User By ID  - returns a user by id as path parameter  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/scim     Status Code  Reason  Response Model      200  successful operation  User     PUT  Update User  - updates a user  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         User \n          -  \n         User \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  User     DELETE  Delete User  - deletes a user  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -     URL  <domain root>/identity/seam/resource/restv1/scim/v2/Users/Search  POST  Search Users  ( Deprecated )  - searches users by HTTP POST  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         \n          -  \n         ScimPersonSearch \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse",
            "title": "User Endpoint"
        },
        {
            "location": "/api/scim-2.0/#group-endpoint",
            "text": "URL  <domain root>/identity/seam/resource/restv1/scim/v2/Groups  GET  Search Groups  - searches groups based on filter criteria  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         filter \n         query \n         no \n         \n          -  \n         string \n     \n     \n         startIndex \n         query \n         no \n         \n          -  \n         string \n     \n     \n         count \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortBy \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortOrder \n         query \n         no \n         \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse     POST  Create Group  - creates a group  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         Group \n          -  \n         Group \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  Group     URL  <domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}  GET  Find Group By ID  - returns a group by id as path parameter  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of group \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group     PUT  Update Group  - updates a group  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of group \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         Group \n          -  \n         Group \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group     DELETE  Delete Group  - deletes a group  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of the group \n          -  \n         string  \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -",
            "title": "Group Endpoint"
        },
        {
            "location": "/api/scim-2.0/#bulk-operation-endpoint",
            "text": "URL  <domain root>/identity/seam/resource/restv1/scim/v2/Bulk  POST  Bulk Operations  - bulk operations  Security   UMA (default)  OAuth2 Access Token (Test Mode)   Request  Content-Type:   application/scim+json ,  application/json  Parameters  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         BulkRequest \n          -  \n         BulkRequest \n       Response  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  BulkResponse",
            "title": "Bulk Operation Endpoint"
        },
        {
            "location": "/api/scim-2.0/#definitions",
            "text": "",
            "title": "Definitions"
        },
        {
            "location": "/api/scim-2.0/#address",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n         string \n         optional \n         - \n         \n     \n     \n         primary \n         boolean \n         optional \n         - \n         \n     \n     \n         formatted \n         string \n         optional \n         - \n         \n     \n     \n         streetAddress \n         string \n         optional \n         - \n         \n     \n     \n         locality \n         string \n         optional \n         - \n         \n     \n     \n         region \n         string \n         optional \n         - \n         \n     \n     \n         postalCode \n         string \n         optional \n         - \n         \n     \n     \n         country \n         string \n         optional \n         - \n         \n     \n     \n         type \n         Type \n         optional \n         - \n         \n     \n     \n         $ref \n         string \n         optional \n         -",
            "title": "Address"
        },
        {
            "location": "/api/scim-2.0/#bulkoperation",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         bulkId \n          string  \n         optional \n         - \n         \n     \n     \n         version \n          string  \n         optional \n         - \n         \n     \n     \n         method \n          string  \n         optional \n         - \n         \n     \n     \n         path \n          string  \n         optional \n         - \n         \n     \n     \n         location \n          string  \n         optional \n         - \n         \n     \n     \n         data \n          object  \n         optional \n         - \n         \n     \n     \n         status \n          string  \n         optional \n         - \n         \n     \n     \n         response \n          object  \n         optional \n         -",
            "title": "BulkOperation"
        },
        {
            "location": "/api/scim-2.0/#bulkrequest",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         schemas \n          array[string]  \n         optional \n         - \n         \n     \n     \n         failOnErrors \n          integer (int32)  \n         optional \n         - \n         \n     \n     \n         operations \n          array[ BulkOperation ]  \n         optional \n         -",
            "title": "BulkRequest"
        },
        {
            "location": "/api/scim-2.0/#bulkresponse",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         schemas \n          array[string]  \n         optional \n         - \n         \n     \n     \n         operations \n          array[ BulkOperation ]  \n         optional \n         -",
            "title": "BulkResponse"
        },
        {
            "location": "/api/scim-2.0/#email",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Email"
        },
        {
            "location": "/api/scim-2.0/#entitlement",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n    \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Entitlement"
        },
        {
            "location": "/api/scim-2.0/#group",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         id \n          string  \n         optional \n         - \n         \n     \n     \n         externalId \n          string  \n         optional \n         - \n         \n     \n     \n         meta \n           Meta   \n         optional \n         - \n         \n     \n     \n         schemas \n          array[string]  \n         required \n         - \n         \n     \n     \n         displayName \n          string  \n         optional \n         - \n         \n     \n     \n         members \n          array[ MemberRef ]  \n         optional \n         -",
            "title": "Group"
        },
        {
            "location": "/api/scim-2.0/#groupref",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "GroupRef"
        },
        {
            "location": "/api/scim-2.0/#im",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Im"
        },
        {
            "location": "/api/scim-2.0/#listresponse",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         totalResults \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         startIndex \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         itemsPerPage \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         schemas \n         array[string] \n         optional \n         - \n         \n     \n     \n         resources \n         array[ Resource ] \n         optional \n         -",
            "title": "ListResponse"
        },
        {
            "location": "/api/scim-2.0/#memberref",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "MemberRef"
        },
        {
            "location": "/api/scim-2.0/#meta",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         created \n          string (date-time)  \n         optional \n         - \n         \n     \n     \n         lastModified \n          string (date-time)  \n         optional \n         - \n         \n     \n     \n         location \n          string  \n         optional \n         - \n         \n     \n     \n         version \n          string  \n         optional \n         - \n         \n     \n     \n         attributes \n          array[string]  \n         optional \n         - \n         \n     \n     \n         resourceType \n          string  \n         optional \n         -",
            "title": "Meta"
        },
        {
            "location": "/api/scim-2.0/#name",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         formatted \n          string  \n         optional \n         - \n         \n     \n     \n         familyName \n          string  \n         optional \n         - \n         \n     \n     \n         givenName \n          string  \n         optional \n         - \n         \n     \n     \n         middleName \n          string  \n         optional \n         - \n         \n     \n     \n         honorificPrefix \n          string  \n         optional \n         - \n         \n     \n     \n         honorificSuffix \n          string  \n         optional \n         -",
            "title": "Name"
        },
        {
            "location": "/api/scim-2.0/#phonenumber",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "PhoneNumber"
        },
        {
            "location": "/api/scim-2.0/#photo",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Photo"
        },
        {
            "location": "/api/scim-2.0/#resource",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         id \n         string \n         optional \n         - \n         \n     \n     \n         externalId \n         string \n         optional \n         - \n         \n     \n     \n         meta \n         Meta \n         optional \n         - \n         \n     \n     \n         schemas \n         array[string] \n         required \n         -",
            "title": "Resource"
        },
        {
            "location": "/api/scim-2.0/#role",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         -",
            "title": "Role"
        },
        {
            "location": "/api/scim-2.0/#type",
            "text": "name \n         type \n         required \n         description \n         example",
            "title": "Type"
        },
        {
            "location": "/api/scim-2.0/#user",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         id \n          string  \n         optional \n         - \n         \n     \n     \n         externalId \n          string  \n         optional \n         - \n         \n     \n     \n         meta \n           Meta   \n         optional \n         - \n         \n     \n     \n         schemas \n          array[string]  \n         required \n         - \n         \n     \n     \n         userName \n          string  \n         optional \n         - \n         \n     \n     \n         name \n           Name   \n         optional \n         - \n         \n     \n     \n         displayName \n          string  \n         optional \n         - \n         \n     \n     \n         nickName \n          string  \n         optional \n         - \n         \n     \n     \n         profileUrl \n          string  \n         optional \n         - \n         \n     \n     \n         title \n          string  \n         optional \n         - \n         \n     \n     \n         userType \n          string  \n         optional \n         - \n         \n     \n     \n         preferredLanguage \n          string  \n         optional \n         - \n         \n     \n     \n         locale \n          string  \n         optional \n         - \n         \n     \n     \n         timezone \n          string  \n         optional \n         - \n         \n     \n     \n         active \n          boolean  \n         optional \n         - \n         \n     \n     \n         password \n          string  \n         optional \n         - \n         \n     \n     \n         emails \n          array[ Email ]  \n         optional \n         - \n         \n     \n     \n         phoneNumbers \n          array[ PhoneNumber ]  \n         optional \n         - \n         \n     \n     \n         ims \n          array[ Im ]  \n         optional \n         - \n         \n     \n     \n         photos \n          array[ Photo ]  \n         optional \n         - \n         \n     \n     \n         addresses \n          array[ Address ]  \n         optional \n         - \n         \n     \n     \n         groups \n          array[ GroupRef ]  \n         optional \n         - \n         \n     \n     \n         entitlements \n          array[ Entitlement ]  \n         optional \n         - \n         \n     \n     \n         roles \n          array[ Role ]  \n         optional \n         - \n         \n     \n     \n         x509Certificates \n          array[ X509Certificate ]  \n         optional \n         -",
            "title": "User"
        },
        {
            "location": "/api/scim-2.0/#x509certificate",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n         string \n         optional \n         - \n         \n     \n     \n         value \n         string \n         optional \n         - \n         \n     \n     \n         display \n         string \n         optional \n         - \n         \n     \n     \n         primary \n         boolean \n         optional \n         - \n         \n     \n     \n         type \n         Type \n         optional \n         - \n         \n     \n     \n         $ref \n         string \n         optional \n         -",
            "title": "X509Certificate"
        },
        {
            "location": "/api/scim-2.0/#scimpersonsearch",
            "text": "name \n         type \n         required \n         description \n         example \n     \n     \n         attribute \n          string  \n         required \n         User Attribute Name \n         Username \n     \n     \n         value \n          string  \n         required \n         User Attribute Value \n         Mike",
            "title": "ScimPersonSearch"
        }
    ]
}